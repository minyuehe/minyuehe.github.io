<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/08/28/centos-huan-jing-da-jian/"/>
      <url>2021/08/28/centos-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="centOS环境搭建"><a href="#centOS环境搭建" class="headerlink" title="centOS环境搭建"></a>centOS环境搭建</h2><p>最近，买了一个腾讯云的服务器，上传了自己的博客，过程中也是很多辛酸泪的！</p><p>mark&amp;share</p><h4 id="一，构建node环境"><a href="#一，构建node环境" class="headerlink" title="一，构建node环境"></a>一，构建node环境</h4><ul><li>远程登录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh root@公网ip   #ssh root@101.34.143.80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>安装node.js</p><pre class="line-numbers language-none"><code class="language-none">wget https://nodejs.org/dist/v10.16.3/node-v10.16.3-linux-x64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压</p><pre class="line-numbers language-none"><code class="language-none">tar xvf node-v10.16.3-linux-x64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立软连接</p><pre class="line-numbers language-none"><code class="language-none">ln -s /root/node-v10.16.3-linux-x64/bin/node /usr/local/bin/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ln -s /root/node-v10.16.3-linux-x64/bin/npm /usr/local/bin/npm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这里除了软连接，可以配置对应的path</li></ul><ol><li>在.bash_profile中</li></ol><pre class="line-numbers language-none"><code class="language-none">vim ~/.bash_profile      // 在PATH后面追加全局路径就好了，这样所有的nodejs包cli都可以全局使用source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <img data-src="centos环境搭建/image-20210828234410774.png" alt="image-20210828234410774" style="zoom:50%;"><ol start="2"><li> 在/etc/profile中</li></ol><pre class="line-numbers language-none"><code class="language-none">vim /etc/profile        // 在PATH后面追加全局路径就好了，这样所有的nodejs包cli都可以全局使用source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img data-src="centos环境搭建/image-20210828234310703.png" alt="image-20210828234310703" style="zoom:50%;"> <p>3.临时会话型</p><pre class="line-numbers language-none"><code class="language-none">PATH=$PATH:/usr/local/mysql/binalias mysql=/usr/local/mysql/bin/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>校验/查看版本</p><pre class="line-numbers language-none"><code class="language-none">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>node安装多个版本</p><ol><li><p>安装git</p><pre class="line-numbers language-none"><code class="language-none">yum install -y git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下载nvm源码</p><pre class="line-numbers language-none"><code class="language-none">git clone git://github.com/cnpm/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置nvm环境变量</p><pre class="line-numbers language-none"><code class="language-none">echo ". ~/.nvm/nvm.sh" &gt;&gt; /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>读取环境变量</p><pre class="line-numbers language-none"><code class="language-none">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看node版本列表</p><pre class="line-numbers language-none"><code class="language-none">nvm list-remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装指令</p><pre class="line-numbers language-none"><code class="language-none">nvm install v6.9.5nvm install v10.16.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看已安装node版本</p><pre class="line-numbers language-none"><code class="language-none">nvm ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="centos环境搭建/image-20210828235938048.png" alt="image-20210828235938048" style="zoom:67%;"> </li><li><p>切换版本</p><pre class="line-numbers language-none"><code class="language-none">nvm use v6.9.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="centos环境搭建/image-20210829000014670.png" alt="image-20210829000014670" style="zoom: 67%;"> </li></ol></li><li><p>开一个node服务试一下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> hostname <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server running at http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>公网ip:7500就可以看到Hello World</p></li></ol><h4 id="二，安装和使用nginx"><a href="#二，安装和使用nginx" class="headerlink" title="二，安装和使用nginx"></a>二，安装和使用nginx</h4><ol><li><p>安装gcc</p><pre class="line-numbers language-none"><code class="language-none">gcc -vyum -y install gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Pcre,pcre-devel安装</p><p>pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式</p><pre class="line-numbers language-none"><code class="language-none">yum install -y pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>zlib安装</p><p>提供很多种压缩和解压方式，使用zlib对http包内容进行gzip</p><pre class="line-numbers language-none"><code class="language-none">yum install -y zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>openssl安装</p><p>openssl是web安全通信的基石，没有openssl，可以说我们的信息都是在裸奔。。。。。。</p><pre class="line-numbers language-none"><code class="language-none">yum install -y openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下载/解压nginx安装包</p><pre class="line-numbers language-none"><code class="language-none">wget http://nginx.org/download/nginx-1.9.9.tar.gz  tar -zxvf  nginx-1.9.9.tar.gz                       #/usr/local下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>进入/nginx-1.9.9/下面</p><pre class="line-numbers language-none"><code class="language-none">./configure make make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置nginx.conf文件</p><pre class="line-numbers language-none"><code class="language-none">/usr/local/nginx/confvi nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动nginx</p><pre class="line-numbers language-none"><code class="language-none">/usr/local/nginx/sbin./nginxps -ef | grep nginx     #查看nginx是否启动成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>进程占用端口，杀死进程</li></ul><pre class="line-numbers language-none"><code class="language-none">lsof -i:80kill -9 PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ul><li>附带常用代理配置</li></ul><pre class="line-numbers language-none"><code class="language-none">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server {        listen       8080;        server_name  localhost;        location / {            root   /Users/minyue/Desktop/minyue/reactBlog/build/;            index  index.html index.htm;            try_files $uri $uri/ /index.html;        }                error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }    # HTTPS server    #    #server {    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    include servers/*;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三，mysql安装"><a href="#三，mysql安装" class="headerlink" title="三，mysql安装"></a>三，mysql安装</h4><ol><li><p>下载rpm源</p><pre class="line-numbers language-none"><code class="language-none">wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装</p><pre class="line-numbers language-none"><code class="language-none">yum localinstall mysql80-community-release-el7-1.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">yum repolist enabled | grep "mysql.*-community.*"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="centos%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210829010730437.png" alt="image-20210829010730437" style="zoom:50%;"> </li><li><p>安装mysql</p><pre class="line-numbers language-none"><code class="language-none">yum install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过程中很曲折，辛酸泪</p><ul><li>报错Error: Unable to find a match: mysql-community-server</li></ul><img data-src="centos环境搭建/image-20210829010841960.png" alt="image-20210829010841960" style="zoom:50%;"> <pre class="line-numbers language-none"><code class="language-none">解决办法先执行 yum module disable mysql，然后再执行yum -y install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img data-src="centos环境搭建/image-20210829011451868.png" alt="image-20210829011451868" style="zoom:50%;"> </li><li><p>启动mysql服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld或者service mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看mysql状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld或者service mysqld status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="centos环境搭建/image-20210829011625767.png" alt="image-20210829011625767" style="zoom:50%;"> </li><li><p>设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqldsystemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改登录密码</p><pre class="line-numbers language-none"><code class="language-none">//mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：grep 'temporary password' /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ALTER USER 'root'@'localhost' IDENTIFIED BY 'Minyue@666';//默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加远程登录用户</p><p>默认只允许root账户在本地登录，如果要在管理服务器上的mysql，修改root的远程访问权限</p><pre class="line-numbers language-none"><code class="language-none">use mysql;select host, user from user;  #可以看到root默认权限是localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img data-src="centos环境搭建/image-20210829142220138.png" alt="image-20210829142220138" style="zoom:50%;"> <pre class="line-numbers language-none"><code class="language-none">#授权 root 用户的所有权限并设置远程访问GRANT ALL ON *.* TO 'root'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我是遇到了报错，ERROR 1410 (42000): You are not allowed to create a user with GRANT</p><pre class="line-numbers language-none"><code class="language-none">update user set host='%' where user ='root';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#生效修改flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>连接mysql</p><pre class="line-numbers language-none"><code class="language-none">mysql -u [username] -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql -h [host] -u [username] -p [password]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果要使用sqlyog链接</p></li></ul><pre class="line-numbers language-none"><code class="language-none">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编码方式</p><p>mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改</p><pre class="line-numbers language-none"><code class="language-none">#查看编码方式SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般修改可以直接找到对应 etc/mysql/my.cnf位置</p><pre class="line-numbers language-none"><code class="language-none">[client]default-character-set = utf8mb4[mysql]default-character-set = utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect='SET NAMES utf8mb4'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">character_set_client  (客户端来源数据使用的字符集)character_set_connection     (连接层字符集)character_set_database   (当前选中数据库的默认字符集)character_set_results (查询结果字符集)character_set_server (默认的内部操作字符集)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意要在安全组中添加3306</p></li><li><p>卸载mysql</p><pre class="line-numbers language-none"><code class="language-none">yum remove mysql-community-serverrpm -qa|grep mysqlyum remove 名称rpm -qa | grep -i mysqlrpm -e 名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mysql导入导出sql文件</p><pre class="line-numbers language-none"><code class="language-none">1.导出整个数据库mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名mysqldump -u root -p test &gt; ~/blog.sql输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：一定要先touch blog.sql</p><p><strong>注意：</strong>mysqldump指令可以临时</p><pre class="line-numbers language-none"><code class="language-none">alias mysqldump=/usr/local/mysql/bin/mysqldump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">2.导入数据库常用source 命令进入mysql数据库控制台，如mysql -u root -pmysql&gt;use 数据库然后使用source命令，后面参数为脚本文件(如这里用到的.sql)mysql&gt;source ~/blog.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="2021/05/28/websocket/"/>
      <url>2021/05/28/websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>没错就是计网实验，不想看c的socket编程，摸鱼到HTML5的websoket，一探究竟</p><p>通信协议已经有了HTTP协议，为什么还要有websocket新协议？</p><p>HTTP痛点：通信只能客户端发起！！</p><p>基于单点请求的特点：注定了如果服务器有连续的状态变化，客户端想获知很麻烦！</p><p>—-人们想到<code>轮询</code></p><p>但是，轮询效率很低，浪费资源（HTTP连接keep-alive）</p><p>于是引入今天的主角：websocket</p><a id="more"></a><h2 id="websocket简介"><a href="#websocket简介" class="headerlink" title="websocket简介"></a>websocket简介</h2><p>最大的特点就是：</p><p>服务端可以主动向客户端推送消息，客户端也可以主动向服务器发送消息</p><p>真正的双向平等对话（属于<a href="https://cloud.tencent.com/developer/article/1407649">服务器推送技术</a>的一种）</p><img data-src="/2021/05/28/websocket/bg2017051502.png" class="" title="img"><p><strong>特点</strong></p><ol><li><p>建立在tcp协议上，服务端实现比较容易</p></li><li><p>和HTTP有很好的兼容性，默认端口80和443，握手采用HTTP协议，可以通过各种HTTP代理服务器</p></li><li><p>数据格式轻量，性能开销小，通信高效</p></li><li><p>可发送文本，二进制数据</p></li><li><p>没有同源限制，客户端可以和任意服务器通信</p></li><li><p>协议标识符 <code>ws</code> (加密<code>wss</code>)</p><p>服务器网址示例<code>ws://example.com:80/path</code></p></li></ol><img data-src="/2021/05/28/websocket/bg2017051503.jpg" class="" title="img"> <h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://jsbin.com/muqamiqimu/edit?js,console">这里</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"wss://echo.websocket.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection open ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello WebSockets!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Received Message: "</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="1-websocket构造函数"><a href="#1-websocket构造函数" class="headerlink" title="1.websocket构造函数"></a>1.websocket构造函数</h4><p>新建<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">websocket实例</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端就会和参数网址的服务器进行连接</p><h4 id="2-webSocket-readyState"><a href="#2-webSocket-readyState" class="headerlink" title="2.webSocket.readyState"></a>2.webSocket.readyState</h4><p><code>readyState</code> 属性返回实例对象的<strong>当前状态</strong></p><ul><li>CONNECTION：值为0，表示正在连接</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>ws<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CONNECTING</span><span class="token operator">:</span>    <span class="token comment">// do something</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token operator">:</span>    <span class="token comment">// do something</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token operator">:</span>    <span class="token comment">// do something</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token operator">:</span>    <span class="token comment">// do something</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token comment">// this never happens</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-webSocket-onopen"><a href="#3-webSocket-onopen" class="headerlink" title="3.webSocket.onopen"></a>3.webSocket.onopen</h4><p><code>onopen</code> 属性，用于指定<strong>连接成功后</strong>的回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多个回调函数：采用事件监听语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-webSocket-onclose"><a href="#4-webSocket-onclose" class="headerlink" title="4.webSocket.onclose"></a>4.webSocket.onclose</h4><p><code>onclose</code>属性，用于指定<strong>连接关闭后</strong>的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> code <span class="token operator">=</span> event<span class="token punctuation">.</span>code<span class="token punctuation">;</span>  <span class="token keyword">var</span> reason <span class="token operator">=</span> event<span class="token punctuation">.</span>reason<span class="token punctuation">;</span>  <span class="token keyword">var</span> wasClean <span class="token operator">=</span> event<span class="token punctuation">.</span>wasClean<span class="token punctuation">;</span>  <span class="token comment">// handle close event</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多回调同理</p><h4 id="5-webSocket-onmessage"><a href="#5-webSocket-onmessage" class="headerlink" title="5.webSocket.onmessage"></a>5.webSocket.onmessage</h4><p><code>onmessage</code>属性，用于指定<strong>收到服务器数据后</strong>的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 处理数据</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>服务器数据可能是文本，也可能二进制（blob对象或Arraybuffer对象）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received data string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> buffer <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received arraybuffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 收到的是 blob 数据</span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">"blob"</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 收到的是 ArrayBuffer 数据</span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">"arraybuffer"</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-webSocket-send"><a href="#6-webSocket-send" class="headerlink" title="6.webSocket.send()"></a>6.webSocket.send()</h4><p><code>send()</code>方法用于向服务器发送数据。</p><p>发送文本的例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'your message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送 Blob 对象的例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> file <span class="token operator">=</span> document  <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发送 ArrayBuffer 对象的例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Sending canvas ImageData as ArrayBuffer</span><span class="token keyword">var</span> img <span class="token operator">=</span> canvas_context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>binary<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-webSocket-bufferedAmount"><a href="#7-webSocket-bufferedAmount" class="headerlink" title="7.webSocket.bufferedAmount"></a>7.webSocket.bufferedAmount</h4><p><code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 发送完毕</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 发送还没结束</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-webSocket-onerror"><a href="#8-webSocket-onerror" class="headerlink" title="8.webSocket.onerror"></a>8.webSocket.onerror</h4><p><code>onerror</code>属性，用于指定报错时的回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">socket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// handle error event</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="服务端示例"><a href="#服务端示例" class="headerlink" title="服务端示例"></a>服务端示例</h2><p>node实现</p><ul><li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a></li><li><a href="https://github.com/uWebSockets/uWebSockets">µWebSockets</a></li></ul><h2 id="WebSocketd"><a href="#WebSocketd" class="headerlink" title="WebSocketd"></a>WebSocketd</h2><p>推荐WebSocket服务器</p><p><a href="http://websocketd.com/">Websocketd</a></p><p><strong>特点：</strong>不限语言标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出</p><p><strong>参考链接</strong></p><p><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack-vue</title>
      <link href="2021/05/26/webpack-vue/"/>
      <url>2021/05/26/webpack-vue/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端工程化离不开打包构建工具，vue项目开发，有官方的脚手架工具VueCLI帮助我们集成了webpack相关模块，十分方便</p><p>但是，学习vue-ssr时，我们不得不动手自己配置打包构建程序。</p><p>下面是我的踩坑日志！</p><a id="more"></a><p><strong>版本声明</strong></p><p>除了vue，vue-server-render是2.x版本其他都是最新！</p><p>抱歉的是：<code>-D</code> <code>--save</code>用的乱了点，不想改了</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"@babel/polyfill"</span><span class="token operator">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>  <span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.13.0"</span><span class="token punctuation">,</span>  <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.1"</span><span class="token punctuation">,</span>  <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span>  <span class="token property">"vue-server-renderer"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"@babel/cli"</span><span class="token operator">:</span> <span class="token string">"^7.14.3"</span><span class="token punctuation">,</span>  <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.14.3"</span><span class="token punctuation">,</span>  <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.14.2"</span><span class="token punctuation">,</span>  <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.2.2"</span><span class="token punctuation">,</span>  <span class="token property">"clean-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.0.0-alpha.0"</span><span class="token punctuation">,</span>  <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.2.6"</span><span class="token punctuation">,</span>  <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.3.1"</span><span class="token punctuation">,</span>  <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^15.9.7"</span><span class="token punctuation">,</span>  <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>  <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span>  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.37.1"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.7.0"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.2"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端渲染示例"><a href="#客户端渲染示例" class="headerlink" title="客户端渲染示例"></a>客户端渲染示例</h3><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a><strong>app.js</strong></h4><p>生成Vue根实例，并挂载到DOM上</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./src/App.vue'</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a><strong>Vue组件</strong></h4><h5 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h5><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;App.vue&lt;/h1&gt;    &lt;p&gt;minyue&lt;/p&gt;    &lt;hr /&gt;    &lt;Foo&gt;&lt;/Foo&gt;    &lt;Bar&gt;&lt;/Bar&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Foo from "./components/Foo.vue";import Bar from "./components/Bar.vue";export default {  components: {    Foo,    Bar,  },};&lt;/script&gt;&lt;style&gt;h1 {  color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子组件Bar-vue"><a href="#子组件Bar-vue" class="headerlink" title="子组件Bar.vue"></a>子组件Bar.vue</h5><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="bar"&gt;    &lt;h1&gt;Barbar&lt;/h1&gt;    &lt;p&gt;Component&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style&gt;.bar {  background: blue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子组件Foo-vue"><a href="#子组件Foo-vue" class="headerlink" title="子组件Foo.vue"></a>子组件Foo.vue</h5><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="foo"&gt;    &lt;h1&gt;Foo&lt;/h1&gt;    &lt;p&gt;Component&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style&gt;.foo {  background: yellow;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="webpack编译模板"><a href="#webpack编译模板" class="headerlink" title="webpack编译模板"></a>webpack编译模板</h4><p><strong>index.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vue SSR with webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装相关库和插件"><a href="#安装相关库和插件" class="headerlink" title="安装相关库和插件"></a>安装相关库和插件</h4><ul><li>webpack <code>npm install -D webpack webpack-cli</code></li><li>webpack 本地服务器插件 <code>npm install -D webpack-dev-server</code></li><li>html 生成插件，它会将生成的 js 和 css 文件插入到 html 中 <code>npm install -D html-webpack-plugin</code></li><li>vue 插件 <code>npm install -D vue-loader vue-template-compiler</code></li></ul><p><strong>注意：</strong>一起安装注意版本</p><ul><li>css 插件 <code>npm install -D css-loader style-loader vue-style-loader</code></li><li>图片插件 <code>npm install -D file-loader url-loader</code></li><li>babel 插件 <code>npm install -D @babel/core @babel/cli @babel/preset-env babel-loader</code>, <code>npm install @babel/polyfill</code></li></ul><p><strong>注意：</strong>会有警告</p><p>需要确定core-js版本，在<code>.babelrc</code>文件中完成babel配置</p><pre class="line-numbers language-.babelrc" data-language=".babelrc"><code class="language-.babelrc">{    "presets": [      [        "@babel/preset-env",        {          "useBuiltIns": "usage",          "corejs": 3        }      ]    ]  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.babeljs.cn/docs/babel-preset-env">官网说明很详细</a></p><h4 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  CleanWebpackPlugin<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin/dist/clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  devtool<span class="token operator">:</span> <span class="token string">'eval-cheap-module-source-map'</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span> <span class="token punctuation">{</span>    main<span class="token operator">:</span> <span class="token string">'./app.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'[name]_[hash:6].js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment">// `*.vue` 文件中的 `&lt;style&gt;` 块以及普通的`*.css`</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 不编译node_modules下的文件</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>    contentBase<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span> <span class="token comment">// html所在路径</span>    <span class="token comment">// compress: true, // 是否压缩</span>    <span class="token comment">// port: 3000, // 端口</span>    hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 热部署</span>    open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 打包完成后自动打开网页</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//webpack5 Dev-server有点问题，需要加对象web</span>  target<span class="token operator">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span> <span class="token comment">// 模板html</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// new webpack.NamedModulesPlugin(),</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//解析路径</span>  <span class="token comment">//   resolve: {</span>  <span class="token comment">//     alias: {</span>  <span class="token comment">//       vue: 'vue/dist/vue.js',</span>  <span class="token comment">//     },</span>  <span class="token comment">//   },</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p><strong>1.hotmodule模块：</strong></p><p>webpack5变更</p><ol><li><p>可以直接使用指令<code>npx webpack serve</code></p></li><li><p>添加对应插件，配置指令<code>"serve": "webpack server",</code></p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span> <span class="token punctuation">{</span>  contentBase<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span> <span class="token comment">// html所在路径</span>  <span class="token comment">// compress: true, // 是否压缩</span>  <span class="token comment">// port: 3000, // 端口</span>  hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 热部署</span>  open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 打包完成后自动打开网页</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//webpack5 Dev-server有点问题，需要加对象web</span>target<span class="token operator">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 别忘了引入webpack</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2.vue-loader</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 注意引入路径</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment">// `*.vue` 文件中的 `&lt;style&gt;` 块以及普通的`*.css`</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 不编译node_modules下的文件</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.clean-webpack-plugin</strong></p><p>一个非官方插件，很实用，注意参数是对象，引入路径</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>  CleanWebpackPlugin<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin/dist/clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="青春版-服务端渲染示例"><a href="#青春版-服务端渲染示例" class="headerlink" title="青春版-服务端渲染示例"></a>青春版-服务端渲染示例</h3><h4 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h4><p>作为一个工厂函数：返回一个Vue实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="entry-client-js"><a href="#entry-client-js" class="headerlink" title="entry-client.js"></a>entry-client.js</h4><p>作为客户端渲染的入口文件，实现Vue实例的DOM挂载</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="entry-server-js"><a href="#entry-server-js" class="headerlink" title="entry-server.js"></a>entry-server.js</h4><p>服务端渲染的入口文件，导出一个可接受参数的函数返回一个Vue实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> app<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="index-ssr-html"><a href="#index-ssr-html" class="headerlink" title="index.ssr.html"></a>index.ssr.html</h4><p>服务端渲染模板</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>服务端渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--vue-ssr-outlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h4><p>这里功能抽离，分为base，client和server</p><h5 id="webpack-base-config-js"><a href="#webpack-base-config-js" class="headerlink" title="webpack.base.config.js"></a>webpack.base.config.js</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment">// 模块解析说明 不用写后缀 .js  .vue</span>  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 统一输出文件名合并打包文件</span>    filename<span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment">// `*.vue` 文件中的 `&lt;style&gt;` 块以及普通的`*.css`</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 不编译node_modules下的文件</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="webpack-client-config-js"><a href="#webpack-client-config-js" class="headerlink" title="webpack.client.config.js"></a>webpack.client.config.js</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">const HtmlWebpackPlugin = require('html-webpack-plugin');const { merge } = require('webpack-merge');const base = require('./webpack.base.config');const path = require('path');module.exports = merge(base, {  //路径都是项目根路径为基准  只有output是当前配置文件的相对位置  entry: {    client: './src/entry-client',  },  plugins: [    new HtmlWebpackPlugin({      template: './src/index.html', // 模板html    }),  ],});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="webpack-server-config-js"><a href="#webpack-server-config-js" class="headerlink" title="webpack.server.config.js"></a>webpack.server.config.js</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.base.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> VueSSRServerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer/server-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 这允许 webpack 以 Node 适用方式(Node-appropriate fashion)处理动态导入(dynamic import)，</span>  <span class="token comment">// 并且还会在编译 Vue 组件时，</span>  <span class="token comment">// 告知 `vue-loader` 输送面向服务器代码(server-oriented code)。</span>  target<span class="token operator">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>  <span class="token comment">//路径都是项目根路径为基准  只有output是当前配置文件的相对位置</span>  entry<span class="token operator">:</span> <span class="token punctuation">{</span>    server<span class="token operator">:</span> <span class="token string">'./src/entry-server'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 此处告知 server bundle 使用 Node 风格导出模块(Node-style exports)</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    libraryTarget<span class="token operator">:</span> <span class="token string">'commonjs2'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 插件官网说明https://github.com/jantimon/html-webpack-plugin#configuration</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueSSRServerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里参考<a href="https://ssr.vuejs.org/zh/guide/build-config.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE-server-config">官网配置</a></p><p><strong>注意：</strong></p><ol><li><p>对于<code>VueSSRServerPlugin</code>对webpack5有一些兼容问题</p><blockquote><img data-src="/2021/05/26/webpack-vue/image-20210527175117380.png" class="" title="image-20210527175117380"><p>找到 /node_modules/vue-server-renderer/server-plugin.js</p><ul><li>问题1： [vue-server-renderer-webpack-plugin] webpack config <code>output.libraryTarget</code> should be “commonjs2”</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&gt;</span><span class="token operator">-</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output <span class="token operator">&amp;&amp;</span> compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>libraryTarget <span class="token operator">!==</span> <span class="token string">'commonjs2'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token operator">+</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output <span class="token operator">&amp;&amp;</span> compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>library<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">'commonjs2'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>问题2：Error: Entry “server” not found. Did you specify the correct entry option?</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&gt;</span><span class="token operator">-</span> <span class="token keyword">var</span> entryAssets <span class="token operator">=</span> entryInfo<span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isJS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&gt;</span><span class="token operator">+</span> <span class="token keyword">var</span> entryAssets <span class="token operator">=</span> entryInfo<span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token function">isJS</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&gt;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>entryAssets<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>  <span class="token string">"Server-side bundle should have one single entry file. "</span> <span class="token operator">+</span>  <span class="token string">"Avoid using CommonsChunkPlugin in the server config."</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token keyword">var</span> entry <span class="token operator">=</span> entryAssets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&gt;</span><span class="token operator">-</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry <span class="token operator">||</span> <span class="token keyword">typeof</span> entry <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&gt;</span><span class="token operator">+</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry <span class="token operator">||</span> <span class="token keyword">typeof</span> entry<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token string">"Entry \""</span> <span class="token operator">+</span> entryName <span class="token operator">+</span> <span class="token string">"\" not found. Did you specify the correct entry option?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token keyword">var</span> bundle <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">&gt;</span><span class="token operator">+</span> entry<span class="token operator">:</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">,</span>files<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>maps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h4 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h4><p>客户端：使用express提供的静态资源加载中间件</p><p>服务端：使用<code>vue-server-renderer</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// client端;</span><span class="token keyword">const</span> clientApp <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clientApp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clientApp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器端渲染地址： http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// server端</span><span class="token keyword">const</span> serverApp <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./src/index.ssr.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dist/vue-ssr-server-bundle.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createBundleRenderer</span><span class="token punctuation">(</span>bundle<span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>serverApp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Internal Server Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverApp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务端端渲染地址： http://localhost:3001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p><a href="https://ssr.vuejs.org/zh/api/#createbundlerenderer">createBundleRenderer的使用</a></p><ul><li>第一个参数<code>bundle</code><ul><li>绝对路径，指向一个已经构建好的 bundle 文件（<code>.js</code> 或 <code>.json</code>）。必须以 <code>/</code> 开头才会被识别为文件路径。</li><li>用require模块化引入的bundle 对象。</li></ul></li><li>第二个参数：相关选项</li></ul><p><a href="https://www.expressjs.com.cn/starter/static-files.html">express.static(root, [options])</a></p><ul><li>第一个参数：”虚假路径”</li><li>第二个参数设定对应的静态文件路径，以启动节点进程目录为基准</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.x </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue SSR</title>
      <link href="2021/05/24/vue-ssr/"/>
      <url>2021/05/24/vue-ssr/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么要使用服务端渲染呢？传统的客户端<br>（SPA单页应用程序）有什么不足？</p><ul><li><p>更好的SEO：</p><p>服务端渲染是，首屏的html由服务端生成直接发送给浏览器，浏览器直接对“有内容的html”进行解析，而不是含有各种引用的html。google和并对同步js有很好的索引能力</p></li><li><p>更快的内容到达时间：同构的思想，使得无需等待所有的js都完成下载才显示页面；拿到服务端的html直接显示，浏览器端同构加载其他的异步代码作为完善。</p></li></ul><p>这篇博文也是学习官方指南做的相应笔记，，，</p><p>开始吧！</p><a id="more"></a><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>使用 <code>vue-server-renderer</code> 这个库</p><pre class="line-numbers language-none"><code class="language-none">npm install vue vue-server-renderer --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="渲染一个Vue实例"><a href="#渲染一个Vue实例" class="headerlink" title="渲染一个Vue实例"></a>渲染一个Vue实例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. make an instance</span><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;hello {{name}}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'minyue'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. make a renderer</span><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. render the Vue instance as HTML</span>renderer  <span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//   &lt;div data-server-rendered="true"&gt;hello minyue&lt;/div&gt;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/24/vue-ssr/image-20210524155859890.png" class="" title="image-20210524155859890"><h3 id="集成服务器"><a href="#集成服务器" class="headerlink" title="集成服务器"></a>集成服务器</h3><p>使用express框架</p><pre class="line-numbers language-none"><code class="language-none">npm install express --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      url<span class="token operator">:</span> req<span class="token punctuation">.</span>url    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;访问的 URL 是： {{ url }}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Internal Server Error'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;!DOCTYPE html&gt;      &lt;html lang="en"&gt;        &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;        &lt;body&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/body&gt;      &lt;/html&gt;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/24/vue-ssr/image-20210524160059031.png" class="" title="image-20210524160059031"><h3 id="使用页面模板"><a href="#使用页面模板" class="headerlink" title="使用页面模板"></a>使用页面模板</h3><p>简化上面的页面模板，可以直接在创建renderer 时提供一个模板</p><p>例如<code>index.template.html</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--vue-ssr-outlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中body标签内部就是vue模板渲染的地方</p><h4 id="文件读取模块"><a href="#文件读取模块" class="headerlink" title="文件读取模块"></a>文件读取模块</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.template.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment">// html 将是注入应用程序内容的完整页面</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板插值"><a href="#模板插值" class="headerlink" title="模板插值"></a>模板插值</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span>    {{{ meta }}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--vue-ssr-outlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过传入一个”渲染上下文对象”，作为 <code>renderToString</code> 函数的第二个参数，来提供插值数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>  meta<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;meta ...&gt;    &lt;meta ...&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 页面 title 将会是 "Hello"</span>  <span class="token comment">// meta 标签也会注入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.template.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token operator">:</span> <span class="token string">'vue ssr'</span><span class="token punctuation">,</span>  metas<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;meta name="keyword" content="vue ssr"&gt;        &lt;meta name="description" content="vue ssr demo"&gt;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      url<span class="token operator">:</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;the url to visited is {{url}}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Internal Server Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/24/vue-ssr/image-20210524160713956.png" class="" title="image-20210524160713956"> <h2 id="编写通用代码"><a href="#编写通用代码" class="headerlink" title="编写通用代码"></a>编写通用代码</h2><p>下面是进入服务端渲染前，需要注意的点</p><h3 id="服务器上的数据响应"><a href="#服务器上的数据响应" class="headerlink" title="服务器上的数据响应"></a>服务器上的数据响应</h3><p>注意在应用程序数据上，我们希望每一个请求应该都是全新的，独立的实例，不会有<strong>交叉请求造成的状态污染</strong></p><p>所以实例渲染过程需要数据的确定性，也将在服务器“预取”数据，意味着，开始渲染时，我们的应用程序已经解析其状态。数据进行响应式的过程在服务端是多余的，默认情况下禁用。</p><h3 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h3><p>学习vue生命周期时就发现，服务端渲染只有两个生命周期函数会被调用 <code>beforeCreate</code> 和 <code>created</code> </p><p>其他只在客户端执行</p><p>所以，应该避免在 <code>beforeCreate</code> 和 <code>created</code> 中产生全局副作用的代码。例如，设置定时器timer，纯客户端里面，组件在 <code>beforeDestroy</code> 或 <code>destroyed</code> 生命周期时将其销毁。但是SSR期间并不会</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>服务端api和客户端不尽相同</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><strong>不是很明白</strong></p><p>大多数自定义指令直接操作 DOM，因此会在服务器端渲染 (SSR) 过程中导致错误。有两种方法可以解决这个问题：</p><ol><li>推荐使用组件作为抽象机制，并运行在「虚拟 DOM 层级(Virtual-DOM level)」（例如，使用渲染函数(render function)）。</li><li>如果你有一个自定义指令，但是不是很容易替换为组件，则可以在创建服务器 renderer 时，使用 <a href="https://ssr.vuejs.org/zh/api/#directives"><code>directives</code></a> 选项所提供”服务器端版本(server-side version)”。</li></ol><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><h3 id="避免状态单例"><a href="#避免状态单例" class="headerlink" title="避免状态单例"></a>避免状态单例</h3><p>在纯客户端代码中，每次都是在新的上下文对代码取值，但是，Node.js是一个长期运作的进程，如果创建一个单例对象，它会在每个传入的请求间共享。</p><p>容易导致交叉请求污染</p><p>所以，我们不应该直接创建应用程序实例，应该暴露一个工厂函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">createApp</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      url<span class="token operator">:</span> context<span class="token punctuation">.</span>url    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;访问的 URL 是： {{ url }}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// server.js</span><span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./app'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token operator">:</span> req<span class="token punctuation">.</span>url <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理错误……</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的规则也在router，store等</p><h3 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h3><p>对于客户端应用程序和服务器应用程序，我们都要使用 webpack 打包 - 服务器需要「服务器 bundle」然后用于服务器端渲染(SSR)，而「客户端 bundle」会发送给浏览器，用于混合静态标记。</p><img data-src="/2021/05/24/vue-ssr/786a415a-5fee-11e6-9c11-45a2cfdf085c.png" class="" title="架构"><blockquote><p><strong>app.js</strong>：是应用程序的通用入口。</p><ul><li>在纯客户端中，我们将在这个文件中创建Vue根实例，并挂载到DOM上</li><li>在服务端渲染，责任转移到纯客户端entry文件中。app.js简单的export一个<code>createApp</code>函数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token comment">// 导出一个工厂函数，用于创建新的</span><span class="token comment">// 应用程序、router 和 store 实例</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 根实例简单的渲染应用程序组件。</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>entry-client.js</strong></p><p>客户端entry需要创建应用程序，并挂载到DOM中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app'</span><span class="token comment">// 客户端特定引导逻辑……</span><span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 这里假定 App.vue 模板中根元素具有 `id="app"`</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>entry-server.js</strong></p><p>创建和返回应用程序实例，每次渲染都会重复执行</p><p>承载服务端路由，数据预取逻辑的编写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> app<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="路由和代码分割"><a href="#路由和代码分割" class="headerlink" title="路由和代码分割"></a>路由和代码分割</h2><h3 id="使用vue-router的路由"><a href="#使用vue-router的路由" class="headerlink" title="使用vue-router的路由"></a>使用vue-router的路由</h3><p>需要给每一个请求新的router实例，</p><p><strong>router.js</strong></p><p>导出一个工厂函数<code>createRouter</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// router.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>    routes<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// ...</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>app.js</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 创建 router 实例</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 注入 router 到根 Vue 实例</span>    router<span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 返回 app 和 router</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>entry-server.js</strong></p><p>实现服务器端路由逻辑</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// entry-server.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span>    <span class="token comment">// 以便服务器能够等待所有的内容在渲染前，</span>    <span class="token comment">// 就已经准备就绪。</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 设置服务器端 router 的位置</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token comment">// 等到 router 将可能的异步组件和钩子函数解析完</span>    router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> matchedComponents <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getMatchedComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedComponents<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token number">404</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>server.js</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// server端</span><span class="token keyword">const</span> serverApp <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./src/index.ssr.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dist/vue-ssr-server-bundle.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createBundleRenderer</span><span class="token punctuation">(</span>bundle<span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverApp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token operator">:</span> req<span class="token punctuation">.</span>url <span class="token punctuation">}</span><span class="token punctuation">;</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Page not found'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Internal Server Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官网上服务端用法写的是引入打包后的<code>entry-server.js</code>的函数用promise的链式调用异步返回app实例，作为renderer的参数</p><p>这里，webpack打包使用的<code>VueSSRServerPlugin</code> 这个官方提供的插件，将整个<code>server.bundle.js</code> 包装在一个<code>json</code> 文件中</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"entry"</span><span class="token operator">:</span> <span class="token string">"server.bundle.js"</span><span class="token punctuation">,</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"maps"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注释：</strong></p><blockquote><p>files中字符串的形式打包了项目运行的所有依赖模块代码，其中entr指向的文件代码段为项目的执行入口脚本</p></blockquote><h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><p>应用程序代码分割，懒加载，有助于减少浏览器初始渲染下载的bundle资源体积，优化TTI</p><p>适当使用异步组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这里进行修改……</span><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">'./Foo.vue'</span><span class="token comment">// 改为这样：</span><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Foo.vue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就需要对客户端增加<code>router.onReady</code> ,因为路由器必须提前解析路由配置中的异步组件，才能正确调用组件中可能存在的路由钩子函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// entry-client.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预取和状态"><a href="#数据预取和状态" class="headerlink" title="数据预取和状态"></a>数据预取和状态</h2><p>ssr期间， 我们本质上是渲染我们应用程序”快照”，所有，如果应用程序依赖于一些异步数据，<strong>在渲染过程前，需要先预取和解析好这些数据</strong></p><p>另一个问题在客户端：mount到客户端前，需要获取与服务端应用程序完全相同的数据，否则，<strong>客户端与服务端状态不同，混合失败</strong>！</p><h3 id="数据预取存储容器"><a href="#数据预取存储容器" class="headerlink" title="数据预取存储容器"></a>数据预取存储容器</h3><p>为解决上面的问题获取的数据需要在视图组件外，即专门的状态容器。</p><ol><li>首先，服务端可以在渲染前预取数据，并填充到store中。</li><li>在快照HTML中序列化和内联预置状态，这样可以在mount到客户端前，直接从store获取到内联预置状态</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.x </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实战-reader</title>
      <link href="2021/05/20/vue-shi-zhan-reader/"/>
      <url>2021/05/20/vue-shi-zhan-reader/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于学完Vue2.x的基本语法知识，下面开启实战项目的学习</p><p>管理大型Vue项目，不能像之前写demo一样在html文件中</p><ul><li>现在开始使用Vue-CLI官当脚手架工具（横向对比create-react-app）</li><li>使用Vuex来全局管理数据（横向对比redux）</li><li>使用Vue-router对前端路由进行管理（横向对比react-router）</li></ul><p>下面开始吧！</p><a id="more"></a><h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue-CLI"></a>Vue-CLI</h2><p><a href="https://cli.vuejs.org/zh/guide/">官网地址</a></p><p>首先<strong>全局</strong>安装vue/cli，是的我们可以全局使用<code>vue</code> 命令</p><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue/cli# ORyarn global add @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>承接后面对Element UI的学习，这里搭建一个test项目</p><pre class="line-numbers language-none"><code class="language-none">vue create element-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>default vue2.x</code>配置项</p><img data-src="/2021/05/20/vue-shi-zhan-reader/image-20210520192846670.png" class="" title="image-20210520192846670"><p>进入项目，编译构建，开启本地服务器</p><pre class="line-numbers language-none"><code class="language-none">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="/2021/05/20/vue-shi-zhan-reader/image-20210520193507074.png" class="" title="image-20210520193507074"><blockquote><p>这里删除了项目中多余的元素和样式</p></blockquote><blockquote><p>default配置的Vue项目很简单，只有一些babel和Vue2.x对应的依赖</p></blockquote><p><img data-src="Vue实战-reader/image-20210520193756782.png" alt="image-20210520193756782" style="zoom:80%;"> <img data-src="Vue实战-reader/image-20210520194129958.png" alt="image-20210520194129958" style="zoom:80%;"> </p><h2 id="Element-UI入门"><a href="#Element-UI入门" class="headerlink" title="Element-UI入门"></a>Element-UI入门</h2><h3 id="项目引入"><a href="#项目引入" class="headerlink" title="项目引入"></a>项目引入</h3><p>构建完，正式进入element ui学习前，先安装element-ui</p><h4 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h4><pre class="line-numbers language-none"><code class="language-none">npm i element-ui -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入element-ui</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>在main.js全局下引入</p></blockquote><p>在App.vue中引入node_modules中的文件</p><pre class="line-numbers language-none"><code class="language-none">import 'element-ui/lib/theme-chalk/index.css'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在就可以使用了</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;HelloWorld msg="Welcome to Your Vue.js App"/&gt;    &lt;el-button @click="show"&gt;click&lt;/el-button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from './components/HelloWorld.vue'import 'element-ui/lib/theme-chalk/index.css'export default {  name: 'App',  components: {    HelloWorld  },  methods: {    show: function() {      this.$message.success('toast from element-ui')    }  }}&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h5><p>对项目进行打包，会发现venders库多达784kb</p><img data-src="/2021/05/20/vue-shi-zhan-reader/image-20210520201743775.png" class="" title="image-20210520201743775"><p>如何按需加载呢？</p><p><strong>安装插件babel-plugin-component</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install babel-plugin-component -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改babel.config.js</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@vue/cli-plugin-babel/preset"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"component"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        libraryName<span class="token operator">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>        styleLibraryName<span class="token operator">:</span> <span class="token string">"theme-chalk"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在重新按需引入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> Message<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正常运行，打包编译结果</p><img data-src="/2021/05/20/vue-shi-zhan-reader/image-20210520202412017.png" class="" title="image-20210520202412017"><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>使用vue提供的</p><pre class="line-numbers language-none"><code class="language-none">vue add element<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>快速集成</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 实战 </tag>
            
            <tag> vue2.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.x进阶</title>
      <link href="2021/05/15/vue2-x-jin-jie/"/>
      <url>2021/05/15/vue2-x-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前面跟着官方文档学习了基础部分</p><p>下面深入学习Vue进阶内容</p></blockquote><a id="more"></a><h2 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h2><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><p>前面说到组件注册有两种：<strong>全局注册和局部注册</strong>，下面深入了解</p><h4 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h4><ol><li><strong>组件名大小写</strong></li></ol><ul><li>全部使用kebab-case</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用必须 <code>&lt;my-component-name&gt;</code></p><ul><li>使用pascalCase</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyComponentName'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引用时两种方式都可以 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code></p><p><strong>注意</strong>：DOM中（非模板）只有前者可以！！！</p><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>前面基础篇中提到，全局注册可以在后面的任何Vue根实例中使用，所有子组件，各自组件内部都可以使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-b'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-c'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token operator">:</span> <span class="token string">'#app'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-b</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-c</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-c</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><p>大家可以发现，不管你是否使用全局注册的组件，他都会在你写的组件作用域中，webpack打包时会增加无意义的内容</p><p>这个时候，<strong>局部组件</strong>，通过Vue的<code>components</code>property来声明根实例需要使用到的组件。</p><p>对应组件通过js对象的形式声明</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ComponentA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ComponentB <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ComponentC <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">'component-a'</span><span class="token operator">:</span> ComponentA<span class="token punctuation">,</span>    <span class="token string">'component-b'</span><span class="token operator">:</span> ComponentB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子组件间不能相互调用"><a href="#子组件间不能相互调用" class="headerlink" title="子组件间不能相互调用"></a>子组件间不能相互调用</h5><p>如果希望在ComponentA中使用ComponentB</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ComponentA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ComponentB <span class="token operator">=</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">'component-a'</span><span class="token operator">:</span> ComponentA  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者webpack文件管理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">'./ComponentA.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    ComponentA  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><h5 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h5><p>推荐创建一个component目录，将每个组件放置在各自的文件中。</p><p>使用时就ES model 的方式 import相应模块</p><p><strong>示例</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">'./ComponentA'</span><span class="token keyword">import</span> ComponentC <span class="token keyword">from</span> <span class="token string">'./ComponentC'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    ComponentA<span class="token punctuation">,</span>    ComponentC  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在 <code>ComponentA</code> 和 <code>ComponentC</code> 都可以在 <code>ComponentB</code> 的模板中使用了。</p><h5 id="基础组件的自动化全局部署"><a href="#基础组件的自动化全局部署" class="headerlink" title="基础组件的自动化全局部署"></a>基础组件的自动化全局部署</h5><p>对于一些相对通用的组件称为<strong>基础组件</strong>建议设置为<strong>全局组件</strong></p><p>使用webpack或（Vue CLI3+）可以直接使用<code>require.context</code> 注册非常常用的基础组件</p><p><strong>示例</strong>：应用在入口文件<code>src/main.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> upperFirst <span class="token keyword">from</span> <span class="token string">'lodash/upperFirst'</span><span class="token keyword">import</span> camelCase <span class="token keyword">from</span> <span class="token string">'lodash/camelCase'</span><span class="token keyword">const</span> requireComponent <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>  <span class="token comment">// 其组件目录的相对路径</span>  <span class="token string">'./components'</span><span class="token punctuation">,</span>  <span class="token comment">// 是否查询其子目录</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 匹配基础组件文件名的正则表达式</span>  <span class="token operator">/</span>Base<span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>\w<span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>vue<span class="token operator">|</span>js<span class="token punctuation">)</span>$<span class="token operator">/</span><span class="token punctuation">)</span>requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fileName</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 获取组件配置</span>  <span class="token keyword">const</span> componentConfig <span class="token operator">=</span> <span class="token function">requireComponent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>  <span class="token comment">// 获取组件的 PascalCase 命名</span>  <span class="token keyword">const</span> componentName <span class="token operator">=</span> <span class="token function">upperFirst</span><span class="token punctuation">(</span>    <span class="token function">camelCase</span><span class="token punctuation">(</span>      <span class="token comment">// 获取和目录深度无关的文件名</span>      fileName        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token comment">// 全局注册组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>    componentName<span class="token punctuation">,</span>    <span class="token comment">// 如果这个组件选项是通过 `export default` 导出的，</span>    <span class="token comment">// 那么就会优先使用 `.default`，</span>    <span class="token comment">// 否则回退到使用模块的根。</span>    componentConfig<span class="token punctuation">.</span>default <span class="token operator">||</span> componentConfig  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局注册的行为必须在根 Vue 实例 (通过 <code>new Vue</code>) 创建之前发生</strong></p><p><strong>解析</strong></p><blockquote><p>require.context(“相对路径”, boolean, /正则/)</p><ul><li>传入三个参数，返回一个函数</li></ul><p>返回的函数有三个属性</p><ul><li>resolve {function}-接受一个参数request,request为”相对路径“下面匹配文件的相对路径，返回这个匹配文件相对整个工程的相对路径</li><li>keys{function}–返回匹配成功模块的名字组成的数据</li><li>id{string}–执行环境的id</li></ul></blockquote><p><strong>示例</strong></p><img data-src="/2021/05/15/vue2-x-jin-jie/image-20210516133822936.png" class="" title="image-20210516133822936"> <img data-src="/2021/05/15/vue2-x-jin-jie/13835400-2dd8e5e9333b1054" class="" title="img"> <p>可以看出来</p><blockquote><ul><li><p>files(key) 自身作为函数，参数为匹配文件的相对路径，<strong>返回对应模块</strong></p></li><li><p>id：就是返回了<code>匹配的文件夹的相对于工程的相对路径</code>,<code>是否遍历子目录</code>,<code>匹配正则组成的字符串</code></p></li><li><p>keys()：返回匹配的文件名数组</p></li><li><p>resolve()：传参类似files，返回完整路径</p></li></ul></blockquote><h2 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h2><h3 id="prop大小写"><a href="#prop大小写" class="headerlink" title="prop大小写"></a>prop大小写</h3><p>HTML中<code>attribute</code> 是大小写不敏感的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 在 JavaScript 中是 camelCase 的</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'postTitle'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;h3&gt;{{ postTitle }}&lt;/h3&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>camelCase 的 prop 名需要使用其等价的 kebab-case 命名</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">post-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello!<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在字符串模板中没有限制</li></ul><h3 id="prop类型"><a href="#prop类型" class="headerlink" title="prop类型"></a>prop类型</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">{</span>  title<span class="token operator">:</span> String<span class="token punctuation">,</span>  likes<span class="token operator">:</span> Number<span class="token punctuation">,</span>  isPublished<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>  commentIds<span class="token operator">:</span> Array<span class="token punctuation">,</span>  author<span class="token operator">:</span> Object<span class="token punctuation">,</span>  callback<span class="token operator">:</span> Function<span class="token punctuation">,</span>  contactsPromise<span class="token operator">:</span> Promise <span class="token comment">// or any other constructor</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然验证信息也可以是需求的对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span>    propA<span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token comment">// 多个可能的类型</span>    propB<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 必填的字符串</span>    propC<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 带有默认值的数字</span>    propD<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 带有默认值的对象</span>    propE<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> Object<span class="token punctuation">,</span>      <span class="token comment">// 对象或数组默认值必须从一个工厂函数获取</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 自定义验证函数</span>    propF<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这个值必须匹配下列字符串中的一个</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><ul><li>默认值为对象需要从一个工厂函数返回</li><li>自定义验证函数，返回值boolean</li><li>注意那些 prop 会在一个组件实例创建<strong>之前</strong>进行验证，所以实例的 property (如 <code>data</code>、<code>computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的。</li></ul></blockquote><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p><code>type</code> 可以是下列原生构造函数中的一个：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>也可以是自定义构造函数，并且通过原型链<code>instanceof</code> 查找方式确认</p><p><strong>例如</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">}</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    author<span class="token operator">:</span> Person  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来验证<code>author </code> prop值是否通过<code>new Person</code>创建</p><h3 id="传递静态或动态prop"><a href="#传递静态或动态prop" class="headerlink" title="传递静态或动态prop"></a>传递静态或动态prop</h3><h4 id="传递字符串"><a href="#传递字符串" class="headerlink" title="传递字符串"></a>传递字符串</h4><ul><li>静态</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My journey with Vue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>动态</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.title + <span class="token punctuation">'</span> by <span class="token punctuation">'</span> + post.author.name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传递数字"><a href="#传递数字" class="headerlink" title="传递数字"></a>传递数字</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.likes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：静态属性默认是string类型</p><h4 id="传递boolean"><a href="#传递boolean" class="headerlink" title="传递boolean"></a>传递boolean</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">is-published</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is-published</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is-published</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.isPublished<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：静态属性有两种方式</p><h4 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>comment-ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[234, 266, 273]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>comment-ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.commentIds<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样注意静态形式</p><h4 id="传递对象"><a href="#传递对象" class="headerlink" title="传递对象"></a>传递对象</h4><p>类似数组</p><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>最好不要在子组件中尝试更改prop</p><ol><li>prop用来传递一个初始值；子组件想把它作为本地数据使用—最好定义一个本地data</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'initialCounter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>prop作为原始值传入但需要进行转换–使用计算属性</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>computed<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue在数据管理上一定要清楚，子组件最好只是使用数据，UI组件；数据变更最好在根实例中实现</p><h3 id="非Prop的Attribute"><a href="#非Prop的Attribute" class="headerlink" title="非Prop的Attribute"></a>非Prop的Attribute</h3><p>当prop传递给一个组件，但是这个组件没有在``props` 中定义。常见于组件库中</p><p>当然组件可以接受任意的attribute，这些attribute会被添加到这个组件的根元素上</p><h4 id="替换-合并已有Attribute"><a href="#替换-合并已有Attribute" class="headerlink" title="替换/合并已有Attribute"></a>替换/合并已有Attribute</h4><p><strong>实例</strong></p><p> <code>&lt;bootstrap-date-input&gt;</code> 的模板是这样的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时我们想给我们的日期选择器插件定值一个主题</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bootstrap-date-input</span>  <span class="token attr-name">data-date-picker</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activated<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date-picker-theme-dark<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bootstrap-date-input</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时有两个class attribute，，，</p><p>对于绝大多数来说是替换，外来的（<code>date-picker-theme-dark</code>），替换掉（<code>form-control</code>）</p><p>如果传入 <code>type="text"</code> 就会替换掉 <code>type="date"</code></p><p><strong>但是</strong>：对于style和class<strong>会智能合并</strong></p><p>最终的值：<code>class="form-control date-picker-theme-dark"</code>。</p><h4 id="禁用Attribute继承"><a href="#禁用Attribute继承" class="headerlink" title="禁用Attribute继承"></a>禁用Attribute继承</h4><p>如果你不想组件根元素继承attribute，设置<code>inheritAttrs: false</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配合实例的 <code>$attr</code> property 使用，它包含了传递给组件的attribute 名和 attribute 值，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  placeholder<span class="token operator">:</span> <span class="token string">'Enter your username'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有了 <code>inheritAttrs: false</code> 和 <code>$attrs</code>，你就可以手动决定这些 attribute 会被赋予哪个元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;label&gt;      {{ label }}      &lt;input        v-bind="$attrs"        v-bind:value="value"        v-on:input="$emit('input', $event.target.value)"      &gt;    &lt;/label&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>  <span class="token attr-name">required</span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><ul><li><p>v-bind=”$attrs”  定向绑定</p></li><li><p>双向绑定复习v-model</p></li></ul></blockquote><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h3><p>不同于组件和prop，事件名不存在大小写自动转换</p><p>触发事件名字===监听绑定事件名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'myEvent'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 没有效果 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name"><span class="token namespace">v-on:</span>my-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还注意到v-on事件监听在DOM模板中—大小写转换</p><p> <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p><p>推荐使用<strong>kebab-case 的事件名</strong>。</p><h4 id="自定义组件v-model"><a href="#自定义组件v-model" class="headerlink" title="自定义组件v-model"></a>自定义组件v-model</h4><p>复习</p><p>组件上的<code>v-model</code>默认利用<code>value</code>和<code>input</code>事件，使用<code>model</code>选项可以避免一些像单选()，复选()等输入控件<code>value</code>使用不同目的的冲突</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-checkbox'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  model<span class="token operator">:</span> <span class="token punctuation">{</span>    prop<span class="token operator">:</span> <span class="token string">'checked'</span><span class="token punctuation">,</span>    event<span class="token operator">:</span> <span class="token string">'change'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    checked<span class="token operator">:</span> Boolean  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;input      type="checkbox"      v-bind:checked="checked"      v-on:change="$emit('change', $event.target.checked)"    &gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>model: </li><li>声明prop名字（并且需要在props中声明）</li><li>声明事件名（触发事件名一致）</li><li>input元素中表明</li><li><code>type="checkbox"</code></li><li><code>v-bind:checked="checked"</code></li><li><code>v-on:change="$emit('change', $event.target.checked)"</code></li></ul></blockquote><p><strong>示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-checkbox</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lovingVue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-checkbox</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里lovingVue值会传入<code>checked</code> </p><p>input change事件触发–&gt;触发change，并返回值—&gt;返回值更新lovingVue</p><h4 id="将原生事件绑定到组件"><a href="#将原生事件绑定到组件" class="headerlink" title="将原生事件绑定到组件"></a>将原生事件绑定到组件</h4><p>可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>focus.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onFocus<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要考虑一个前面prop一样的问题，根元素上绑定事件，，，如果你想绑定input事件，但根元素不是input元素，子元素才是。。。</p><p>想到定向绑定事件！</p><p>同样先禁止attribute继承</p><p>Vue提供 <code>$listeners</code> property，它是一个对象，里面包含了作用在这个组件上的所有监听器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>  <span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong>配合v-model</p><p>创建一个计算属性融合一下更加方便</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">inputListeners</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token comment">// `Object.assign` 将所有的对象合并为一个新对象</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 我们从父级添加所有的监听器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">,</span>        <span class="token comment">// 然后我们添加自定义监听器，</span>        <span class="token comment">// 或覆写一些监听器的行为</span>        <span class="token punctuation">{</span>          <span class="token comment">// 这里确保组件配合 `v-model` 的工作</span>          <span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;label&gt;      {{ label }}      &lt;input        v-bind="$attrs"        v-bind:value="value"        v-on="inputListeners"      &gt;    &lt;/label&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在<code>&lt;base-input&gt;</code> 组件是一个<strong>完全透明的包裹器</strong>了，也就是说它可以完全像一个普通的 <code>&lt;input&gt;</code> 元素一样使用了：所有跟它相同的 attribute 和监听器都可以工作，不必再使用 <code>.native</code> 监听器。</p><h4 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a><code>.sync</code> 修饰符</h4><p><code>2.3</code>以后变成一个编译时的语法糖，它会被扩展为自动更新父组件属性的<code>v-on</code> 监听器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">:foo.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扩展为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">:foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar=$event<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当子组件要更新<code>foo</code>值时，需要显示触发一个更新事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:foo'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><ul><li><strong>.sync后面只能是要绑定的property名</strong>，而不能是表达式</li></ul></blockquote><p><strong>示例</strong>：弹窗关闭</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>Vue实现的内容分配的api,<code>&lt;slot&gt;</code>承载分发内容的出口；类似react中<code>prop.children</code></p><h3 id="插槽内容"><a href="#插槽内容" class="headerlink" title="插槽内容"></a>插槽内容</h3><ol><li>字符串</li><li>HTML等模板代码</li><li>甚至其他组件</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 添加一个图标的组件 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-awesome-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-awesome-icon</span><span class="token punctuation">&gt;</span></span>  Your Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><blockquote><p>如果<code>&lt;navigation-link&gt;</code> 的 <code>template</code> 中<strong>没有</strong>包含一个 <code>&lt;slot&gt;</code> 元素，则内容都会被抛弃</p></blockquote><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  Clicking here will send you to: {{ url }}  <span class="token comment">&lt;!--这里的 `url` 会是 undefined--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然可以使用props在组件内部接收url这个property</li></ul><h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><p>也就是slot插槽的默认内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在父级组件中使用 <code>&lt;submit-button&gt;</code> 并且不提供任何插槽内容时：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将渲染后备内容</p><p>当然提供内容时，覆盖后备内容</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>废弃了slot属性和slot-scope属性，代替的是v-slot</p></blockquote><p><strong>示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不带name的会有隐含<code>name="default"</code></li><li>同样，任何没有被带有<code>v-slot</code>的<code>template</code>包裹的内容都视为默认插槽内容</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：<code>v-slot</code>一般只能添加到<code>&lt;template&gt;</code>上，一个例外下节分析</p><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p>把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong> 你希望使用缩写的话，你必须始终以明确插槽名取而代之：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ user }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>当我们想让插槽内容可以访问子组件中才有的数据。</p><p><strong>例如</strong>有如下模板的 <code>&lt;current-user&gt;</code> 组件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>{{ user.lastName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>想换掉备用内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">&gt;</span></span>  {{ user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是会报错，因为user是子作用域中的东西，<code>&lt;current-user&gt;</code>组件内容是父组件作用域</p><p><strong>引入插槽prop</strong>：在<code>&lt;slot&gt;</code>元素上绑定<code>user</code>属性；并且在<code>v-slot</code>属性赋值内容全局prop名</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ user.lastName }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ slotProps.user.firstName }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="独占默认插槽的缩写语法"><a href="#独占默认插槽的缩写语法" class="headerlink" title="独占默认插槽的缩写语法"></a>独占默认插槽的缩写语法</h4><p>当提供的内容<strong>只有默认插槽</strong>时，组件的标签可以当做插槽模板使用；**<code>v-slot</code> 直接用在组件上**</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ slotProps.user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>default可以省略</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ slotProps.user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然缩写语法不可以和具名插槽混用，同时出现需要使用完整的基于 <code>&lt;template&gt;</code> 的语法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ slotProps.user.firstName }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>other</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>otherSlotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解构插槽prop"><a href="#解构插槽prop" class="headerlink" title="解构插槽prop"></a>解构插槽prop</h4><p>作用域插槽内部工作原理是将插槽内容，包裹在一个拥有单一参数的函数里</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">slotProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 插槽内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表示prop名可以是js表达式，可以使用对象结构的语法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ user }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重命名</p><pre class="line-numbers language-hrml" data-language="hrml"><code class="language-hrml">&lt;current-user v-slot="{ user: person }"&gt;  {{ person.firstName }}&lt;/current-user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自定义prop的后备内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ user = { firstName: <span class="token punctuation">'</span>Guest<span class="token punctuation">'</span> } }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ user.firstName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3><p>动态指令参数可以用在 <code>v-slot</code> 上，来定义动态的插槽名：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[dynamicSlotName]</span><span class="token punctuation">&gt;</span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态组件-amp-异步组件"><a href="#动态组件-amp-异步组件" class="headerlink" title="动态组件&amp;异步组件"></a>动态组件&amp;异步组件</h2><h3 id="动态组件上使用keep-alive"><a href="#动态组件上使用keep-alive" class="headerlink" title="动态组件上使用keep-alive"></a>动态组件上使用<code>keep-alive</code></h3><p>前面我们使用<code>is</code> 属性来切换不同的组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然切换组件后，不能保存原来组件的状态，会触发重复渲染</p><p>给动态标签添加<code>keep-alive</code>实现状态缓存</p><p><strong>示例</strong>：多标签界面</p><img data-src="/2021/05/15/vue2-x-jin-jie/QQ%E5%BD%95%E5%B1%8F20210520145606.gif" class="" title="QQ录屏20210520145606"><ol><li>视图结构</li></ol><blockquote><ul><li>tab-button</li><li>border上的细节注意</li><li>cursor，hover，active细节注意</li><li>tab大盒子</li><li>flex布局</li><li>左sidebar<ul><li>单行文本</li><li>max-width设置</li><li>cursor，hover，active细节</li></ul></li><li>右container<ul><li><code>&lt;h&gt;</code></li><li><code>&lt;p&gt;</code>:复习v-html技巧</li></ul></li></ul></blockquote><ol start="2"><li>逻辑层</li></ol><blockquote><ul><li>根实例</li><li>数据<ul><li>currentTab：用于active和动态组件切换</li><li>tabs：用于循环渲染</li><li>计算属性：动态组件切换</li></ul></li><li>子组件<ul><li>tab-posts</li><li>tab-archive</li></ul></li><li>tab-posts</li><li>数据<ul><li>posts数组<ul><li>id：key</li><li>title</li><li>content：<code>&lt;p&gt;</code>：v-html</li></ul></li><li>selectedPost：active，右container显示</li></ul></li><li>template：注意单一原则</li><li>tab-archive</li><li>template</li></ul></blockquote><p><strong>注意</strong></p><blockquote><ul><li>ul li使用时</li></ul><ol><li>一定要样式中margin，padding自定义</li><li>list-style-type: none;取消<code>::marker</code></li></ol><ul><li>单行文字css实现</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css">&gt;<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>&gt;<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>&gt;<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>h标签上内外边距丑</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&gt;.selected-post &gt; :first-child</span> <span class="token punctuation">{</span> <span class="token property">margin-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">padding-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>&gt;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>Vue允许以一个工厂函数的方式定义组件，工厂函数只有当组件需要被渲染的时候才会触发，并且把结果缓存供未来重渲染</p><p><strong>例子</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-example'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 向 `resolve` 回调传递组件定义</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token operator">:</span> <span class="token string">'&lt;div&gt;I am async!&lt;/div&gt;'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面示例，工厂函数调用，会收到<code>resolve</code>回调，这个回调函数从服务器得到组件定义（这里用setTimeout演示）</p></blockquote><ul><li>将异步组件和<code>webpack code-splitting</code>结合</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这个特殊的 `require` 语法将会告诉 webpack</span>  <span class="token comment">// 自动将你的构建代码切割成多个包，这些包</span>  <span class="token comment">// 会通过 Ajax 请求加载</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./my-async-component'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.runoob.com/w3cnote/requirejs-tutorial-2.html">require</a></p></blockquote><ul><li>也可以返回一个Promise</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>  <span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span>  <span class="token comment">// 这个动态导入会返回一个 `Promise` 对象。</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部组件也可以直接提供一个返回Promise的函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// ...</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">'my-component'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E7%A4%BA%E4%BE%8B">import动态导入</a></p></blockquote><h4 id="处理加载状态"><a href="#处理加载状态" class="headerlink" title="处理加载状态"></a>处理加载状态</h4><p>异步组件工厂函数也可以返回一个如下格式的对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">AsyncComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>  component<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 异步组件加载时使用的组件</span>  loading<span class="token operator">:</span> LoadingComponent<span class="token punctuation">,</span>  <span class="token comment">// 加载失败时使用的组件</span>  error<span class="token operator">:</span> ErrorComponent<span class="token punctuation">,</span>  <span class="token comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>  delay<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token comment">// 如果提供了超时时间且组件加载也超时了，</span>  <span class="token comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>  timeout<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理边界问题"><a href="#处理边界问题" class="headerlink" title="处理边界问题"></a>处理边界问题</h2><h3 id="访问元素-amp-组件"><a href="#访问元素-amp-组件" class="headerlink" title="访问元素&amp;组件"></a>访问元素&amp;组件</h3><p>大多数情况，最好不要触达另一个组件实例内部或手动操作DOM元素。</p><h4 id="访问根实例"><a href="#访问根实例" class="headerlink" title="访问根实例"></a>访问根实例</h4><p>每一个<code>new Vue</code>实例的子组件，都可以通过<code>$root</code> 来访问根实例</p><p>所有子组件都可以将这个实例作为全局store访问使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue 根实例</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    foo<span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 获取根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo<span class="token comment">// 写入根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">// 访问根组件的计算属性</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>bar<span class="token comment">// 调用根组件的方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>对于一些小应用，可以这行管理数据</p><p>大型应用：Vuex管理</p></blockquote><h4 id="访问父级组件实例"><a href="#访问父级组件实例" class="headerlink" title="访问父级组件实例"></a>访问父级组件实例</h4><p>和<code>$root</code>类似，<code>$parent</code> 可以用来从子组件中访问父组件的实例</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x基础</title>
      <link href="2021/05/10/vue2.x-ji-chu/"/>
      <url>2021/05/10/vue2.x-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>鹅厂实习要用vue，害当初还考虑选框架react or vue？</p><p>全都要 ！呜呜呜</p></blockquote><a id="more"></a><h2 id="1-初识"><a href="#1-初识" class="headerlink" title="1.初识"></a>1.初识</h2><h4 id="1-安装vue-devtool"><a href="#1-安装vue-devtool" class="headerlink" title="1.安装vue devtool"></a>1.安装vue devtool</h4><ul><li>使用手动安装的方式</li></ul><p><a href="https://github.com/vuejs/vue-devtools#vue-devtools">https://github.com/vuejs/vue-devtools#vue-devtools</a></p><h4 id="2-项目中引入vue"><a href="#2-项目中引入vue" class="headerlink" title="2.项目中引入vue"></a>2.项目中引入vue</h4><ul><li><p>使用script标签引入   </p><p>CDN     注意开发板本和生产版本</p><pre class="line-numbers language-none"><code class="language-none">  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用npm引入</p></li><li><p>使用构建工具CLI</p></li></ul><p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5">https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5</a></p><h4 id="3-数据和方法"><a href="#3-数据和方法" class="headerlink" title="3.数据和方法"></a>3.数据和方法</h4><p>初始化VUE对象时，<strong>el</strong>和<strong>data</strong>两个重要的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property">属性</a>，还有一些相对应的实例方法（<strong>watch</strong>）</p><ul><li><p>data数据</p><ul><li><p>是一个对象，每一个属性就是挂载到对应el上的变量数据</p></li><li><p>data引用在定义的时候就确定了，浅地址不可变</p></li></ul></li><li><p>方法</p><ul><li>也有一些实例方法，比如watch</li></ul></li></ul><h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h4><p>在Vue实例被创建都会经过一系列初始化过程，数据监听，模板编译，将实例挂载到DOM并在数据变化时更新DOM。对应每一个阶段，vue封装了对应的钩子函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// `this` 指向 vm 实例</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "a is: 1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>beforeCreate：实例初始化之后，数据观测和事件配置前被调用</p></li><li><p>created：实例创建完成后被调用，完成了数据观测，属性和方法的运算，事件回调；但$el不可用</p></li><li><p>beforeMount：在组件开始挂载前被调用（render函数首次被调用）</p></li><li><p>mounted：实例被挂载后调用，el被新创建的vm.$el替换。注意mounted不会保证所有子组件也都一起被挂载</p><p>如果希望等到整个视图都渲染，可以使用vm.$nextTick</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Code that will run only after the</span>    <span class="token comment">// entire view has been rendered</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>beforeUpdate：发生在虚拟DOM打补丁前，适合在更新前访问之前的DOM，比如clearTimeout()/clearInterval()</p></li><li><p>updated：DOM已经更新，可以执行关于新DOM 的操作，应该避免在这个期间更改状态，可以用计算属性或watch取代；同样不能保证所有子组件都更新，使用vm.$nextTick()</p></li><li><p>activated：被keep-alive缓存组件激活时使用</p></li><li><p>deactivated：被keep-alive缓存组件停用时使用</p></li><li><p>beforeDestroy：实例销毁前调用：实例依然可用</p></li><li><p>destroyed：实例销毁后调用，子实例也会被销毁</p></li><li><p>errorCaptured：捕获一个子孙组件错误时被调用，返回false阻止该错误继续向上传播<code>(err: Error, vm: Component, info: string) =&gt; ?boolean</code></p></li></ul></blockquote><ul><li>生命周期函数和回调中不要使用箭头函数（没有this）</li></ul><h2 id="2-模板语法"><a href="#2-模板语法" class="headerlink" title="2.模板语法"></a>2.模板语法</h2><h4 id="1-插值"><a href="#1-插值" class="headerlink" title="1.插值"></a>1.插值</h4><h5 id="文本（js表达式）"><a href="#文本（js表达式）" class="headerlink" title="文本（js表达式）"></a>文本（js表达式）</h5><p>数据绑定最常见的就是双大括号语法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文本数据不会更新：使用v-once指令</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>这个将不会改变: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>模板表达式都被放在沙盒中，只能访问<a href="https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9">全局变量的一个白名单</a>，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p></blockquote><h5 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h5><p>双大括号会将数据解释为不同文本，输出真正的HTML需要使用v-html指令</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using mustaches: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>xss攻击！小心使用</p></blockquote><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>对于html的属性当然也不能使用双大括号来做数据绑定，我们要使用v-bind绑定指定属性和数据变量</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于boolean类型的attribute（他们只要存在就意味着true） ，当值为null，undefined，false时直接消失</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isButtonDisabled<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-指令"><a href="#2-指令" class="headerlink" title="2.指令"></a>2.指令</h4><p>v-前缀的特殊attribute，当表达式的值变化时，响应式的作用于DOM</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>就像上面html属性插值，响应式的更新html attribute</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>约束</strong></li></ul><p>动态参数预期会求出一个字符串，异常情况为null，这个特殊的null可以被显示的用于移除绑定。</p><p>动态参数表达式语法约束：空格和引号无效</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 这会触发一个编译警告 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>['foo'</span> <span class="token attr-name">+</span> <span class="token attr-name">bar]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义data时需要用小写而不是驼峰！！！</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。除非在实例中有一个名为“someattr”的 property，否则代码不会工作。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[someAttr]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><p>对于一个指令应该以特殊方式绑定</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h5><ul><li>v-bind缩写</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 完整语法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 缩写 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[key]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>v-on缩写</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 完整语法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 缩写 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[event]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-计算属性和侦听器"><a href="#3-计算属性和侦听器" class="headerlink" title="3.计算属性和侦听器"></a>3.计算属性和侦听器</h2><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>模板内表达式非常方便，但是模板中逻辑过重会使模板难以维护</p><p>例<code>{{ message.split('').reverse().join('') }}</code></p><p>对于这个反转字符串的逻辑，如果要多次使用，这样表达非常麻烦，应当使用<strong>计算属性</strong></p><p><strong>例子</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Original message: "{{ message }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Computed reversed message: "{{ reversedMessage }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Hello'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 计算属性的 getter</span>    <span class="token function-variable function">reversedMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <ul><li>在comuted中声明一个函数返回值为数据（声明了数据的getter()）</li><li>计算属性没有副作用，完全取决于this.message</li></ul><h5 id="计算属性缓存vs方法"><a href="#计算属性缓存vs方法" class="headerlink" title="计算属性缓存vs方法"></a>计算属性缓存vs方法</h5><p>可以发现，计算属性好像可以用methods来模拟，有什么区别呢？</p><p>计算属性就像react hook的依赖一样，只有当依赖变化时才会执行，否则直接返回之前计算的结果！</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//下面这个计算属性不会更新</span>computed<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">now</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="计算属性vs侦听属性"><a href="#计算属性vs侦听属性" class="headerlink" title="计算属性vs侦听属性"></a>计算属性vs侦听属性</h5><p>vue提供更通用的观察和响应vue实例上的数据变动：侦听属性，但是很容易滥用watch</p><p><strong>例子</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ fullName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    firstName<span class="token operator">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token operator">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>    fullName<span class="token operator">:</span> <span class="token string">'Foo Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">firstName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">lastName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    firstName<span class="token operator">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token operator">:</span> <span class="token string">'Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用watch做变量监听在这个应用场景下显得多余。</p><h5 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h5><p>默认情况下计算属性只有getter，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>  fullName<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// getter</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// setter</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在运行<code>vm.fullname="chengmin He"</code>setter会被调用并对<code>vm.firstName</code> 和 <code>vm.lastName</code>进行更新</p><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><p>当数据变化执行异步或开销较大操作时，使用watch</p><p><strong>例子：</strong>question改变异步请求返回answer</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>watch-example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    Ask a yes/no question:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>question<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ answer }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>input框双向绑定</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> watchExampleVM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#watch-example'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    question<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    answer<span class="token operator">:</span> <span class="token string">'I cannot give you an answer until you ask a question!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果 question 发生改变，这个函数就会运行    </span>    <span class="token function-variable function">question</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newQuestion<span class="token punctuation">,</span> oldQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Waiting for you to stop typing...'</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debouncedGetAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span>    <span class="token comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span>    <span class="token comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span>    <span class="token comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span>    <span class="token comment">// 请参考：https://lodash.com/docs#debounce</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedGetAnswer <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getAnswer<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">getAnswer</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>question<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Questions usually contain a question mark. ;-)'</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Thinking...'</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://yesno.wtf/api'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          vm<span class="token punctuation">.</span>answer <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          vm<span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Error! Could not reach the API. '</span> <span class="token operator">+</span> error        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>使用防抖：节省异步查询开销</p></li><li><p>在created中绑定函数（这个时候可以使用data和methods的内容了）</p></li><li><p>绑定函数和methods区别（methods中的方法只有被触发，比如当做回调函数时才能使用，自定义绑定函数调用灵活）</p></li></ul></blockquote><h2 id="4-Class和Style绑定"><a href="#4-Class和Style绑定" class="headerlink" title="4.Class和Style绑定"></a>4.Class和Style绑定</h2><h4 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h4><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>给<code>v-bind:class=""</code>传入class对象</p><ol><li>显式对象</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ active: isActive, <span class="token punctuation">'</span>text-danger<span class="token punctuation">'</span>: hasError }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  isActive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  hasError<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终被渲染为<code>&lt;div class="static active"&gt;&lt;/div&gt;</code></p><ol start="2"><li>隐式对象</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div v-bind:class="classObject"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  classObject<span class="token operator">:</span> <span class="token punctuation">{</span>    active<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">'text-danger'</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：使用 <code>-</code>或者空格等不能直接出现在js对象属性名的中</p></blockquote><ul><li>隐式对象可以是灵活的计算属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token function-variable function">classObject</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      active<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span>      <span class="token string">'text-danger'</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fatal'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>fatal是一种error类型：不可恢复</p></blockquote><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><p>应用一个class列表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[activeClass, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  activeClass<span class="token operator">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>  errorClass<span class="token operator">:</span> <span class="token string">'text-danger'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染为：<code>&lt;div class="active text-danger"&gt;&lt;/div&gt;</code></p><ul><li>如果需要条件切换渲染列表，使用三元表达式或对象语法</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[isActive ? activeClass : <span class="token punctuation">'</span><span class="token punctuation">'</span>, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[{ active: isActive }, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="组件上"><a href="#组件上" class="headerlink" title="组件上"></a>组件上</h5><p>当一个自定义组件上使用class property时，这些class会被添加到根元素上。已存在的class不会被覆盖</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token string">'&lt;p class="foo bar"&gt;Hi&lt;/p&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baz boo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染为：<code>&lt;p class="foo bar baz boo"&gt;Hi&lt;/p&gt;</code></p><p>当然前面数据绑定形式的class也是一样的</p><h4 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h4><p>同样存在对象语法和数组语法</p><blockquote><p>注意：对象语法中使用峰驼命名或者短横线连接（需要加引号）</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  activeColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  fontSize<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通常直接绑定一个样式对象</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">styleObject</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  styleObject<span class="token operator">:</span> <span class="token punctuation">{</span>    color<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    fontSize<span class="token operator">:</span> <span class="token string">'13px'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样也可以结合计算属性返回对象</p><h5 id="自动添加前缀："><a href="#自动添加前缀：" class="headerlink" title="自动添加前缀："></a>自动添加前缀：</h5><p>vue会自动侦听并添加（比如：transform）</p><h5 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h5><p>2.3.0+可以对style绑定的属性提供多个值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> [<span class="token string">'-webkit-box'</span><span class="token punctuation">,</span> <span class="token string">'-ms-flexbox'</span><span class="token punctuation">,</span> <span class="token string">'flex'</span>] <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样写只会渲染数组中最后一个被浏览器识别的值。上面如果支持flexbox，只会渲染<code>display:flex</code></p><h2 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5.条件渲染"></a>5.条件渲染</h2><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>awesome<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Vue is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>Oh no 😢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用template</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Paragraph 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Paragraph 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>v-else：必须紧跟</p></li><li><p>v-else-if：可以连续使用</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>C<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>  Not A/B/C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="key可以管理复用元素"><a href="#key可以管理复用元素" class="headerlink" title="key可以管理复用元素"></a>key可以管理复用元素</h5><p><strong>例子</strong>：用户在不同登录方式切换</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginType === <span class="token punctuation">'</span>username<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your email address<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中替换的只是他们的<code>placeholder</code>，不会清除用户已输入内容</p><p>当然可设置特定key值避免复用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginType === <span class="token punctuation">'</span>username<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username-input<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your email address<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email-input<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次切换都会重新渲染，label元素还是会高效利用</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ul><li>不支持<code>&lt;template&gt;</code>,<code>v-else</code></li><li>初始渲染开销大，只是简单基于CSS进行切换</li></ul><h2 id="6-列表渲染"><a href="#6-列表渲染" class="headerlink" title="6.列表渲染"></a>6.列表渲染</h2><h4 id="v-for把一个数组对应为一组元素"><a href="#v-for把一个数组对应为一组元素" class="headerlink" title="v-for把一个数组对应为一组元素"></a>v-for把一个数组对应为一组元素</h4><p>v-for使用<code>item in items</code> 的语法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ item.message }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#example-1'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    items<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中不只item还可以获取对应index<code>(item, index) in items</code></li></ul><h4 id="v-for中使用对象"><a href="#v-for中使用对象" class="headerlink" title="v-for中使用对象"></a>v-for中使用对象</h4><p>用法类似，<code>(value, name, index) in object</code>对应值，键名，索引</p><blockquote><p>底层使用<code>Object.keys()</code>的结果遍历</p></blockquote><h4 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h4><h5 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h5><p>vue使用v-for渲染列表，默认使用”就地更新“</p><p>如果数据项顺序改变，不会移动DOM匹配数据项顺序，而是更新每一个元素</p><p>只适用于<strong>不依赖</strong>子组件状态或临时DOM状态（表单输入）的列表渲染</p><h5 id="key"><a href="#key" class="headerlink" title="key"></a>key</h5><p>跟踪每一个节点的身份–使用key</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 内容 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尽量添加key值，并且不要使用对象数组等非基本类型作为key</p><blockquote><p>主要用于vnodes的比较</p><p>不使用key会尽可能就地修改/复用相同类型元素</p><p>可以使用于强制替换元素而不是重复使用</p><ul><li>完整触发组件生命周期</li><li><strong>触发过渡</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h4><h5 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h5><p>vue将被侦听的数组的变更方法进行包裹，调用会触发视图更新</p><blockquote><p>push(),pop(),shift(),unshift(),splice(),sort(),reverse()</p></blockquote><h5 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h5><p>比如<code>filter(),concat(),slice()</code>用新数组替换旧数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">example1<span class="token punctuation">.</span>items <span class="token operator">=</span> example1<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Foo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>vue会使DOM元素得到最大范围的重用，用一个含有相同元素的数组替换元素数组非常高效</p><p><strong><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意</a></strong></p><blockquote><p>改变对象的属性，而这个属性没有事先在data 中定义，不会被vue监听</p><ul><li>因为vue2通过Object.definedProperty来劫持data上的数据，对每个属性设置对应的setter/getter.</li></ul><p>对于数组而言，vue本身做了处理，性能角度放弃对数组每一项添加监听（使用<strong>索引</strong>修改，修改<strong>长度</strong>时）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span>userProfile <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span> <span class="token punctuation">{</span>  age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>  favoriteColor<span class="token operator">:</span> <span class="token string">'Vue Green'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210513215457350.png" class="" title="image-20210513215457350"> <ul><li>当然vue3使用<strong>proxy</strong>代替Object.definedProperty，，，后面再聊~~</li></ul><h4 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤./排序后的结果"></a>显示过滤./排序后的结果</h4><p>不改变元数据，可以创建一个计算属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n in evenNumbers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  numbers<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">evenNumbers</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在嵌套for循环时，使用methods代替</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set in sets<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n in even(set)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">{</span>  sets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">even</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在v-for里面使用值范围"><a href="#在v-for里面使用值范围" class="headerlink" title="在v-for里面使用值范围"></a>在v-for里面使用值范围</h4><p>接受整数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"n in 10"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：<img data-src="vue2.x基础/image-20210513220441144.png" alt="image-20210513220441144" style="zoom:80%;"></p><h4 id="在-lt-template-gt-上使用v-for"><a href="#在-lt-template-gt-上使用v-for" class="headerlink" title="在<template>上使用v-for"></a>在<code>&lt;template&gt;</code>上使用v-for</h4><p>用来循环渲染一段包含多个元素的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ item.msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-for同v-if"><a href="#v-for同v-if" class="headerlink" title="v-for同v-if"></a>v-for同v-if</h4><p>不推荐在同一元素上使用两者，前者优先级高</p><ul><li>想要部分渲染时有用</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!todo.isComplete<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>有条件的跳出循环</li></ul><p>可以把v-if放在外层元素或<code>&lt;template&gt;</code>上</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos.length<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ todo }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>No todos left!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件上使用v-for"><a href="#组件上使用v-for" class="headerlink" title="组件上使用v-for"></a>组件上使用v-for</h4><p>必须加<strong>key</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>组件迭代数据需要使用prop手动传递，组件有自己独立的作用域</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in items<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提高组件复用性</p><p><strong>例子：实现简单的todolist</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list-example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addNewTodo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newTodoText<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E.g. Feed the cat<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>      <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-item<span class="token punctuation">"</span></span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(todo, index) in todos<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo.id<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo.title<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-on:</span>remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos.splice(index, 1)<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong><code>is="todo-item"</code>:DOM模板解析要求ul中不应该存在自定义组件<code>&lt;todo-item&gt;</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;li&gt;    {{ title }}    &lt;button v-on:click="$emit('remove')"&gt;Remove&lt;/button&gt;    &lt;/li&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#todo-list-example'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    newTodoText<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    todos<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        title<span class="token operator">:</span> <span class="token string">'Do the dishes'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        title<span class="token operator">:</span> <span class="token string">'Take out the trash'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        title<span class="token operator">:</span> <span class="token string">'Mow the lawn'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    nextTodoId<span class="token operator">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">addNewTodo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextTodoId<span class="token operator">++</span><span class="token punctuation">,</span>        title<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><blockquote><p>要把子组件放在父组件前面，不然首次解析不会识别<code>li</code></p><p>id设置为了保证全局唯一性，一直加一！！！</p></blockquote><h2 id="7事件处理"><a href="#7事件处理" class="headerlink" title="7事件处理"></a>7事件处理</h2><p>v-on监听DOM事件</p><p><strong>为什么在HTML中监听事件？</strong></p><blockquote><p>vue事件处理方法和表达式都严格绑定在当前视图的ViewModel上</p><p>使用 <code>v-on</code> 有几个好处：</p><ol><li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li><li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li><li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li></ol></blockquote><h4 id="触发一些js代码"><a href="#触发一些js代码" class="headerlink" title="触发一些js代码"></a>触发一些js代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter += 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The button above has been clicked {{ counter }} times.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#example-1'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    counter<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h4><p>事件处理逻辑复杂时</p><p>默认传入参数event（指向DOM原生事件）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example-2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Greet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> example2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#example-2'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'Vue.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 在 `methods` 对象中定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">greet</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// `this` 在方法里指向当前 Vue 实例</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">)</span>      <span class="token comment">// `event` 是原生 DOM 事件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>// 也可以用 JavaScript 直接调用方法<br>example2.greet() // =&gt; ‘Hello Vue.js!’</p></blockquote><h4 id="内联js语句调用方法"><a href="#内联js语句调用方法" class="headerlink" title="内联js语句调用方法"></a>内联js语句调用方法</h4><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example-3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>hi<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>what<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say what<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#example-3'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>内联方法需要使用到原生DOM（event）时</p><p>用特殊变量$event传入方法</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn(<span class="token punctuation">'</span>Form cannot be submitted yet.<span class="token punctuation">'</span>, $event)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">warn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 现在我们可以访问原生事件对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>事件处理程序中调用<code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p><p><strong>理念：</strong>方法只有纯粹的数据逻辑，而不是去处理DOM事件细节</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 修饰符可以串联 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 只有修饰符 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><span class="token comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><span class="token comment">&lt;!-- 不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><span class="token comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><span class="token comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>scroll.passive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onScroll<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>使用时顺序很重要</p><ul><li>用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong></li></ul><ul><li><p>而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击</p><p><code>.prevent</code>修饰符在前，修饰的是<strong>元素的<code>v-on</code>事件</strong>，所以它会阻止<code>所有的点击</code>，自身点击和事件冒泡；<br><code>.prevent</code>修饰符在后，修饰的是<strong>元素的<code>v-on</code>事件在被<code>.self</code>修饰后的事件</strong>，所以它只能阻止<code>对元素自身的点击</code>，无法阻止事件冒泡。</p></li></ul><p><code>.passive</code> 修饰符尤其能够提升移动端的性能。</p><ul><li><p>不要和<code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略， <code>.passive</code> 会告诉浏览器你不想阻止默认行为</p></li><li><p>passive=true等于提前告诉了浏览器，touchstart和touchmove不会阻止默认事件，手刚开始触摸，浏览器就可以立刻给与响应</p></li></ul></blockquote><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p>在监听键盘事件时，需要检查详细的按键</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>html中使用短横线写法绑定</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.page-down</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onPageDown<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面实例，处理函数只会在<code>$event.key</code> 等于 <code>PageDown</code> 时被调用。</p><h5 id="按键码"><a href="#按键码" class="headerlink" title="按键码"></a>按键码</h5><p><code>keyCode</code> 的事件用法<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">已经被废弃了</a>并可能不会被最新的浏览器支持。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vue提供常用的按键码别名</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>可以全局 <code>config.keyCodes</code> 对象<a href="https://cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 可以使用 `v-on:keyup.f1`</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token number">112</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h4><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><blockquote><p>meta:Mac上对应command键；windows对应win键</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Alt + C --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.alt.67</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- Ctrl + Click --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>鼠标事件和键盘事件顺序</p><h5 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h5><p>精确的系统修饰符组合触发</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onCtrlClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h5><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><h2 id="8表单输入绑定"><a href="#8表单输入绑定" class="headerlink" title="8表单输入绑定"></a>8表单输入绑定</h2><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>v-model在 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定</p><p>本质就是一个语法糖：负责监听用户的输入事件以更新数据</p><p><strong>注意</strong></p><blockquote><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p></blockquote><p>v-model对不同输入元素使用不同的property并抛出不同的事件</p><ul><li>text和textarea使用<code>value</code> 和<code>input</code>事件</li><li>checkbox和radio使用<code>checked</code> 和 <code>change</code>事件</li><li>select 将 <code>value</code> 作为prop并将<code>change</code>作为事件</li></ul><p><strong>注意</strong></p><blockquote><p>对于需要使用<a href="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法</a> (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 <code>input</code> 事件。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit me<span class="token punctuation">"</span></span>    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setValue($event.target)<span class="token punctuation">"</span></span>    <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">setValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> val<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514143750905.png" class="" title="image-20210514143750905"><h5 id="单行文本、多行文本"><a href="#单行文本、多行文本" class="headerlink" title="单行文本、多行文本"></a>单行文本、多行文本</h5><p>用法上面类似</p><p><strong>注意</strong></p><blockquote><p>文本区域插值 (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</p></blockquote><h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><p>单个复选框，绑定到布尔值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ checked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>多个复选框，绑定到同一数组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Mike<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Checked names: {{ checkedNames }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v-model绑定的数组存放选中的元素对应的  <code>value</code></p><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514145612514.png" class="" title="image-20210514145612514"> <h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><p>v-model绑定对应的 <code>value</code> 字符串</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Picked: {{ picked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514150100064.png" class="" title="image-20210514150100064"> <h5 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h5><p>单选框：字符串；多选框：数组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p></blockquote><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514150222031.png" class="" title="image-20210514150222031"> <img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514152020604.png" class="" title="image-20210514152020604"> <ul><li><strong>用v-for动态渲染</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option in options<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{ option.text }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">options<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">'One'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'A'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'B'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514153700474.png" class="" title="image-20210514153700474"> <h4 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h4><p>前面说到的v-model都是绑定静态的字符串（复选框也有boolean）</p><p>但有时我们想把值绑定到Vue实例的动态property上，v-bind实现</p><p><strong>复选框</strong></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;input  id="minyue"  type="checkbox"  v-model="toggle"  true-value="yes"  false-value="no"  /&gt;&lt;label for="minyue"&gt;{{toggle}} minyue&lt;/label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 当选中时</span>vm<span class="token punctuation">.</span>toggle <span class="token operator">===</span> <span class="token string">'yes'</span><span class="token comment">// 当没有选中时</span>vm<span class="token punctuation">.</span>toggle <span class="token operator">===</span> <span class="token string">'no'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514155651465.png" class="" title="image-20210514155651465"> <p><strong>单选按钮</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pick<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 当选中时</span>vm<span class="token punctuation">.</span>pick <span class="token operator">===</span> vm<span class="token punctuation">.</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>选择框</strong></p><ul><li>自定义绑定值，不局限于字符串</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valuemutiselect<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 50px</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ a: 123 }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ b: 123 }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ c: 123 }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Selected: {{ valuemutiselect }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">valuemutiselect<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514160533618.png" class="" title="image-20210514160533618"> <h4 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h5><p>默认情况下，<code>v-model</code>在每次<strong>input事件</strong>触发后将输入框的值与数据同步，添加<code>lazy修饰符</code>，转变为在<strong>change事件</strong>之后进行同步</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在“change”时而非“input”时更新 即：光标离开 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h5><p>自动将输入值类型转换为number</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>html输入元素的值总会返回字符串。</p><p>不添加修饰符，值无法被<code>parseFloat()</code> 解析，则会返回原始的值。</p></blockquote><ol><li>不加number修饰符</li></ol><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514163627044.png" class="" title="image-20210514163627044"> <ol start="2"><li>添加</li></ol><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514163746003.png" class="" title="image-20210514163746003"> <h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h5><p>自动过滤用户输入的首尾空白字符</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用v-model</h4><p>later~~</p><h2 id="9组件基础"><a href="#9组件基础" class="headerlink" title="9组件基础"></a>9组件基础</h2><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><p><strong>vue组件</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义一个名为 button-counter 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件是可以复用的Vue实例</p><p><strong>Vue根元素</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components-demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token operator">:</span> <span class="token string">'#components-demo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514165330909.png" class="" title="image-20210514165330909"> <h4 id="组件复用"><a href="#组件复用" class="headerlink" title="组件复用"></a>组件复用</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components-demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514165438124.png" class="" title="image-20210514165438124"> <p>每个组件都会维护自己的 <code>count</code> ,都是独立的实例</p><h5 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了组件复用性考虑，每一个实例可以维护</p><p>如果Vue没有这个规则，点击一个按钮全部改变</p><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514182324238.png" class="" title="image-20210514182324238"> <h4 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h4><p>通常一个应用会以一颗嵌套的组件树的形式组织</p><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514182523062.png" class="" title="image-20210514182523062"> <p>组件可以在模板中使用，首先需要注册以便Vue能识别。</p><p><strong>全局注册</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// ... options ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>全局注册组件可以被用在其<strong>后面</strong>任何通过<code>new Vue</code>创建的Vue根实例和其组件树中所有子组件的模块中</p><p><strong>局部注册</strong></p><p>later~~</p><h4 id="通过prop向子组件传递数据"><a href="#通过prop向子组件传递数据" class="headerlink" title="通过prop向子组件传递数据"></a>通过prop向子组件传递数据</h4><p>通过props选项包含该组件可接受的prop列表</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;h3&gt;{{ title }}&lt;/h3&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My journey with Vue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blogging with Vue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Why Vue is so fun<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210514233633831.png" class="" title="image-20210514233633831"> <p><strong>示例</strong>：数据存在根组件<code>data</code>里</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#blog-post-demo'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    posts<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">'My journey with Vue'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">'Blogging with Vue'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">'Why Vue is so fun'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过v-bind动态传递prop，适合运用在从一个API获取博文列表时</p><h4 id="单一根元素"><a href="#单一根元素" class="headerlink" title="单一根元素"></a>单一根元素</h4><p>模板不可能只有一个title，肯定还有正文等</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是，vue会报错，<strong>每个组件必须只有一个根元素</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog-post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时使用<code>post.title</code>和 <code>post.content</code>单一传prop而不是分为多个props</p><h4 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h4><h5 id="事件抛出一个值"><a href="#事件抛出一个值" class="headerlink" title="事件抛出一个值"></a>事件抛出一个值</h5><p>类似react中子组件怎么向父组件反馈通信–监听事件回调函数</p><p><strong>例子</strong>：父组件一个数据值控制全部报文字号大小</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#blog-posts-events-demo'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    posts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/* ... */</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    postFontSize<span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog-posts-events-demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">fontSize</span><span class="token punctuation">:</span> postFontSize + <span class="token string">'em'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>post</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-on:</span>enlarge-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postFontSize += 0.1<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div class="blog-post"&gt;    &lt;h3&gt;{{ post.title }}&lt;/h3&gt;    &lt;button v-on:click="$emit('enlarge-text')"&gt;      Enlarge text    &lt;/button&gt;    &lt;div v-html="post.content"&gt;&lt;/div&gt;    &lt;/div&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>$emit 方法</code> 触发当前实例绑定的对应的事件</p><p>对于有返回参数时</p><ol><li>js表达式</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">...</span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enlarge-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postFontSize += $event<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>事件处理函数是一个方法</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function-variable function">onEnlargeText</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">enlargeAmount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>postFontSize <span class="token operator">+=</span> enlargeAmount  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="组件中使用v-model"><a href="#组件中使用v-model" class="headerlink" title="组件中使用v-model"></a>组件中使用v-model</h5><p>思想对比input元素的双向绑定<code>v-model</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText = $event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-input</span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText = $event<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-input</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将<code>value</code> 绑定到prop上</li><li>input事件被触发，通过自定义的input事件抛出</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'custom-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;input      v-bind:value="value"      v-on:input="$emit('input', $event.target.value)"    &gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样v-model就可以被使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchText<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-input</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h4><p>类似react中的<code>props.children</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">&gt;</span></span>  Something bad happened.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'alert-box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div class="demo-alert-box"&gt;      &lt;strong&gt;Error!&lt;/strong&gt;      &lt;slot&gt;&lt;/slot&gt;    &lt;/div&gt;  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>&lt;slot&gt;&lt;/slot&gt;</code> 传递自定义组件的内容</p><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210515154739099.png" class="" title="image-20210515154739099"> <h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>不同组件之间动态切换时，比如多标签页面</p><img data-src="/2021/05/10/vue2.x-ji-chu/image-20210515155554490.png" class="" title="image-20210515155554490"> <p>使用<code>&lt;component&gt;</code> 元素特殊的<code>is</code>  attribute 绑定对应<strong>组件对象</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然这个component组件对象也可以是已注册的组件名字</p><p><strong>拓展：动态异步组件</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录问题</title>
      <link href="2021/04/28/deng-lu-wen-ti/"/>
      <url>2021/04/28/deng-lu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端的面试经常会问到的问题：</p><ul><li><p>你了解登录嘛？</p></li><li><p>怎么实现登录状态保持？</p></li><li><p>单点登录是什么？</p></li><li><p>了解什么第三方登录手段？</p></li></ul><a id="more"></a><h4 id="登录究竟是怎么实现的？"><a href="#登录究竟是怎么实现的？" class="headerlink" title="登录究竟是怎么实现的？"></a>登录究竟是怎么实现的？</h4><p>众所周知，客户端和服务端的通信在浏览器上基本上都是通过HTTP协议实现，而HTTP的无状态性，就导致，刚刚请求得到的东西如果浏览器（客户端）不做一些缓存处理，下次请求任然还是会像首次见面一样。</p><p>怎么保存请求状态呢？（登录状态）</p><p>肯定是要使用缓存的，并且这个缓存在每次请求request中可以携带上，传递给服务器。</p><p>cookie！！！</p><ol><li>cookie实现简单登录？     —node.js为例</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>开启http服务<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8000</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../app'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>serverHandle<span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">2.</span>serverHandle中获取cookie<span class="token keyword">const</span> <span class="token function-variable function">serverHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">//...设置返回格式，获取path，解析query</span>  <span class="token comment">//解析cookie</span>  req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//前端拼接cookie，会有间隔空格</span>    req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">3.</span>服务端响应设置cookie<span class="token comment">//服务端设置cookie，可以设置过期时间，作用域等属性</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>引入session的概念</li></ol><blockquote><p>解决用户信息只通过cookie传输，暴露username很危险</p><ul><li>在cookie中存储userId，服务端存储对应的username</li><li>服务端存储这个信息的载体，统称为session</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> OAuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="2021/04/23/xiao-cheng-xu/"/>
      <url>2021/04/23/xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>小程序基础开发学习笔记</p><a id="more"></a><h4 id="1-移动端适配"><a href="#1-移动端适配" class="headerlink" title="1.移动端适配"></a>1.移动端适配</h4><ul><li>为什么推荐使用<strong>rpx</strong>？</li></ul><blockquote><p>因为px是绝对单位，对于移动端而言，不同机型有不同的<strong>Dpr</strong>。比如iphone6机型上面Dpr=2  （屏宽750rpx=375px,一个物理像素是0.5px）</p></blockquote><h4 id="2-image组件"><a href="#2-image组件" class="headerlink" title="2.image组件"></a>2.image组件</h4><ul><li>不设置宽高，为什么图片宽高比变化了？</li></ul><blockquote><p>微信对image设置有默认宽高</p><ul><li>image组件默认宽度320px、高度240px</li></ul></blockquote><h4 id="3-容器标签"><a href="#3-容器标签" class="headerlink" title="3.容器标签"></a>3.容器标签</h4><ul><li>使用<code>&lt;view&gt;容器标签类似div&lt;/view&gt;</code></li><li>多盒子水平居中？</li></ul><blockquote><p>容器盒子：主轴方向纵向+垂直轴对齐center</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&gt;.container</span> <span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>&gt;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>页面默认根容器<code>&lt;page&gt;&lt;/page&gt;</code></li></ul><blockquote><p>可以设置整个页面的全局样式，比如页面背景颜色。。。</p></blockquote><h4 id="4-flex布局–基于容器的布局"><a href="#4-flex布局–基于容器的布局" class="headerlink" title="4.flex布局–基于容器的布局"></a>4.flex布局–基于容器的布局</h4><ul><li>小程序最重要的样式布局手段！</li></ul><h4 id="5-button组件"><a href="#5-button组件" class="headerlink" title="5.button组件"></a>5.button组件</h4><ul><li>小程序中button组件默认样式包含居中等很多不方便布局控制的样式，建议使用view模拟按钮</li></ul><img data-src="/2021/04/23/xiao-cheng-xu/image-20210423220155206.png" class="" title="image-20210423220155206"><h4 id="6-lin-ui组件库"><a href="#6-lin-ui组件库" class="headerlink" title="6.lin-ui组件库"></a>6.lin-ui组件库</h4><p>第三方<strong>自定义组件</strong></p><p>使用npm包需要先构建！—真正应用的是<code>miniprogram _npm</code></p><blockquote><p><code>工具</code>–&gt;<code>构建npm</code></p></blockquote><img data-src="/2021/04/23/xiao-cheng-xu/image-20210423225224242.png" class="" title="image-20210423225224242"> <h4 id="7-自定义组件"><a href="#7-自定义组件" class="headerlink" title="7.自定义组件"></a>7.自定义组件</h4><p>非常重要！</p><ul><li>每一个页面要是用的自定义组件，都需要先在json文件中声明</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"l-avatar"</span><span class="token operator">:</span> <span class="token string">"/miniprogram_npm/lin-ui/avatar/index"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用lin-UI的自定义组件–示例</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>l-avatar</span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">open-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{[<span class="token punctuation">'</span>userAvatarUrl<span class="token punctuation">'</span>,<span class="token punctuation">'</span>userNickName<span class="token punctuation">'</span>]}}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>坑点</strong>：首次使用时，基础组件库默认版本很低，一些新的api不支持，使用lin-UI会报错（什么什么方法找不到之类）；工具里面调高基础组件库版本就行了。</p><blockquote><ol><li>placement:图片在上，文字在下</li><li>size:图片大小rpx默认单位</li></ol><ul><li>视觉上比image标签的200rpx大（因为是全填充了！！！）</li></ul><ol start="3"><li>open-data:对用户信息的应用声明</li></ol></blockquote><h4 id="8-顶部导航设置"><a href="#8-顶部导航设置" class="headerlink" title="8.顶部导航设置"></a>8.顶部导航设置</h4><ul><li><p>项目整体设置—<code>app.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"window"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#C22A1E"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>具体页面配置—不用写window！！！</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"l-avatar"</span><span class="token operator">:</span> <span class="token string">"/miniprogram_npm/lin-ui/avatar/index"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#b3d4db"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-滑块容器–swiper"><a href="#9-滑块容器–swiper" class="headerlink" title="9.滑块容器–swiper"></a>9.滑块容器–swiper</h4><p>滑块视图<strong>容器</strong>。其中只可放置swiper-item组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>swiper-item</strong></p><p>内部就是一个插槽，可以放image等组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/bestplayers.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>对于固定宽高swiper怎么设置？</strong></li></ul><p>1.只在swiper中设置样式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>460rpx</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/bestplayers.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/04/23/xiao-cheng-xu/image-20210424095117250.png" class="" title="image-20210424095117250"> <p>为什么会这样？</p><p>还是那个原因，<strong>image有默认宽高样式</strong>！！！</p><p>也可以排除对swiper-item添加样式的原因（就近原则啦！）</p><p>2.swiper和image都添加样式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>460rpx</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>460rpx</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/bestplayers.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/04/23/xiao-cheng-xu/image-20210424095856733.png" class="" title="image-20210424095856733"> <p>ok啦！</p><ul><li>设置小圆点+自动轮播</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">indicator-dots</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/bestplayers.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/lpl.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/jumpfly.png<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>indicator-dots=”true”   是否显示小圆点    vertical表示纵置，默认下方横置</p><p>autoplay=”true”            是否自动播放</p></blockquote><p><strong>坑点：</strong>属性里面”false”解析是按照es语法解析—字符串”false”解析为true（boolean）</p><p>正确使用：<code>indicator-dots="{{false}}"</code>   使用<strong>模板语法解析</strong>！！！</p><p>建议：小程序中书写boolean变量属性—-习惯性加上<code>{{}}</code></p><p>true逻辑简写：直接写属性不写属性值表示true逻辑！</p><h4 id="10-小程序–数据绑定"><a href="#10-小程序–数据绑定" class="headerlink" title="10.小程序–数据绑定"></a>10.小程序–数据绑定</h4><ul><li>单向数据绑定有两种方式</li></ul><ol><li>data对象中初始化数据</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*** 页面的初始数据*/</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token string">'2020'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>生命周期函数中<code>this.setData</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**   * 生命周期函数--监听页面加载   */</span><span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token string">"2020"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>data中没有的数据项页面加载之后默认添加至data中</li><li>已存在的数据项，进行修改</li></ol></blockquote><h4 id="11-小程序–生命周期函数"><a href="#11-小程序–生命周期函数" class="headerlink" title="11.小程序–生命周期函数"></a>11.小程序–生命周期函数</h4><img data-src="/2021/04/23/xiao-cheng-xu/page-lifecycle.2e646c86.png" class="" title="img"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment">//生命周期函数--监听页面加载</span>  <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//页面加载前调用</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//生命周期函数--监听页面初次渲染完成</span>  <span class="token function-variable function">onReady</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//页面</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//生命周期函数--监听页面显示</span>  <span class="token function-variable function">onShow</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//页面首次展示;每次切前台触发</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//生命周期函数--监听页面隐藏</span>  <span class="token function-variable function">onHide</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//切后台，触发</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//生命周期函数--监听页面卸载</span>  <span class="token function-variable function">onUnload</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//页面销毁前触发</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精确定时器</title>
      <link href="2021/04/20/jing-que-ding-shi-qi/"/>
      <url>2021/04/20/jing-que-ding-shi-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><img data-src="/2021/04/20/jing-que-ding-shi-qi/1425041883_52_w1024_h768.png" class="" title="js线程"><p>了解过js调度的应该都明白，js中定时器不是精确的延时，这个延时受到服务端传送延时，前端渲染和其他事件阻塞的影响。那么，我们应该怎样实现相对精确的计时呢？</p><a id="more"></a><h4 id="先来看一下倒计时演示"><a href="#先来看一下倒计时演示" class="headerlink" title="先来看一下倒计时演示"></a>先来看一下倒计时演示</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定时器测试</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/04/20/jing-que-ding-shi-qi/image-20210420103459713.png" class="" title="test1"><blockquote><p>道理来说，每一次输出应该都是0；但是实际输出就反映了，我们说到的定时器不精确的问题。</p><p>结论：由于代码执行占用时间和其他事件阻塞原因，导致有些事件执行延迟了几ms，但影响很微</p></blockquote><ul><li><strong>增加一段阻塞代码</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//占用线程事件</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定时器测试</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/04/20/jing-que-ding-shi-qi/image-20210420103840751.png" class="" title="test2"><blockquote><p>结论：由于加了很占线程的阻塞事件，导致定时器事件每次执行延迟越来越严重。</p></blockquote><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>考虑，正常思路，没有阻塞事件，下面设置好的定时器应该每隔1s执行一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现阻塞事件定时器，隔1000+ms才执行一次，要想精确实现，必须<strong>获取阻塞时间</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> interval <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>  ms <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token comment">//从服务器和活动开始时间计算出的时间差，这里测试用50000ms</span>  count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ms <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timeCounter <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>countDownStart<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>setInterval是一段阻塞代码。然后，我们分别定义了interval作为定时器的执行时间</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countDownStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> offset <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>startTime <span class="token operator">+</span> count <span class="token operator">*</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> nextTime <span class="token operator">=</span> interval <span class="token operator">-</span> offset<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nextTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ms <span class="token operator">-=</span> interval<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"误差："</span> <span class="token operator">+</span> offset <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    timeCounter <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>countDownStart<span class="token punctuation">,</span> nextTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>offset用来记录阻塞导致延误的时间是多少</p><p>nextTime代表offset和interval的差距，根据nextTime修改定时器timeCounter的执行时间</p><ul><li>如果上一次执行过程中因为阻塞延误了100ms，那么下一次就提前100ms启动定时器</li><li>如果nextTime&lt;0，即延误超过1s，那么将即刻启动定时器</li></ul></blockquote><img data-src="/2021/04/20/jing-que-ding-shi-qi/image-20210420105308836.png" class="" title="test3"><ul><li><p>做100%精确的倒计时很难，但做到相对比较准确是可以的。</p></li><li><p>在倒计时功能开发中，有几点总结：</p></li></ul><ol><li><p>要了解好js单线程工作原理；</p></li><li><p>清楚了解服务器系统时间传送到前端的流程；</p></li><li><p>了解前端渲染和线程阻塞造成的时间误差</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS面试</title>
      <link href="2021/04/14/css-mian-shi/"/>
      <url>2021/04/14/css-mian-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="1-如何实现0-5px边框"><a href="#1-如何实现0-5px边框" class="headerlink" title="1.如何实现0.5px边框"></a>1.如何实现0.5px边框</h4><ul><li>利用缩放<code>transform: scale(0.5, 0.5)</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>边框0.5px实现方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">      <span class="token selector">.container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0px auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">.border-scale</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">.border-scale:after</span> <span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token comment">/* background-color: #f00; */</span>        <span class="token comment">/* height设为1px，用background-color效果是一样的*/</span>        <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #f00<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>方案一：使用缩放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-scale<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>原理： 在Y轴方向上，压缩一半。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>思路二：<code>background-image: linear-gradient( , , )</code></p></blockquote><ul><li>拓展：四条边框</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>边框0.5px实现方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">      <span class="token selector">.container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0px auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">.border-all</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">.border-all:after</span> <span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #f00<span class="token punctuation">;</span>        //原点设定！！！        <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>拓展：四周全是0.5px的线条的话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-all<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        这是实现一个盒子四周0.5px的做法，z-index，可以根据不同需求来调整使用，如果可以的话，不使用也是可以的。      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配</title>
      <link href="2021/04/08/yi-dong-duan-gua-pei/"/>
      <url>2021/04/08/yi-dong-duan-gua-pei/</url>
      
        <content type="html"><![CDATA[<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><h3 id="适配前的问题"><a href="#适配前的问题" class="headerlink" title="适配前的问题"></a>适配前的问题</h3><ul><li>每个设备的<strong>物理像素</strong>大小都是固定的，根据<strong>设备分辨率</strong>而定</li><li>分辨率越来越大（物理像素越小），难道我们的图片显示就越来越小嘛？</li></ul><p>引出<strong>逻辑分辨率</strong>，设备像素比（<strong>dpr</strong>）</p><ul><li><strong>1px边框问题</strong>？不同浏览器不同</li></ul><blockquote><p><strong>transform: scale(0.5) 方案</strong></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 2倍屏 */</span>@media only screen <span class="token function">and</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">-</span>webkit<span class="token operator">-</span>min<span class="token operator">-</span>device<span class="token operator">-</span>pixel<span class="token operator">-</span>ratio<span class="token operator">:</span> <span class="token number">2.0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span>border<span class="token operator">-</span>bottom<span class="token operator">:</span><span class="token operator">:</span>after <span class="token punctuation">{</span>        <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transform<span class="token operator">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 3倍屏 */</span>@media only screen <span class="token function">and</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">-</span>webkit<span class="token operator">-</span>min<span class="token operator">-</span>device<span class="token operator">-</span>pixel<span class="token operator">-</span>ratio<span class="token operator">:</span> <span class="token number">3.0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span>border<span class="token operator">-</span>bottom<span class="token operator">:</span><span class="token operator">:</span>after <span class="token punctuation">{</span>        <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transform<span class="token operator">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h3><ul><li>移动端Web页面，即常说的H5页面、手机页面、webview页面</li><li>在不同尺寸的手机设备上，页面“相对性的达到合理的展示（自适应）”或者“保持统一效果的等比缩放</li></ul><blockquote><p>viewport(scale = 1/dpr)</p><p>rem</p><p>flex</p><p>vm/vh</p></blockquote><h4 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h4><p>配置视口, 简单的一个meta标签即可！</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img data-src="/2021/04/08/yi-dong-duan-gua-pei/170e782c3e72b843" class="" title="img"><p>想要视觉效果好，视口宽度必定无限接近于理想视口。</p><p>上述的meta设置，就是我们的理想设置，他规定了我们的视口宽度为屏幕宽度，初始缩放比例为1，就是初始时候我们的视觉视口就是理想视口！</p><h4 id="解决适配方法"><a href="#解决适配方法" class="headerlink" title="解决适配方法"></a>解决适配方法</h4><h5 id="1-rem适配"><a href="#1-rem适配" class="headerlink" title="1.rem适配"></a>1.rem适配</h5><p>rem是CSS3新增的一个相对单位</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//假设我给根元素的大小设置为14pxhtml</span><span class="token punctuation">{</span>    font-size：14px<span class="token punctuation">}</span><span class="token selector">//那么我底下的p标签如果想要也是14像素p</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span>1rem<span class="token punctuation">}</span>//如此即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rem 是相对于html节点的font-size来做计算的。所以在页面初始话的时候给根元素设置一个font-size，接下来的元素就根据rem来布局，这样就可以保证在页面大小变化时，布局可以自适应</p><p>这是一个过渡方案，本质上，<strong>用户使用更大的屏幕，是想看到更多的内容，而不是更大的字</strong>。</p><h5 id="2-vm，vh布局"><a href="#2-vm，vh布局" class="headerlink" title="2.vm，vh布局"></a>2.vm，vh布局</h5><p>vh、vw方案即将视觉视口宽度 window.innerWidth和视觉视口高度 window.innerHeight 等分为 100 份。</p><p>转换px不免有误差，工程化的今天，webpack解析css 的时候用postcss-loader 有个postcss-px-to-viewport能自动实现px到vw的转化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    loader<span class="token operator">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        browsers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'last 5 versions'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-px-to-viewport'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        viewportWidth<span class="token operator">:</span> <span class="token number">375</span><span class="token punctuation">,</span> <span class="token comment">//视口宽度（数字)</span>        viewportHeight<span class="token operator">:</span> <span class="token number">1334</span><span class="token punctuation">,</span> <span class="token comment">//视口高度（数字）</span>        unitPrecision<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//设置的保留小数位数（数字）</span>        viewportUnit<span class="token operator">:</span> <span class="token string">'vw'</span><span class="token punctuation">,</span> <span class="token comment">//设置要转换的单位（字符串）</span>        selectorBlackList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ignore'</span><span class="token punctuation">,</span> <span class="token string">'.hairlines'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//不需要进行转换的类名（数组）</span>                minPixelValue<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//设置要替换的最小像素值（数字）</span>                mediaQuery<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//允许在媒体查询中转换px（true/false）</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、px为主，vx和vxxx（vw-vh-vmax-vmin）为辅，搭配一些flex（推荐）"><a href="#3、px为主，vx和vxxx（vw-vh-vmax-vmin）为辅，搭配一些flex（推荐）" class="headerlink" title="3、px为主，vx和vxxx（vw/vh/vmax/vmin）为辅，搭配一些flex（推荐）"></a>3、px为主，vx和vxxx（vw/vh/vmax/vmin）为辅，搭配一些flex（推荐）</h5><p>推荐使用此种方案，是由于我们要去考虑用户的需求，<strong>用户之所以去买大屏手机，不是为了看到更大的字，而是为了看到更多的内容</strong>，这样直接使用px是最明智的方案</p><h4 id="移动端适配流程"><a href="#移动端适配流程" class="headerlink" title="移动端适配流程"></a>移动端适配流程</h4><ol><li><p>在head 设置width=device-width的viewport</p></li><li><p>在css中使用px</p></li><li><p>在适当的场景使用flex布局，或者配合vw进行自适应</p></li><li><p>在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p></li><li><p>在跨设备类型如果交互差异太大的情况，考虑分开项目开发</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同源策略与跨域</title>
      <link href="2021/03/30/tong-yuan-ce-lue-yu-kua-yu/"/>
      <url>2021/03/30/tong-yuan-ce-lue-yu-kua-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>使用fetch请求另一个网站时，请求可能会失败</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//example</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fetch 失败</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>核心概念  源：协议/域/端口</p><p>同源策略：</p><ul><li>限制Cookie，loaclStorage，indexedDB读取</li><li>DOM无法获取</li><li>AJAX请求无效（可以发送，但浏览器会拒绝接受响应）</li></ul></blockquote><p>那么怎么才能绕开同源协议呢？</p><a id="more"></a><h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2><p>(Cross-site request forgery), 即跨站请求伪造；黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户<strong>目前的登录状态</strong>发起跨站请求。</p><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul><blockquote><p>b.com怎么发送跨域请求呢？</p><ul><li>script/iframe/img等标签却是支持跨域的</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">//实例1：银行转账&lt;iframe src="http://a.com/app/transferFunds?amount=1500&amp;destinationAccount=... &gt;//实例2：路由器&lt;img src=”http://192.168.1.1/admin/config/outsideInterface?nexthop=123.45.67.89” alt=”pwned” height=”1” width=”1”/&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="防护策略"><a href="#防护策略" class="headerlink" title="防护策略"></a><strong>防护策略</strong></h4><ul><li>针对不明外域的访问<ul><li>同源检测</li><li>Samesite Cookie</li></ul></li><li>提交时要求附有本域才能获得的信息<ul><li>CSRF Token</li><li>双重Cookie验证</li></ul></li></ul><h4 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h4><p>如何判断请求是来自外域呢？</p><p>HTTP协议中，每一个异步请求都会携带两个Header，用来标记来源域名</p><ul><li>Origin Header</li><li>Referer Header</li></ul><p>这两个header在浏览器发起请求时，多时情况自动带上，并且前端不能自定义内容，服务器可以解析这两个Header中的域名，确定来源域。</p><h5 id="使用Origin-Header确定来源域名"><a href="#使用Origin-Header确定来源域名" class="headerlink" title="使用Origin Header确定来源域名"></a>使用Origin Header确定来源域名</h5><p>在部分与CSRF有关的请求中，请求的Header中会携带Origin字段。字段内包含请求的协议+域名（不包含path及query）</p><p>如果Origin存在就使用Origin中的字段确认来源域名</p><p>Origin不存在的特殊情况</p><ul><li>IE11同源策略：不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。（<strong>Trust Zones</strong>，<strong>Port</strong>）</li><li>302重定向：浏览器肯定不希望将Origin泄露到新的服务器上。</li></ul><h5 id="使用Referer-Header确定来源域名"><a href="#使用Referer-Header确定来源域名" class="headerlink" title="使用Referer Header确定来源域名"></a>使用Referer Header确定来源域名</h5><p>在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源页面地址。</p><p>当然Referer值由浏览器提供，不同浏览器标准不一，安全性依赖于第三方（浏览器），理论上是不安全的，部分情况攻击者还可以隐藏，甚至修改自己的请求的referer。</p><p>新版Referer Policy规定五种Referer策略（no-Referrer，no-Referrer-when-downgrade，**(same or strict) origin**，(strict) origin-when-crossorigin，unsafe-url）</p><p>需要把策略设置为same-origin：对于同源的会发送Referer，值为Host不带path；跨域的不携带。</p><p>设置Referer策略有三种方法</p><ol><li>在CSP中设定</li><li>页面头部增加meta标签</li><li>a标签增加refererpolicy属性</li></ol><p>另外有些情况referer不可信：</p><ol><li>IE6,7使用IE6、7下使用window.location.href=url进行界面的跳转，会丢失Referer。</li><li>IE6、7下使用window.open，也会缺失Referer。</li><li>HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失</li></ol><h5 id="无法确认来源域名"><a href="#无法确认来源域名" class="headerlink" title="无法确认来源域名"></a><strong>无法确认来源域名</strong></h5><ol><li>两者都不存在，建议直接阻止</li><li>CSRF Token二次检查</li></ol><h5 id="如何阻止外域请求"><a href="#如何阻止外域请求" class="headerlink" title="如何阻止外域请求"></a>如何阻止外域请求</h5><p>通过Header的验证，我们可以知道发起请求的来源域名，这些来源域名可能是网站本域，或者子域名，或者有授权的第三方域名，又或者来自不可信的未知域名。</p><p>凭借域名可信度就可以完全判断嘛？</p><p>当然不可以，对于搜索引擎搜索出来的第三方页面请求。就可能被当做CSRF攻击，所以需要过滤掉页面请求，但这也成为了攻击者的空子。</p><pre class="line-numbers language-none"><code class="language-none">GET https://example.com/addComment?comment=XXX&amp;dest=orderId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很多网站经常把主文档GET请求挂上参数来实现产品功能，但是这样做对于自身来说是存在安全风险的</p><p>当然大多数CSRF攻击都是来自第三方域名，但不排除本域，攻击者有权限在本域发出评论（链接，图片统称UGC）同源策略无法防护。</p><p>综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。</p><h4 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h4><p>针对攻击者无法获取Cookie中的信息，只是利用而已，想到我们可以要求所有用户请求都携带一个CSRF攻击者无法获取到的Token。服务器校验Token就可以实现防护。</p><h5 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h5><ol><li><p>将CSRF Token输出到页面中</p><p>首先，用户打开页面的时候，<strong>服务器</strong>需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合；安全起见Token肯定不能存放在Cookie中，而应该存在服务器<strong>Session中</strong>。之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token；对于动态生成的HTML代码需要程序员手动添加Token。</p></li><li><p>页面提交的请求携带这个Token</p><p>对于GET请求，Token将附在请求地址之后，这样URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E8%80%8C%E5%AF%B9%E4%BA%8E">http://url?csrftoken=tokenvalue而对于</a> POST 请求来说，要在 form 的最后加上：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”hidden”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”csrftoken”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”tokenvalue”/</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，就把Token以参数的形式加入请求了</p></li><li><p>服务器验证Token是否正确</p><p>当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密<strong>字符串一致且时间未过期</strong>，那么这个Token就是有效的。</p></li></ol><p>安全性有加强，但这种方法比较麻烦就是将Token以参数形式加入请求。</p><h5 id="分布式校验"><a href="#分布式校验" class="headerlink" title="分布式校验"></a>分布式校验</h5><p>在大型网站中，使用Session存储CSRF Token会带来很大的压力。</p><p>用户发起的HTTP请求通常要经过像Ngnix之类的负载均衡器之后，再路由到具体的服务器上，由于Session默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次HTTP请求可能会先后落到不同的服务器上，导致后面发起的HTTP请求无法拿到之前的HTTP请求存储在服务器中的Session数据，从而使得Session机制在分布式环境下失效，因此在分布式集群中CSRF Token需要存储在<strong>Redis之类的公共存储空间</strong>。</p><p>由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式；计算出来，而不是读取存储。通常是使用UserID、时间戳和随机数，通过加密的方法生成</p><blockquote><p>验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。</p><p>这就是为什么很多银行等网站会要求已经登录的用户在转账时再次输入密码</p></blockquote><h4 id="双重Cookie验证"><a href="#双重Cookie验证" class="headerlink" title="双重Cookie验证"></a>双重Cookie验证</h4><p>会话中存储CSRF Token比较繁琐，而且不能在通用的拦截上统一处理所有的接口</p><p>另一种防御措施是使用双重提交Cookie。利用CSRF攻击不能获取到用户Cookie的特点，我们可以<strong>要求Ajax和表单请求携带一个Cookie中的值</strong></p><p>流程：</p><ul><li>在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如<code>csrfcookie=v8g9e4ksfhw</code>）。</li><li>在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例<code>POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw</code>）。</li><li>后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。</li></ul><p><strong>用双重Cookie防御CSRF的优点：</strong></p><ul><li>无需使用Session，适用面更广，易于实施。</li><li>Token储存于客户端中，不会给服务器带来压力。</li><li>相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。</li></ul><p><strong>缺点：</strong></p><ul><li>Cookie中增加了额外的字段。</li><li>如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。</li><li>难以做到子域名的隔离。</li><li>为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</li></ul><h4 id="Samesite-Cookie属性"><a href="#Samesite-Cookie属性" class="headerlink" title="Samesite Cookie属性"></a>Samesite Cookie属性</h4><p>为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为<strong>Set-Cookie响应头新增Samesite属性</strong>，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，</p><p><code>SameSite</code>可以设置为三个值，<code>Strict</code>、<code>Lax</code>和<code>None</code>。</p><p><strong>a.</strong> 在<code>Strict</code>模式下，浏览器完全禁止第三方请求携带Cookie。比如请求<code>sanyuan.com</code>网站只能在<code>sanyuan.com</code>域名当中请求才能携带 Cookie，在其他网站请求都不能。</p><p><strong>b.</strong> 在<code>Lax</code>模式，就宽松一点了，但是只能在 <code>get 方法提交表单</code>况或者<code>a 标签发送 get 请求</code>的情况下可以携带 Cookie，其他情况均不能。</p><p><strong>c.</strong> 在<code>None</code>模式下，也就是默认模式，请求会自动携带上 Cookie</p><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><h4 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP"></a>1. JSONP</h4><p>script<code>可以具有任何域的</code>src<code>例如 &lt;script src="http://another.com/…"&gt;</code></p><p><strong>实例：动态获取天气数据</strong></p><p>假设在我们的网站，需要以这种方式从 <code>http://another.com</code> 网站获取数据，例如天气：</p><ol><li><p>首先，我们先声明一个全局函数来接收数据，例如 <code>gotWeather</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 声明处理天气数据的函数</span><span class="token keyword">function</span> <span class="token function">gotWeather</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> humidity <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">temperature: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>temperature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, humidity: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>humidity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后我们创建一个特性（attribute）为 <code>src="http://another.com/weather.json?callback=gotWeather"</code> 的 <code>&lt;script&gt;</code> 标签，使用我们的函数名作为它的 <code>callback</code> URL-参数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://another.com/weather.json?callback=gotWeather</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>远程服务器 <code>another.com</code> 动态生成一个脚本，该脚本调用 <code>gotWeather(...)</code>，发送它想让我们接收的数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 我们期望来自服务器的回答看起来像这样：</span><span class="token function">gotWeather</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  temperature<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  humidity<span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当远程脚本加载并执行时，<code>gotWeather</code> 函数将运行，并且因为它是我们的函数，我们就有了需要的数据。</p></li></ol><h4 id="2-跨域资源共享（CORS）"><a href="#2-跨域资源共享（CORS）" class="headerlink" title="2. 跨域资源共享（CORS）"></a>2. 跨域资源共享（CORS）</h4><p>有两种类型的跨源请求：</p><ol><li>简单的请求</li><li>所有其他请求</li></ol><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><p>一个 简单的请求是指满足以下两个条件的请求：</p><ol><li><p>简单的方法：GET，POST 或 HEAD</p></li><li><p>简单的 header</p><p>—— 仅允许自定义下列 header：</p><ul><li><code>Accept</code>，</li><li><code>Accept-Language</code>，</li><li><code>Content-Language</code>，</li><li><code>Content-Type</code> 的值为 <code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code> 或 <code>text/plain</code>。</li></ul></li></ol><h5 id="用于简单请求的CORS"><a href="#用于简单请求的CORS" class="headerlink" title="用于简单请求的CORS"></a>用于简单请求的CORS</h5><p>如果一个请求是跨源的，浏览器始终会向其添加 <code>Origin</code> header</p><p>例如，如果我们从 <code>https://javascript.info/page</code> 请求 <code>https://anywhere.com/request</code>，请求的 header 将会如下：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">GET /request<span class="token header-name keyword">Host:</span> anywhere.com<span class="token header-name keyword">Origin:</span> https://javascript.info...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所见，<code>Origin</code> 包含了确切的源（domain/protocol/port），没有路径。</p><p>服务器可以检查 <code>Origin</code>，如果同意接受这样的请求，就会在响应中添加一个特殊的 header <code>Access-Control-Allow-Origin</code>。该 header 包含了允许的源（在我们的示例中是 <code>https://javascript.info</code>），或者一个星号 <code>*</code>。然后响应成功，否则报错。</p><img data-src="/2021/03/30/tong-yuan-ce-lue-yu-kua-yu/image-20210404150641516.png" class="" title="简单请求"><p>响应示例</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">200 OK<span class="token header-name keyword">Content-Type:</span>text/html; charset=UTF-8<span class="token header-name keyword">Access-Control-Allow-Origin:</span> https://javascript.info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于跨源请求，默认情况下，JavaScript 只能访问“简单” response header：</p><ul><li><code>Cache-Control</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code></li><li><code>Expires</code></li><li><code>Last-Modified</code></li><li><code>Pragma</code></li></ul><p>访问任何其他 response header 都将导致 error。</p><p>要授予 JavaScript 对任何其他 response header 的访问权限，服务器必须发送 <code>Access-Control-Expose-Headers</code> header。它包含一个以逗号分隔的应该被设置为可访问的非简单 header 名称列表。</p><p>例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">200 OK<span class="token header-name keyword">Content-Type:</span>text/html; charset=UTF-8<span class="token header-name keyword">Content-Length:</span> 12345<span class="token header-name keyword">API-Key:</span> 2c9de507f2c54aa1<span class="token header-name keyword">Access-Control-Allow-Origin:</span> https://javascript.info<span class="token header-name keyword">Access-Control-Expose-Headers:</span> Content-Length,API-Key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这种 <code>Access-Control-Expose-Headers</code> header，此脚本就被允许读取响应的 <code>Content-Length</code> 和 <code>API-Key</code> header。</p><h5 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h5><p>我们可以使用任何 HTTP 方法：不仅仅是 <code>GET/POST</code>，也可以是 <code>PATCH</code>，<code>DELETE</code> 及其他。</p><p>它发送这类请求前，会先发送“预检（preflight）”请求来请求许可。</p><img data-src="/2021/03/30/tong-yuan-ce-lue-yu-kua-yu/image-20210404151218169.png" class="" title="非简单请求"><h6 id="Step-1-预检请求（preflight-request）"><a href="#Step-1-预检请求（preflight-request）" class="headerlink" title="Step 1 预检请求（preflight request）"></a>Step 1 预检请求（preflight request）</h6><p>在发送我们的请求前，浏览器会自己发送如下所示的预检请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">OPTIONS /service.json<span class="token header-name keyword">Host:</span> site.com<span class="token header-name keyword">Origin:</span> https://javascript.info<span class="token header-name keyword">Access-Control-Request-Method:</span> PATCH<span class="token header-name keyword">Access-Control-Request-Headers:</span> Content-Type,API-Key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法：<code>OPTIONS</code>。</li><li>路径 —— 与主请求完全相同：<code>/service.json</code>。</li><li>特殊跨源头：<ul><li><code>Origin</code> —— 来源。</li><li><code>Access-Control-Request-Method</code> —— 请求方法。</li><li><code>Access-Control-Request-Headers</code> —— 以逗号分隔的“非简单” header 列表。</li></ul></li></ul><h6 id="Step-2-预检响应（preflight-response）"><a href="#Step-2-预检响应（preflight-response）" class="headerlink" title="Step 2 预检响应（preflight response）"></a>Step 2 预检响应（preflight response）</h6><p>服务应响应状态 200 和 header：</p><ul><li><code>Access-Control-Allow-Origin: https://javascript.info</code></li><li><code>Access-Control-Allow-Methods: PATCH</code></li><li><code>Access-Control-Allow-Headers: Content-Type,API-Key</code>。</li></ul><p>这将允许后续通信，否则会触发错误。</p><p>如果服务器将来期望其他方法和 header，则可以通过将这些方法和 header 添加到列表中来预先允许它们。</p><p>例如，此响应还允许 <code>PUT</code>、<code>DELETE</code> 以及其他 header：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">200 OK<span class="token header-name keyword">Access-Control-Allow-Origin:</span> https://javascript.info<span class="token header-name keyword">Access-Control-Allow-Methods:</span> PUT,PATCH,DELETE<span class="token header-name keyword">Access-Control-Allow-Headers:</span> API-Key,Content-Type,If-Modified-Since,Cache-Control<span class="token header-name keyword">Access-Control-Max-Age:</span> 86400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，浏览器可以看到 <code>PATCH</code> 在 <code>Access-Control-Allow-Methods</code> 中，<code>Content-Type,API-Key</code> 在列表 <code>Access-Control-Allow-Headers</code> 中，因此它将发送主请求。</p><p>如果 <code>Access-Control-Max-Age</code> 带有一个表示秒的数字，则在给定的时间内，预检权限会被缓存。上面的响应将被缓存 86400 秒，也就是一天。在此时间范围内，后续请求将不会触发预检。假设它们符合缓存的配额，则将直接发送它们。</p><h6 id="Step-3-实际请求（actual-request）"><a href="#Step-3-实际请求（actual-request）" class="headerlink" title="Step 3 实际请求（actual request）"></a>Step 3 实际请求（actual request）</h6><p>预检成功后，浏览器现在发出主请求。这里的算法与简单请求的算法相同。</p><p>主请求具有 <code>Origin</code> header（因为它是跨源的）：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">PATCH /service.json<span class="token header-name keyword">Host:</span> site.com<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">API-Key:</span> secret<span class="token header-name keyword">Origin:</span> https://javascript.info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Step-4-实际响应（actual-response）"><a href="#Step-4-实际响应（actual-response）" class="headerlink" title="Step 4 实际响应（actual response）"></a>Step 4 实际响应（actual response）</h6><p>服务器不应该忘记在主响应中添加 <code>Access-Control-Allow-Origin</code>。成功的预检并不能免除此要求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">Access-Control-Allow-Origin:</span> https://javascript.info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，JavaScript 可以读取主服务器响应了。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机三级</title>
      <link href="2021/03/27/ji-suan-ji-san-ji/"/>
      <url>2021/03/27/ji-suan-ji-san-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><blockquote><p>不会还有人在为计算机三级熬夜刷题吧？</p><p>刚刚8点场考完的童鞋告诉你，只需要一晚（前提学过计网）</p><ol><li>选择题边刷边总结（下面是我百度加手打的，选择题宝典！！！）</li><li>大题做一个就行（真离谱，清一色的题，变都不变）</li></ol><p>祝大家好运：)</p></blockquote><a id="more"></a><h4 id="选择题："><a href="#选择题：" class="headerlink" title="选择题："></a>选择题：</h4><ol><li><h5 id="光纤通信标准："><a href="#光纤通信标准：" class="headerlink" title="光纤通信标准："></a>光纤通信标准：</h5><h5 id="OC-3（STM-1）：155-52Mbps；OC-12-622-08Mbps"><a href="#OC-3（STM-1）：155-52Mbps；OC-12-622-08Mbps" class="headerlink" title="OC-3（STM-1）：155.52Mbps；OC-12:622.08Mbps"></a>OC-3（STM-1）：155.52Mbps；OC-12:622.08Mbps</h5></li><li><p>求交换机总带宽；求上联端口带宽（全双工要乘以2，<strong>上联一般是下联的1/20</strong>）</p></li><li><p>系统可用性和停机时间（99.99%–53分钟）</p></li><li><p>写地址块的子网掩码（看斜线后面的数字）（/11–255.224.0.0）</p></li><li><h5 id="网络地址转换（NAT转换表）"><a href="#网络地址转换（NAT转换表）" class="headerlink" title="网络地址转换（NAT转换表）"></a>网络地址转换（NAT转换表）</h5><p>（<strong>SA</strong>：内部本地地址–内部全局地址）（<strong>DA</strong>：外部本地地址–外部全局地址）不仅可以解决IP地址不足的问题，还可以避免外部攻击（专有网络中的专有IP想要访问因特网的问题）</p></li><li><h5 id="IP地址聚合"><a href="#IP地址聚合" class="headerlink" title="IP地址聚合"></a>IP地址聚合</h5><p>（无类域间路由CIDR，超网技术）ip表示为：网络前缀+主机号</p><pre class="line-numbers language-none"><code class="language-none">//计算聚合后的地址数：可用主机数例：200.16.23.0/20 其中前20位为网络前缀，后12位是主机号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>路由表更新（RIP路由协议，距离向量算法，IGP内部网关协议，动态路由）</p></li><li><h5 id="IPV6简化表示："><a href="#IPV6简化表示：" class="headerlink" title="IPV6简化表示："></a>IPV6简化表示：</h5><p>双冒号代表连续的0，且只有一个（0510就是510），128位为8段！！！；不能把一个位段中的有效0压缩</p></li><li><h5 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h5><ul><li>目的地址和传递下一个mac地址（目的地址不看中间流程，看数据接收方ip，mac地址看下一个传送点）</li><li>数据包的源IP地址（数据起始发送的IP）和源MAC地址（上一个转发节点MAC地址）</li></ul></li><li><h5 id="三种备份"><a href="#三种备份" class="headerlink" title="三种备份"></a>三种备份</h5><pre class="line-numbers language-none"><code class="language-none">备份速度从快到慢：增量备份&gt;差异备份&gt;完全备份；恢复速度（占用空间）（恢复数据使用最少备份数）：反过来增量备份和差异备份区别（后者只是和前一次全备份作比较而言的）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><h5 id="弹性分组环RPR：优化协议，用于城域网和广域网"><a href="#弹性分组环RPR：优化协议，用于城域网和广域网" class="headerlink" title="弹性分组环RPR：优化协议，用于城域网和广域网"></a>弹性分组环RPR：优化协议，用于城域网和广域网</h5><ul><li>每一个节点都使用<strong>SRP</strong>公平算法</li><li>与FDDI环一样使用<strong>双环</strong>结构</li><li><strong>传统FDDI环</strong>，源节点到目的节点发送数据（数据帧由<strong>源节点在环中回收</strong>）</li><li><strong>RPR环</strong>，源节点到目的节点发送数据（数据帧由<strong>目的节点在环中回收</strong>）</li><li>RPR环采用自愈环设计思路，可以在<strong>50ms</strong>内隔离节点和光纤段</li><li>两个RPR节点的裸光纤<strong>最大长度100公里</strong></li><li>RPR<strong>外环顺</strong>时针，<strong>内环逆</strong>时针，<strong>都</strong>可以用于传输分组和控制分组</li></ul></li><li><h5 id="无线接入技术（W开头，Ad-hoc特殊）"><a href="#无线接入技术（W开头，Ad-hoc特殊）" class="headerlink" title="无线接入技术（W开头，Ad hoc特殊）"></a>无线接入技术（W开头，Ad hoc特殊）</h5></li><li><h5 id="城域网（MAN）："><a href="#城域网（MAN）：" class="headerlink" title="城域网（MAN）："></a>城域网（MAN）：</h5><ul><li>核心层（提供高带宽的业务承载和传输，提供访问Internet所需的路由服务）</li><li>汇聚层：会接接入层的用户流量，进行数据处理，转发到核心交换层或在本地进行路由处理</li><li>接入层</li></ul><p>城域网QoS技术：<strong>RSVP</strong>(资源预留)，DIFFSERV(区分服务)，MPLS(多协议标签交换)</p></li><li><h5 id="接入技术特征："><a href="#接入技术特征：" class="headerlink" title="接入技术特征："></a>接入技术特征：</h5><ul><li><strong>ADSL</strong>使用一对铜双绞线，非对称技术，上行速度64kbps-640kbps，下行速度500-6Mbps；</li><li>采用ADSL可以通过PSTN接入internet</li><li>Cable Modom（电缆调制解调器）利用<strong>频分复用</strong>将信道分为上行和下行<ul><li>将计算机与有限电视同轴线连接</li></ul></li><li>光纤传输距离可<strong>100KM</strong>以上</li></ul></li><li><h5 id="服务器技术"><a href="#服务器技术" class="headerlink" title="服务器技术"></a>服务器技术</h5><ul><li>热插拔：不切断电源的情况下，更换硬盘等</li><li>集群技术：如果一台计算机出现故障，不会影响正常服务，但会影响性能</li><li>磁盘性能：存储容量+I/O速度</li><li>服务器总体性能：CPU数量，CPU主频，系统内存，网络速度</li></ul></li><li><h5 id="综合布线"><a href="#综合布线" class="headerlink" title="综合布线"></a>综合布线</h5><ul><li>双绞线扭绞：减少电磁辐射干扰</li><li><strong>嵌入式安装插座</strong>：用来连接双绞线</li><li><strong>多介质插座</strong>：连接铜缆和光纤</li><li>新建筑群通常采用嵌入式（暗装）信息插座；老建筑（明装）</li><li><strong>建筑群子系统</strong>：架空布线，直埋，巷道布线，地下管道布线等（双绞线，光缆，电器保护设备）</li></ul></li><li><h5 id="BGP协议（边界网关协议）："><a href="#BGP协议（边界网关协议）：" class="headerlink" title="BGP协议（边界网关协议）："></a><strong>BGP协议</strong>（边界网关协议）：</h5><p>两个自治系统之间使用的协议</p><ul><li>交换路由节点不小于自治系统数</li><li>BGP发言人使用<strong>TCP</strong>和其他自治系统发言人通信</li><li>BGP发言人通过<strong>update</strong>而不会死noticfication分组通知</li><li>两个BGP发言人需要<strong>周期性</strong>的交换keepalive确认相邻关系</li></ul></li><li><h5 id="RIP协议（基于距离向量的路由选择协议，内部）"><a href="#RIP协议（基于距离向量的路由选择协议，内部）" class="headerlink" title="RIP协议（基于距离向量的路由选择协议，内部）"></a>RIP协议（基于距离向量的路由选择协议，内部）</h5><ul><li>路由器周期性的向外发送路由刷新报文（V,D）</li></ul></li><li><h5 id="OSPF（内部网关协议）"><a href="#OSPF（内部网关协议）" class="headerlink" title="OSPF（内部网关协议）"></a>OSPF（内部网关协议）</h5><ul><li>一个区域内有<strong>32位</strong>标识符，区域内路由器<strong>不超过200</strong></li><li>通过划分区域提高路由更新收敛速度</li><li><strong>链路状态度量</strong>：费用，距离，延时，带宽</li><li>采用<strong>洪泛</strong>交换链路状态信息</li></ul></li><li><h5 id="ICMP：控制报文协议"><a href="#ICMP：控制报文协议" class="headerlink" title="ICMP：控制报文协议"></a>ICMP：控制报文协议</h5><ul><li>报文类别：0（Echo应答）3（目标不可达）5（重定向）<strong>11（超时）</strong>13（时间戳请求）</li></ul></li><li><h5 id="集线器，交换机，路由器"><a href="#集线器，交换机，路由器" class="headerlink" title="集线器，交换机，路由器"></a>集线器，交换机，路由器</h5><p>CSMA/CD主要适用以太网。 着眼冲突检测<br>CSMA/CA主要适用无线局域网。着眼冲突避免</p><table><thead><tr><th>设备</th><th>工作层</th><th>功能</th></tr></thead><tbody><tr><td>集线器</td><td>物理层</td><td>依据MAC地址，数据转发没针对性，<strong>广播</strong>！</td></tr><tr><td>交换机</td><td>数据链路层</td><td>依据MAC地址链接局域网中的电脑（独享带宽）；MAC和交换机端口对应关系的交换表</td></tr><tr><td>路由器</td><td>网络层</td><td>依据IP地址链接不同网络（共享带宽）</td></tr></tbody></table><p><strong>透明网桥</strong>：用在两个<strong>MAC层</strong>协议相同的网段之间的互联</p><p><strong>交换机：三种交换模式</strong></p><ul><li>快速转发直通式，交换机介绍到帧前14字节就立即转发数据帧</li><li>碎片丢弃式：缓存每个帧的前64字节，检查冲突过滤碎片</li><li>存储转发式：转发前将整个帧读取到内存中</li></ul><p>交换机：四种交换结构</p><ul><li>软件执行交换结构：早期使用，结构灵活，<strong>速度慢</strong>，端口多，性能低</li><li>矩阵交换结构：</li><li>总线交换结构</li><li>共享存储器交换结构</li></ul><p>路由器：</p><ul><li>高性能路由器（交换式结构），传统路由器（共享背板结构）</li><li>吞吐量：路由器的包转发能力（端口吞吐量，整机吞吐量）</li><li>包转发能力：端口数量，端口速率，包长度，包类型有关</li><li>丢包率：路由器超负荷工作能力的指标之一</li><li><strong>Loopback环</strong>回接口：由网络管理员分配一个IP作为路由器的管理地址，<strong>掩码255.255.255.255</strong></li></ul></li><li><h5 id="IEEE-802-11："><a href="#IEEE-802-11：" class="headerlink" title="IEEE 802.11："></a>IEEE 802.11：</h5><ul><li><p>三个物理层（两个扩频技术，一个红外传播规范）</p></li><li><p>无线标准定义传输速度：1mbps和2mbps可使用FHSS跳频和DSSS自序扩频；定义在<strong>2.4GHz</strong>的ISM波段</p></li><li><p>为解决“隐藏节点”问题：在MAC层引入新的RTS/CTS选项</p></li><li><p>802.11b最大容量33Mbps，速度提高到11Mbps</p><ul><li>点对点模式：无线网卡对无线网卡；最多256台；</li><li>基本模式：无线和有线并存；最多1024台</li></ul></li><li><p>802.11a（工作在5GHZ频段，最大容量432Mbps）和802.11g提速到54Mbps</p></li><li><p>802.11d是当前流行的STP（生成树协议）标准</p></li></ul></li><li><h5 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h5><ul><li><strong>同步信道速率64kbps，跳频速率1600次/s</strong></li><li>工作在2.402~2.48GHz的ISM频段</li><li>发射功率100mw时，最大传输距离100米；<strong>20dbm覆盖200米</strong></li></ul></li><li><h5 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h5><ul><li>端口号53的请求访问是DNS请求</li><li>根DNS不需要管理员手动配置</li><li>层次：根，顶级域，权威</li><li>缺省下，win2003没有预装DNS</li></ul></li><li><h5 id="DHCP服务器：动态主机配置，局域网"><a href="#DHCP服务器：动态主机配置，局域网" class="headerlink" title="DHCP服务器：动态主机配置，局域网"></a>DHCP服务器：动态主机配置，局域网</h5><ul><li>已经获得IP的DHCP客户执行<strong>ipconfig/release</strong>指令，释放已获得的地址租约（IP Adress和Subnet Mask都为0.0.0.0）</li><li>频繁改变位置并使用DHCP获取IP地址的DNS客户端：使用动态更新，减少手动管理</li></ul></li><li><h5 id="WWW服务器"><a href="#WWW服务器" class="headerlink" title="WWW服务器"></a>WWW服务器</h5><ul><li>网站性能选项：带宽限制选项限制该网站的可使用带宽；限制客户端使用微调框</li><li>建立web站点时，必须有一个主目录，也可以是虚拟的子目录</li><li>设置了默认页面后，访问时才会直接打开default页面；没有设置默认页面，需要提供首页内容的文件名</li><li>网站标识必须在网站选项卡中设置</li><li>使用IIS建立web站点：网站选项（<strong>网站标识</strong>，连接，启用日志）</li></ul></li><li><h5 id="Serv-U-FTP服务器"><a href="#Serv-U-FTP服务器" class="headerlink" title="Serv-U FTP服务器"></a>Serv-U FTP服务器</h5><ul><li><strong>初始状态下</strong>：没有密码，可以直接进入</li><li>FTP缺省端口号21，但有时也会被影响不能使用21，而更改别的端口</li><li><strong>创建新域时</strong>：添加用户时，用户名为“anonymous”的用户被系统自动判定为匿名用；输入域名可以是合格域名或其他任何描述</li><li>配置服务器IP地址时：<strong>空则代表服务器的所有IP地址</strong>（服务器使用多个地址时：服务器IP应该为空）</li><li>用户不能再FTP服务器中自行注册新用户（<strong>匿名用户由管理员加</strong>）</li><li>使用<strong>匿名用户登录时</strong>：密码需要是电子邮箱作为登录密码</li></ul></li><li><p>Wmail服务器</p><ul><li>支持基于web方式的访问和管理，需要<strong>先安装IIS</strong></li><li>在域名设置中可以修改域的参数，包括增删</li><li>系统设置中：修改邮件服务器的系统参数，（SMTP，邮件过滤，更改管理员密码）</li><li>快速向导设置：设置是否允许自行注册新用户</li><li>建立邮件路由，需要在DNS服务器中建立邮件服务器主机记录和邮件交换记录</li></ul></li><li><h5 id="可信计算机评估标准"><a href="#可信计算机评估标准" class="headerlink" title="可信计算机评估标准"></a>可信计算机评估标准</h5><p>四类七个级别，可信度由低到高</p><ul><li>D：<strong>最小保护</strong>，只有物理层面的保护</li><li>C1：<strong>自主保护</strong>，用户登录需要身份验证</li><li>C2：自主保护，具有审计和验证</li><li>B1：强制安全保护，强制访问控制，可以对主体客体安全标识进行管理</li><li>B2：结构保护：给所有计算机对象加一个安全标签，管理</li><li>B3：具备硬件支持的安全域分离措施</li><li>A1：对安全模型作形式化的证明</li></ul></li><li><h5 id="入侵防护系统"><a href="#入侵防护系统" class="headerlink" title="入侵防护系统"></a>入侵防护系统</h5><p>（H,N,A host，net，application）</p><ul><li>HIPS：基于主机的入侵系统，<strong>受保护的主机</strong></li><li>NIPS基于网络，布置在<strong>网络出口</strong></li><li>AIP基于应用，服务器<strong>前端</strong></li></ul></li><li><h5 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h5><ul><li>DDos：利用已经攻占的多个系统向目标攻击，被害设备面对大量请求无法正常处理而拒绝</li><li>SYN Flooding攻击：利用TCP三次握手过程，使被害主机处于灰化请求中，直至连接超时停止响应</li><li>SQL注入攻击：利用系统漏洞（<strong>防御系统难以阻断</strong>）</li><li>Land攻击：向某设备发送数据包，并将数据包的源IP地址和目的地址都设置为攻击目标地址</li><li>基于网络的防护系统防火墙不能阻隔Cookie的篡改和DNS欺骗</li><li>Tear droop，Smurf攻击可以被路由器阻止</li></ul></li><li><h5 id="无线局域网设备"><a href="#无线局域网设备" class="headerlink" title="无线局域网设备"></a>无线局域网设备</h5><ul><li>无线接入点AP：集合无线或有线终端</li><li>无线路由器：无线路由功能和NAT功能的AP，可以用来建立小的无线局域网</li><li>无线网桥：用于连接几个不同的网段，实现较远距离的而无线通信（构建和维护MAC地址表）</li><li>无线网卡：实现点对点通信，终端节点</li></ul></li><li><h5 id="VLAN：虚拟局域网"><a href="#VLAN：虚拟局域网" class="headerlink" title="VLAN：虚拟局域网"></a>VLAN：虚拟局域网</h5><p>以交换式网络为基础，解决局域网的冲突域，广播域，带宽问题</p><ul><li><p>建立VLAN命令格式：<code>vlan&lt;vlan_ID&gt;name&lt;vlan_name&gt;</code></p></li><li><p>端口分配：<code>switchport access vlan&lt;vlan_num&gt;</code></p></li><li><p>管理IP地址：</p><pre class="line-numbers language-none"><code class="language-none">Switch-6500&gt;(enable)set interface sc0&lt;ip_addr&gt;&lt;ip_mark&gt;&lt;ip_addr&gt;(broadcast address)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置缺省路由：<code>Switch-6500&gt;(enable)Set ip route 0.0.0.0</code> </p></li><li><p>建立ID999，不给定VLAN名，系统自定分配缺省VLAN名<code>VLAN00XXX</code>也就是00999.</p></li><li><p>vty配置模式：</p><pre class="line-numbers language-none"><code class="language-none">Route(config)# line vty 0 15Router(config-line)#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>ppp模式：接口配置模式有异步和同步两种配置指令</p></li><li><p>标准访问控制列表（1-99；1300-1999）</p></li><li><p>扩展访问列表（100-199；2000-2699）</p></li><li><p>禁止使用deny指令</p></li><li><p><code>Router&lt;config&gt;</code>应该在<code>Router&lt;config-if&gt;</code>前面</p></li><li><p>用于Ethernet的VLAN：ID 1-1000</p></li><li><p>VLAN1-1005是标准范围；1025-4096扩展范围</p></li><li><p>IEEE802.1Q，VLANid 用12bits表示</p></li><li><p>VLANname用32字符</p></li></ul></li><li><h5 id="Cisco路由器"><a href="#Cisco路由器" class="headerlink" title="Cisco路由器"></a>Cisco路由器</h5><ul><li><p>system为管理站团队字;traps发送自险信息；informs发送通知</p></li><li><p>SNMP有三个版本：V1是最基本的，几乎所有网络设备和计算机操作系统都支持</p></li><li><p>管理站使用UDP缺省162端口接受通知</p></li><li><p>Cisco Aironet 1100接入点</p><ul><li>第一次配置无线接入点一般采用本地配置，默认IP10.0.0.1</li><li>采用无线连接配置接入点，不配置SSID或SSID配置为tsunami</li><li>pc的浏览器中输入接入点IP地址和密码后，出现接入点汇总状态页面</li></ul></li><li><p><strong>存储</strong>器</p><ul><li>Flash：闪存，用于存储当前使用操作系统映像文件和一些微代码</li><li>NVRAM:非易失性随机存储，用于存储启动配置文件或备份配置文件</li><li>RAM：随机存储，断电gg，存储路由表，ARP等，临时存储</li><li>ROM：只读内存，永久保存路由器开机诊断程序，引导操作系统软件的存储器</li></ul></li><li><p><strong>配置DHCP服务</strong></p><pre class="line-numbers language-none"><code class="language-none">1.配置IP地址池（pool）名称（也就是网络地址）ip dhcp pool2.配置IP地址池的子网地址和子网掩码   network3.配置不参与动态分配的地址空间ip dhcp excluded-address4.缺省网关（默认网关），域名，域名服务器的IPdefault-router dns-server5.有效时间lease 天 时 分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进行<strong>SNMP配置</strong>：<code>snmp trap link-status</code></p></li><li><p><strong>查看路由表</strong>:<code>show ip route</code></p></li><li><p>删除</p></li></ul></li><li><h5 id="Catalyst-3500交换机"><a href="#Catalyst-3500交换机" class="headerlink" title="Catalyst 3500交换机"></a>Catalyst 3500交换机</h5><ul><li><p>显示交换表：<code>show mac-address-table</code>（目的地址，地址类型，VLAN，目的MAC地址）</p></li><li><p>端口配置指令</p><pre class="line-numbers language-none"><code class="language-none">1.进入多扣配置模式 interface 端口名2.设置缺省路由    set ip route 2.配置端口通信模式 duplex auto（自适应）/full（全双工）/half3.配置传输速率    speed 速率（单位Mbps）4.关闭/开始端口   shutdown/no shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h5><ul><li>访问模式：非特权模式，特权模式，配置模式，<strong>监听模式</strong>（可以进行操作系统映像更新，口令恢复）</li><li>安全级别：<ul><li>inside，内部接口：安全级别100</li><li>outside，外部接口：安全级别0</li><li>DMZ中间接口：安全级别50</li></ul></li></ul></li><li><h5 id="STP生成树结构"><a href="#STP生成树结构" class="headerlink" title="STP生成树结构"></a>STP生成树结构</h5><ul><li>BPDU有两种结构，分别配置BPDU（&lt;35字节），拓扑变化通知BPDU（&lt;4字节)</li><li>Bridge ID值最小的成为根网桥，根交换机</li><li>BPDU每2s更新一次</li><li>Bridge ID由2字节优先级值和交换机MAC地址组成，优先级增质量4096</li><li></li></ul></li><li><h5 id="windows命令"><a href="#windows命令" class="headerlink" title="windows命令"></a>windows命令</h5><ul><li><strong>ipconfig</strong>：显示当前TCP/IP网络配置<ul><li>ipconfig/all检查DHCP客户机是否已经获取IP地址，默认网关等</li><li>ipconfig/release地址租约释放</li></ul></li><li><strong>nbtstat</strong>：显示本机与远程计算机的基于TCP/IPde NeTBIOS的统计及连接信息<ul><li>nbtstat-r：列出通过广播和WINS解析的名称</li><li>nbtstat-s：列出灰化及目的的IP地址</li></ul></li><li>pathping：报文发送到进过地的所有路由器，并根据每一条返回的报文统计</li><li>route：显示或修改本地IP路由表条目</li><li>net view：显示域列表，计算机列表</li><li><strong>netstat</strong>：显示TCP连接活动，监听</li><li>pathping：结合ping和tracert</li></ul></li><li><h5 id="光以太网解决方案："><a href="#光以太网解决方案：" class="headerlink" title="光以太网解决方案："></a>光以太网解决方案：</h5><ul><li>根据终端用户的实际应用分配带宽</li><li>具有保护用户和网络资源安全的认证与授权功能</li><li>提供计费功能</li><li>支持以太网和防火墙</li><li>能够支持MPLS（多协议标签交换）,提供分等级的Qos（服务质量，一种解决网络延迟和阻塞）网络服务</li></ul></li><li><h5 id="网络版防病毒系统"><a href="#网络版防病毒系统" class="headerlink" title="网络版防病毒系统"></a>网络版防病毒系统</h5><ul><li>管理控制台可以安装在服务器端/客户端</li><li>可以采用<strong>脚本登录安装</strong>–快速自动安装方法之一</li></ul></li><li><h5 id="光纤同轴电缆混合网HFC："><a href="#光纤同轴电缆混合网HFC：" class="headerlink" title="光纤同轴电缆混合网HFC："></a>光纤同轴电缆混合网HFC：</h5><ul><li>一个双向传输系统</li><li>为有线电视提供接入Internet的方式</li></ul></li><li><h5 id="网络入侵检测系统"><a href="#网络入侵检测系统" class="headerlink" title="网络入侵检测系统"></a>网络入侵检测系统</h5><ul><li>模式匹配</li><li>统计意义上的非正常现象检测</li><li>事件相关性以及频率或阈值</li></ul></li><li><h5 id="集中式入侵检测系统"><a href="#集中式入侵检测系统" class="headerlink" title="集中式入侵检测系统"></a>集中式入侵检测系统</h5><ul><li>最大的问题就是<strong>单点失效</strong>问题（一坨老鼠屎。。。）集中式太难了，对等式好一点</li></ul></li><li><h5 id="邮件系统："><a href="#邮件系统：" class="headerlink" title="邮件系统："></a>邮件系统：</h5><ul><li>Outlook为邮件系统的客户端软件</li><li>IMAP用于管理邮件服务器的协议</li><li>使用传输层协议TCP协议</li><li>SMTP协议发送邮件</li></ul></li></ol><h4 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h4><h5 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h5><ul><li><p>地址类别：</p><table><thead><tr><th>A类</th><th>B类</th><th>C类</th></tr></thead><tbody><tr><td>1.0.0.0-127.255.255.255</td><td>128.0.0.0-191.255.255.255</td><td>192.0.0.0-223.255.255</td></tr></tbody></table></li><li><p>网络地址：网络位不变，主机位为0</p></li><li><p>直接广播地址：网络位不变，主机位全0</p></li><li><p>主机号：网络位全部置零，主机位不变</p></li><li><p>子网中可以使用的第一个可用IP：网络地址+1</p></li></ul><h5 id="2-路由器配置信息分析"><a href="#2-路由器配置信息分析" class="headerlink" title="2.路由器配置信息分析"></a>2.路由器配置信息分析</h5><img data-src="/2021/03/27/ji-suan-ji-san-ji/1D339FD8216713921365B3A56F2FCF67.png" class="" title="img"><h5 id="3-DHCP"><a href="#3-DHCP" class="headerlink" title="3.DHCP"></a>3.DHCP</h5><img data-src="/2021/03/27/ji-suan-ji-san-ji/2FB04A225B060ADB69847652AFA6193B.png" class="" title="img"><h5 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4.TCP"></a>4.TCP</h5><img data-src="/2021/03/27/ji-suan-ji-san-ji/79D519A27EF74CC96044DB7EBD86DE9E.png" class="" title="img"><h5 id="5-路由"><a href="#5-路由" class="headerlink" title="5.路由"></a>5.路由</h5><img data-src="/2021/03/27/ji-suan-ji-san-ji/01220467E6982246CD68122487CB9287.png" class="" title="img">]]></content>
      
      
      <categories>
          
          <category> 大学小秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机三级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node开发博客系统</title>
      <link href="2021/03/21/node-kai-fa-bo-ke-xi-tong/"/>
      <url>2021/03/21/node-kai-fa-bo-ke-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>写在前面：本文学习server端开发思想。</p><h4 id="服务端开发和前端开发区别"><a href="#服务端开发和前端开发区别" class="headerlink" title="服务端开发和前端开发区别"></a><strong>服务端开发和前端开发区别</strong></h4><ol><li>服务稳定性<ul><li>PM2进程守护</li></ul></li><li>考虑内存和cpu<ul><li>使用stream写日志，使用redis存session</li></ul></li><li>日志记录<ul><li>前端日志的发起方，不关心后续；</li><li>server端要记录日志，存储，分析</li></ul></li><li>安全<ul><li>比如，越权操作，数据库攻击</li><li>登录验证，预防XSS，和sql注入</li></ul></li><li>集群和服务拆分<ul><li>承担大流量</li></ul></li></ol><a id="more"></a><h3 id="一，原生node开发"><a href="#一，原生node开发" class="headerlink" title="一，原生node开发"></a>一，原生node开发</h3><h4 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h4><ul><li>首先了解一下http模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.引入http模块</span><span class="token comment">//2.利用createServer()新建http服务</span><span class="token comment">//3.监听端口</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>serverHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获取参数：</p><ol><li><code>const method = req.method;</code></li><li><code>const url = req.url;</code></li><li><code>const path = url.split("?")[0];</code></li><li><code>const query = querystring.parse(url.split("?")[1]);</code> 引入<code>querystring</code>模块解析参数，返回对象</li></ol></blockquote><ul><li>项目搭建</li></ul><blockquote><ol><li>添加nodemon模块，帮助我们更新，重启程序。</li><li>cross-env模块，判断dev环境或pro环境 <code>env: process.env.NODE_ENV,</code></li></ol></blockquote><ul><li>项目分层设计</li></ul><blockquote><ol><li><code>bin/index.js</code>：负责<code>createServer</code>逻辑</li><li><code>app.js</code>:关于http的基本设置<code>serverHeader</code>(设置返回格式JSON，解析url，解析cookie，解析session，设置user路由，未命中设置404)</li><li><code>router</code>:由第二层引用的路由API，返回正确的格式（分为blog和user）</li><li><code>controller</code>:处理管理数据，获取数据库数据，返回数据</li></ol></blockquote><img data-src="/2021/03/21/node-kai-fa-bo-ke-xi-tong/image-20210322222936313.png" class="" title="image-20210322222936313"><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><ul><li>建库  nodeServer</li><li>建表</li></ul><img data-src="/2021/03/21/node-kai-fa-bo-ke-xi-tong/image-20210323124753961.png" class="" title="users"><img data-src="/2021/03/21/node-kai-fa-bo-ke-xi-tong/image-20210323124817222.png" class="" title="blogs"><blockquote><p>相关操作</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- show databases;</span><span class="token comment">-- use nodeserver;</span><span class="token comment">-- select version();</span><span class="token comment">-- 插入操作</span><span class="token comment">-- insert into users (username, `password`, realname) values ('gbh', '1234', '郭炳辉');</span><span class="token comment">-- insert into blogs (title, createtime,content,author) values ('标题B','1616476983615','内容B','许龄月')</span><span class="token comment">-- 查询</span><span class="token comment">-- select * from users;</span><span class="token comment">-- select id, username from users;</span><span class="token comment">-- select * from users where username='minyue' or `password`='1234';</span><span class="token comment">-- select * from users where password like '%1%' order by id desc;</span><span class="token comment">-- 更新</span><span class="token comment">-- 保护机制</span><span class="token comment">-- SET SQL_SAFE_UPDATES=0;</span><span class="token comment">-- update users set realname='李沁' where username='gbh';</span><span class="token comment">-- 删除</span><span class="token comment">-- delete from users where username='gbh';</span><span class="token comment">-- 软删除  增加一个state数据列，1表示数据存在，0表示数据删除</span><span class="token comment">-- update users set state='0' where username='gbh';</span><span class="token comment">-- select * from users where state='1';</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>node操作mysql</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建连接对象</span><span class="token keyword">const</span> con <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token operator">:</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>  user<span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token operator">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span>  port<span class="token operator">:</span><span class="token string">'3306'</span><span class="token punctuation">,</span>  database<span class="token operator">:</span><span class="token string">'nodeserver'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//连接</span>con<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设定操作</span><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">insert into blogs (title, createtime,content,author) values ('标题B','1616476983615','内容B','许龄月'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//关闭连接</span>con<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><ol><li><p>cookie</p><ul><li>存储在浏览器的一段字符串（最大5kb）</li><li>跨域不共享，浏览器给每一个域名都分配一个cookie</li><li>格式（如：k1=v1；k2=v2）来存储结构化数据</li><li>每次发送http请求，浏览器会将请求域的cookie一起发送给server</li><li>server可以修改cookie并返回浏览器</li><li>浏览器可以通过js修改cookie（有限制）</li></ul></li><li><p>客户端查看cookie的方法</p><ul><li>chrome调试工具中请求头会带有cookie；server端如果修改cookie会在响应头中带有set-cookie</li><li>Application-&gt;Storage中查看</li><li>document.cookie(可查看，可累加修改cookie)</li></ul></li><li></li></ol><ul><li><p>客户端不能轻易，修改server端对cookie的设定。</p></li><li><p>httpOnly是用来限制js修改cookie的（而不是浏览器，东西存在浏览器，别人想改也办法呀）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2021/03/21/she-ji-mo-shi/"/>
      <url>2021/03/21/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<img data-src="/2021/03/21/she-ji-mo-shi/16ab0c39cfa5125d" class="" title="img"><ul><li>设计模式<strong>核心思想</strong>：<strong>封装变化</strong></li></ul><p><strong>将变与不变分离，确保变化的部分灵活、不变的部分稳定</strong>。</p><a id="more"></a><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h4 id="1-简单工厂"><a href="#1-简单工厂" class="headerlink" title="1.简单工厂"></a>1.简单工厂</h4><ul><li>先谈构造器模式</li></ul><h4 id="2-抽象工厂"><a href="#2-抽象工厂" class="headerlink" title="2.抽象工厂"></a>2.抽象工厂</h4><h4 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h4><h4 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4.原型模式"></a>4.原型模式</h4><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h4 id="1-装饰器模式"><a href="#1-装饰器模式" class="headerlink" title="1.装饰器模式"></a>1.装饰器模式</h4><h4 id="2-适配器模式"><a href="#2-适配器模式" class="headerlink" title="2.适配器模式"></a>2.适配器模式</h4><h4 id="3-代理模式"><a href="#3-代理模式" class="headerlink" title="3.代理模式"></a>3.代理模式</h4><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h4 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h4><h4 id="2-状态模式"><a href="#2-状态模式" class="headerlink" title="2.状态模式"></a>2.状态模式</h4><h4 id="3-状态模式"><a href="#3-状态模式" class="headerlink" title="3.状态模式"></a>3.状态模式</h4><h4 id="4-观察者模式"><a href="#4-观察者模式" class="headerlink" title="4.观察者模式"></a>4.观察者模式</h4><ul><li>生活中的观察者模式</li></ul><p>对于一个互联网团队，应对每一个需求，就会有一个产品经理+n个技术人员（形成，<strong>发布者和订阅者</strong>）</p><blockquote><p>角色</p></blockquote><h4 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5.迭代器模式"></a>5.迭代器模式</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node基础</title>
      <link href="2021/03/04/node/"/>
      <url>2021/03/04/node/</url>
      
        <content type="html"><![CDATA[<h3 id="1-node是什么？"><a href="#1-node是什么？" class="headerlink" title="1.node是什么？"></a>1.node是什么？</h3><ul><li>和浏览器一样，都是js的运行环境。基于V8引擎。</li><li>优势：I/O操作非阻塞的原生功能；运行与单进程中，无需为每个请求创建新的线程。</li></ul><p><strong>服务端开发和前端开发区别</strong></p><ol><li>服务稳定性<ul><li>PM2进程守护</li></ul></li><li>考虑内存和cpu<ul><li>使用stream写日志，使用redis存session</li></ul></li><li>日志记录<ul><li>前端日志的发起方，不关心后续；</li><li>server端要记录日志，存储，分析</li></ul></li><li>安全<ul><li>比如，越权操作，数据库攻击</li><li>登录验证，预防XSS，和sql注入</li></ul></li><li>集群和服务拆分<ul><li>承担大流量</li></ul></li></ol><a id="more"></a><h3 id="2-模块导入导出"><a href="#2-模块导入导出" class="headerlink" title="2.模块导入导出"></a>2.模块导入导出</h3><ul><li>使用commonJS模块导出方式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导入</span><span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"route"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导出  以module.exports为准</span>exports<span class="token punctuation">.</span>modelName <span class="token operator">=</span> modelName<span class="token punctuation">;</span>Module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-事件触发器"><a href="#3-事件触发器" class="headerlink" title="3.事件触发器"></a>3.事件触发器</h3><ul><li>使用events模块，该模块公开<code>on</code>, <code>emit</code> 分别用于触发事件，添加回调函数。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"events"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">和为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token operator">+</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-HTTP服务器"><a href="#4-HTTP服务器" class="headerlink" title="4.HTTP服务器"></a>4.HTTP服务器</h3><ul><li>域名映射ip：localhost（127.0.0.1）</li></ul><p><strong>创建web服务器</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.引用系统模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建web服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'你好世界\n'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//3.监听3000端口</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">服务器运行在 http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2021/03/04/node/image-20210321230504715.png" class="" title="架构图">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3基础</title>
      <link href="2021/01/22/vue3-ji-chu/"/>
      <url>2021/01/22/vue3-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h1><h2 id="1-1，初识hello-world"><a href="#1-1，初识hello-world" class="headerlink" title="1.1，初识hello world"></a>1.1，初识hello world</h2><ol><li>script脚本形式引入vue脚本<ul><li>存在开发版本和生产版本</li></ul></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script src="https://cdn.bootcdn.net/ajax/libs/vue/3.0.2/vue.global.prod.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>对DOM里的指定标签指定渲染</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.createApp({  data() {    return {    content: 1,  };  },  mounted() {    setInterval(() =&gt; {      this.content += 1;      //写法二：this.$data.content += 1;    }, 1000);  },  template: "&lt;div&gt;{{content}}&lt;/div&gt;",}).mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mount指定行为绑定那个DOM</li><li>data函数表示数据</li><li>mounted函数：类似生命周期函数<code>componentDidMount</code>，在标签渲染后自动执行</li><li>template: （模板）渲染到DOM内的内容</li></ul><a id="more"></a><h2 id="1-2，vue中如何绑定事件和面向数据编程"><a href="#1-2，vue中如何绑定事件和面向数据编程" class="headerlink" title="1.2，vue中如何绑定事件和面向数据编程"></a>1.2，vue中如何绑定事件和面向数据编程</h2><p>//实现点击事件翻转字符串</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.createApp({  data() {    return {    content: "hello world",    };  },  methods: {    handleBtnClick() {    this.content = this.content.split("").reverse().join("");    },  },  template: `    &lt;div&gt;      {{content}}      &lt;button v-on:click="handleBtnClick"&gt;reverse&lt;/button&gt;    &lt;/div&gt;  `,}).mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数段写在methods对象中</li><li>事件代理需要使用vue中<code>v-on:click="function"</code>绑定事件</li></ul><p>//实现标签显示和隐藏</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.createApp({  data() {    return {    show: true,    };  },  methods: {    handleBtnClick() {    this.show = !this.show;    },  },  template: `    &lt;div&gt;      &lt;span v-if="show"&gt;hello world&lt;/span&gt;      &lt;button v-on:click="handleBtnClick"&gt;show/hide&lt;/button&gt;    &lt;/div&gt;  `,}).mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标签显示与隐藏<code>v-if="boolean"</code>，布尔值决定标签显示</li></ul><h2 id="1-3，todolist了解循环和双向绑定"><a href="#1-3，todolist了解循环和双向绑定" class="headerlink" title="1.3，todolist了解循环和双向绑定"></a>1.3，todolist了解循环和双向绑定</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">Vue.createApp({  data() {    return {      list: [],      inputValue: "",    };  },  methods: {    handleBtnClick() {      this.list.push(this.inputValue);      this.inputValue = "";    },  },  template: `    &lt;div&gt;      &lt;input v-model="inputValue"/&gt;      &lt;button v-on:click="handleBtnClick"&gt;submit&lt;/button&gt;      &lt;ul&gt;        &lt;li v-for="(item, index) of list"&gt;{{item}}&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;  `,}).mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>双向绑定<code>v-model="var"</code> input框中默认是变量值和输入框内容</li><li>循环<code>v-for="(item,index) of list"</code> 一般用在li标签中item就是对应标签应该获得的值</li></ul><h2 id="1-4，组件化概念-属性绑定变量"><a href="#1-4，组件化概念-属性绑定变量" class="headerlink" title="1.4，组件化概念/属性绑定变量"></a>1.4，组件化概念/属性绑定变量</h2><ol><li>给主组件初始化一个变量</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>主组件渲染</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">app.mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>绑定子组件</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">app.commponent('name', {});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>组件之间传值，参考react可知道应该是属性传值，那么怎么绑定数据给标签的一个属性 <code>v-bind:shuxing="var"</code></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;todoItem v-for="item of list" v-bind:content="item"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>同时子组件可以在props属性中获得父组件传来的属性</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  data() {    return {      list: [],      inputValue: "",    };  },  methods: {    handleBtnClick() {      this.list.push(this.inputValue);      this.inputValue = "";    },  },  template: `    &lt;div&gt;      &lt;input v-model="inputValue"/&gt;      &lt;button v-on:click="handleBtnClick"&gt;submit&lt;/button&gt;      &lt;ul&gt;        &lt;todoItem v-for="item of list" v-bind:content="item"/&gt;      &lt;/ul&gt;    &lt;/div&gt;  `,});app.component("todoItem", {  props: ["content"],  template: `    &lt;li&gt;{{content}}&lt;/li&gt;  `,  });app.mount("#root");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="2-1组件的基本概念"><a href="#2-1组件的基本概念" class="headerlink" title="2.1组件的基本概念"></a>2.1组件的基本概念</h2><ol><li>根组件的实例是什么？</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({});const vm = app.mount("#root");//其中vm就是根组件的实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>怎么在外部访问组件的数据</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//我们可以使用vm调用根组件中的数据vm.$data.inputValue = "hhh";//数据就会变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>设计模式MVVM</li></ol><ul><li>M: model 数据</li><li>V：view 视图</li><li>VM: 视图数据连接层—也就是组件</li></ul><h2 id="2-2生命周期函数"><a href="#2-2生命周期函数" class="headerlink" title="2.2生命周期函数"></a>2.2生命周期函数</h2><p>特定时刻，自动执行的函数</p><img data-src="/2021/01/22/vue3-ji-chu/lifecycle.png" class="" title="实例的生命周期"><ul><li><p>注意，中间的判断当没有template时，把挂载DOM元素的内容当做渲染的内容</p></li><li><p>四组八个：beforeCreate/created  beforeMount/mounted  beforeUpdate/updated  beforeUnmount/unmounted</p></li></ul><h2 id="2-3常用模板语法"><a href="#2-3常用模板语法" class="headerlink" title="2.3常用模板语法"></a>2.3常用模板语法</h2><ol><li>插值表达式</li></ol><pre class="line-numbers language-none"><code class="language-none">{{表达式}}//表达式的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>v-html</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//指定内容以html文本形式解析出来template: `&lt;div v-html="message"&gt;&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>v-bind:/:</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//双向绑定标签的一个指定属性和一个变量简写 ：template: `&lt;div v-bind:title="message"&gt;hello world&lt;/div&gt;`//在input框的是否可以输入上使用template: `&lt;input v-bind:disabled="disable"&gt;hello world&lt;/input&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>v-once</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//标签内容只初次渲染template: `&lt;div v-once&gt;{{message}}&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>v-if</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//控制标签是否展示 boolean值   直接销毁DOMtemplate: `&lt;div v-if="show"&gt;hello world&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>v-on:/@</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//事件绑定 v-on:或者简写@template: `&lt;div @click="handleClick"&gt;hello world&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>动态属性/动态事件</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//根据定义的变量值来确定属性名和事件类型template: `&lt;div @[event]="handleEvent"    :[name]="message"  &gt;    {{message}}&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>表单阻止默认行为</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//方法一：使用e.preventDefault()methods: {handleClick(e) {e.preventDefault();}},template: `&lt;form action="https://minyue-hcm.github.io" @click="handleClick"&gt;    &lt;button type="submit"&gt;      submit    &lt;/button&gt;&lt;/form&gt;`//方法二：使用修饰符.preventmethods: {handleClick(e) {//do something else}},template: `&lt;form     action="https://minyue-hcm.github.io"     @click.prevent="handleClick"  &gt;    &lt;button type="submit"&gt;      submit    &lt;/button&gt;&lt;/form&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4Vue属性：数据，方法，计算属性，侦听器"><a href="#2-4Vue属性：数据，方法，计算属性，侦听器" class="headerlink" title="2.4Vue属性：数据，方法，计算属性，侦听器"></a>2.4Vue属性：数据，方法，计算属性，侦听器</h2><ol><li>数据</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">data() {return {message: 'minyue',count: 2,price: 5,newTotal: 10,}},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>方法</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//方法既可以在绑定事件中调用，也可以在插值表达式中使用(加括号)//函数中this绑定问题 --不要使用箭头函数（指向外部window）methods: {formatString(string) {return string.toUpperCase();},},template: "&lt;div&gt;{{formatString(message)}}&lt;/div&gt;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>计算属性</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 只有当依赖变化 即发生变化// 对比methods方法（只要页面重新渲染就会执行）computed: {total() {return this.count*this.price;},},template: '&lt;div&gt;{{total}}&lt;/div&gt;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>侦听器</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//侦听数据变化，执行异步操作  也就是计算属性的底层实现watch: {//price发生变化时函数执行price(current, prev) {this.newTotal = current * this.price;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5Vue样式绑定语法"><a href="#2-5Vue样式绑定语法" class="headerlink" title="2.5Vue样式绑定语法"></a>2.5Vue样式绑定语法</h2><ol><li>类样式绑定</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">data() {  return {  classString: "red",  classObject: {red: true, yellow: true}  classArray: ["red", { yellow: true }],  styleString: "color: pink; background: yellow;"    styleObject: {      color: "pink",      background: "yellow",    },  };},//(1)html写法template: `&lt;div :class="red"&gt;minyue&lt;/div&gt;`,//(2)数据字符串写法template: `&lt;div :class="classString"&gt;minyue&lt;/div&gt;`,//(3)class对象形式template: `&lt;div :class="classObject"&gt;minyue&lt;/div&gt;`,//(4)class数组形式template: `&lt;div :class="classArray"&gt;minyue&lt;/div&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>行内样式绑定</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)html写法template: `&lt;div style="color: pink; background: yellow;"&gt;minyue&lt;/div&gt;`,//(2)数据字符串写法template: `&lt;div :style="styleString"&gt;minyue&lt;/div&gt;`,//(3)style对象形式   推荐！！！  注意值是字符串类型template: `&lt;div :style="styleObject"&gt;minyue&lt;/div&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.父子组件传递样式</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)子组件最外层单一节点   正常绑定template: `  &lt;div :style="styleObject"&gt;minyue&lt;/div&gt;  &lt;son class="yellow"/&gt;`,//(2)子组件最外层多个节点   上面方法失效app.component("son", {  template: `    &lt;div :class="$attrs.class"&gt;son&lt;/div&gt;    &lt;div :class="$attrs.class"&gt;son&lt;/div&gt;  `,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6条件渲染"><a href="#2-6条件渲染" class="headerlink" title="2.6条件渲染"></a>2.6条件渲染</h2><ol><li>比较 <code>v-if</code> <code>v-show</code></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">(1)v-if  展示和隐藏会频繁生成或销毁DOM(2)v-show  使用style="display: none"来实现不会销毁DOM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>条件渲染</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">data() {return {    conditionOne: false,    conditionTwo: true,};},template: `&lt;div v-if="show"&gt;if&lt;/div&gt;  &lt;div v-else-if="conditionTwo"&gt;else-if&lt;/div&gt;  &lt;div v-else&gt;else&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当conditionOne/Two同是true时，就执行if</li></ul><h2 id="2-7列表循环"><a href="#2-7列表循环" class="headerlink" title="2.7列表循环"></a>2.7列表循环</h2><ol><li>对于数组而言</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">methods: {handleBtnClick() { //一些数组变更函数 push/pop/unshift/shift/splice/sort/reverse this.listArray.push("minyue"); //直接替换数组 this.listArray = ["minyue"].concat(["hello"]); this.listArray = ["minyue","hcm"].filter(item =&gt; item === 'hcm'); //直接更新内容  --新版！！！ this.listArray[0] = 'lalala';}},template: `&lt;div v-for="(item, index) in listArray"&gt;{{item}}--{{index}}&lt;/div&gt;&lt;button @click="handleBtnClick"&gt;change&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对于对象而言</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">methods: {handleBtnClick() { //直接更新内容  --新版！！！ this.listObject.age = 20;}},template: `&lt;div v-for="(value, key, index) in listObject"&gt;{{value}}--{{key}}--{{index}}&lt;/div&gt;&lt;button @click="handleBtnClick"&gt;change&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>diff算法    给列表项添加一个惟一的key</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-for="(item, index) in listArray" :key="item"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>特殊用法，循环一个数字</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-for="item in 10"&gt;{{index}}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>循环和判断同时存在时，循环优先级高，不能放在一起</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// template类似于react中的Fragmenttemplate: `&lt;template v-for="(value, key, index) in listObject" :key="index"&gt;&lt;div v-if="key !== age"&gt;{{value}}--{{key}}--{{index}}&lt;/div&gt;&lt;/template&gt;&lt;button @click="handleBtnClick"&gt;change&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-8事件绑定"><a href="#2-8事件绑定" class="headerlink" title="2.8事件绑定"></a>2.8事件绑定</h2><ul><li>可表达式，可函数</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">template: `&lt;button @click="num += 1"&gt;//可以直接写简单表达式    button&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数传参</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">template: `&lt;button @click="handleBtnClick(2, $event)"&gt;//参数 和 原生事件    button&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多函数绑定</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//函数需要加括号，逗号隔开template: `&lt;button @click="handleBtnClick(), handleClick()&gt;     button&lt;/button&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>事件修饰符</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)阻止事件冒泡  .stoptemplate: `&lt;div @click="handleDivClick"&gt;&lt;button @click.stop="handleBtnClick&gt;button&lt;/button&gt;&lt;/div&gt;`//(2).self  自身触发，内置冒泡的不算template: `&lt;div @click.self="handleDivClick"&gt;&lt;button @click="handleBtnClick&gt;button&lt;/button&gt;&lt;/div&gt;`//(3)冒泡换成捕获 capturetemplate: `&lt;div @click.capture="handleDivClick"&gt;&lt;button @click="handleBtnClick&gt;button&lt;/button&gt;&lt;/div&gt;`//(4)阻止默认行为 .prevent//(5)只发生一次 .oncetemplate: `&lt;button @click.once="handleBtnClick&gt;button&lt;/button&gt;`// (6)scroll事件提升性能 .passivetemplate: `&lt;div @scroll.passive="handleScroll&gt;button&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>按键修饰符    多个按键直接连写就可以    <code>.ctrl.shift</code></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// enter,tab,delete,esc,up,right,down,left  只有按下对应按键才会执行// 不加修饰符就是任意按键就会触发template: `&lt;input @keydown.delete="handleKeydown" /&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>鼠标修饰符</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//默认left，可以改为  .right   .middletemplate: `&lt;button @click.middle="handleBtnClick"&gt;button&lt;/button&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>精确修饰符</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 当且仅当按住一个ctrl时触发  不多不少   但有点小问题template: `&lt;div @click.ctrl.exact="click"&gt;sss&lt;/div&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9双向绑定"><a href="#2-9双向绑定" class="headerlink" title="2.9双向绑定"></a>2.9双向绑定</h2><ol><li>input框的双向绑定</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//不用再写value属性了data() {  return {    message: "minyue",  };},template: `  {{message}}  &lt;input v-model="message" /&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>多行文本textarea</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//类似input框data() {  return {    message: "minyue",  };},template: `  {{message}}  &lt;textarea v-model="message" /&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>复选框  checkbox</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)单一选项时   数据为boolean//(2)多选时      数据为数组定义value属性为存放数组的内容data() {  return {    message: [],  };},template: `  {{message}}  111&lt;input v-model="message" type="checkbox" value="111"/&gt;  222&lt;input v-model="message" type="checkbox" value="222"/&gt;  333&lt;input v-model="message" type="checkbox" value="333"/&gt;`,//(3)自定义选中后的展示内容data() {  return {    message: true,  };},template: `  {{message}}  &lt;input v-model="message" type="checkbox" true-value="ok" false-value="no"/&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>单选  radio</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//数据为字符串data() {  return {    message: "",  };},template: `  {{message}}  111&lt;input v-model="message" type="radio" value="111"/&gt;  222&lt;input v-model="message" type="radio" value="222"/&gt;  333&lt;input v-model="message" type="radio" value="333"/&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>下拉选项框  select</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//单选 数据为字符串   value 和 message匹配data() {  return {    message: "",  };},template: `  {{message}}    &lt;select v-model="message"&gt;      &lt;option value="" disabled&gt;请输入内容&lt;/option&gt;      &lt;option value="A"&gt;A&lt;/option&gt;      &lt;option value="b"&gt;B&lt;/option&gt;      &lt;option value="c"&gt;C&lt;/option&gt;    &lt;/select&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//多选  multiple   数据为数组data() {  return {    message: [],  };},template: `  {{message}}  &lt;select v-model="message" multiple&gt;    &lt;option value="A"&gt;A&lt;/option&gt;    &lt;option value="b"&gt;B&lt;/option&gt;    &lt;option value="c"&gt;C&lt;/option&gt;  &lt;/select&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用循环渲染</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 数据为对象数组形式// 分析： text，value分别是显示数据和返回数据   // 返回数据是我们自己定义也可以是对象的形式 {value: 'A'}data() {  return {    message: "",    options: [      { text: "A", value: "A" },      { text: "B", value: "B" },      { text: "C", value: "C" },    ],  };},template: `  {{message}}   &lt;select v-model="message"&gt;     &lt;option value="" disabled&gt;请输入内容&lt;/option&gt;     &lt;option v-for="item in options" :value="item.value"&gt;{{item.text}}     &lt;/option&gt;  &lt;/select&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>修饰符</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1).lazy   input框中value和数据的及时响应，变成当失焦时才响应data() {  return {    message: "minyue",  };},template: `  {{message}}  &lt;input v-model.lazy="message" /&gt;`,//(2).number  默认为字符串类型  存入时改变为数字类型data() {  return {    message: 11,  };},template: `  {{typeof message}}  &lt;input v-model.number="message" /&gt;`,//.trim  去除数据前后的空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="VUE组件"><a href="#VUE组件" class="headerlink" title="VUE组件"></a>VUE组件</h1><h2 id="3-1组件的定义，复用性，分类"><a href="#3-1组件的定义，复用性，分类" class="headerlink" title="3.1组件的定义，复用性，分类"></a>3.1组件的定义，复用性，分类</h2><ol><li><p>定义</p><p>由根实例拆分出来的一个个小的实例模块</p></li><li><p>复用性</p><p>同一个组件在多次复用时，彼此没有干扰，并且可以在其他子组件中同时复用</p></li><li><p>分类—全局组件</p><p>只要定义了，处处可以使用，性能不高，但是使用起来简单，名字建议 <strong>小写字母单词，中间用横线间隔</strong></p></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//利用app.componnet("", {})创建的组件const app = Vue.createApp({  template: `    &lt;div&gt;father&lt;hello-world /&gt;&lt;/div&gt;    &lt;div&gt;father&lt;hello-world /&gt;&lt;/div&gt;  `,});app.component("hello-world", {  template: "&lt;span&gt;son1&lt;/span&gt;",});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>分类—局部组件</p><p>定义了，要<strong>注册</strong>之后才能使用，性能比较高，使用起来有些麻烦，建议<strong>大些字母开头，驼峰命名</strong></p></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const Counter = {  data() {    return {      count: 1,    };  },  template: `&lt;div @click="count += 1"&gt;{{count}}&lt;/div&gt;`,};const HelloWorld = {template: `&lt;div&gt;hello world&lt;/div&gt;`};const app = Vue.createApp({  components: {   Counter, HelloWorld,  },//解构赋值  也可以键值对形式改名  template: `    &lt;counter /&gt;//最好写映射，但Vue也会自动映射       &lt;hello-world /&gt;  `,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2组件间传参-参数校验-单向数据流"><a href="#3-2组件间传参-参数校验-单向数据流" class="headerlink" title="3.2组件间传参/参数校验/单向数据流"></a>3.2组件间传参/参数校验/单向数据流</h2><p>父组件中以属性形式传递 静态参数或动态参数，子组件同过<code>props</code> 接收，也可以写一些参数进行校验（warning）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  data() {    return { num: 1234 }  },  template: `    &lt;div&gt;&lt;test :content="num" /&gt;&lt;/div&gt;  `});// type:String, Boolean, Array, Object, Function, Symbol// required  父组件必须传递该参数// default   默认值           可以直接写值   也可以函数返回app.component('test', {  props: {    content: {      type: Number,      validator: function(value) {        return value &lt; 1000;      },      default: function() {        return 456;      }    }  },  template: `&lt;div&gt;{{content}}&lt;/div&gt;`});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>单向数据流</strong></p><p>子组件可以使用父组件传递来的参数数据，但绝对不能修改</p></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 想要修改  就必须自己复刻一个数据再进行修改const app = Vue.createApp({  data() {    return { num: 1 };  },  template: `  &lt;div&gt;    &lt;counter :count="num" /&gt;  &lt;/div&gt;`,});app.component("counter", {  props: ["count"],  data() {    return {      myCount: this.count,    };  },  template: `&lt;div @click="myCount += 1"&gt;{{myCount}}&lt;/div&gt;`,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>合并传参</strong></p><p>但参数很多时，一个个写很麻烦，使用合并传参</p></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//v-bind="param"  等价于//:num="params.num" :a="params.a" :b="params.b" const app = Vue.createApp({  data() {    return {      param: {        num: 1,        a: 2,        b: 3,      },    };  },  template: `  &lt;div&gt;    &lt;counter v-bind="param" /&gt;  &lt;/div&gt;`,});app.component("counter", {  props: ["num", "a", "b"],  template: `&lt;div&gt;{{num}}{{a}}{{b}}&lt;/div&gt;`,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-Non-Props属性是什么"><a href="#3-3-Non-Props属性是什么" class="headerlink" title="3.3 Non-Props属性是什么"></a>3.3 Non-Props属性是什么</h2><p>前面说到，组件传值，需要子组件中<code>props</code> 接受参数；但是当没有<code>props</code>时，会发生什么？</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//Non-props   //(1)最外层只有一个节点时：会像挂载属性一样直接挂载到子组件上const app = Vue.createApp({template: `&lt;div&gt;      &lt;counter msg="hello" /&gt;&lt;/div&gt;`});app.component('counter', {//inheritAttrs: false,//表示不接受继承来的属性template: `&lt;div&gt;      Counter&lt;/div&gt;`});const vm = app.mount('#root');//得到  &lt;div msg="hello"&gt;Counter&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(2)当最外层有多个节点时 Non-props会失效// 1.使用v-bind="$attrs" 执行全部继承&lt;div v-bind="$attrs"&gt;Counter&lt;/div&gt;// 2.对指定一个属性的继承&lt;div :msg="$attrs.msg"&gt;Counter&lt;/div&gt;&lt;div :msg1="$attrs.msg1"&gt;Counter&lt;/div&gt;// 3.子组件其他函数中想要使用到传递来的属性时  this.$attrs访问mounted() {  console.log(this.$attrs.msg);},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多用于style和class的继承</li></ul><h2 id="3-4父子组件间通过事件通信"><a href="#3-4父子组件间通过事件通信" class="headerlink" title="3.4父子组件间通过事件通信"></a>3.4父子组件间通过事件通信</h2><ol><li>子组件发出触发事件，父组件监听事件</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  data() {    return { count: 1 }  },  methods: {    handleAdd(param1,param2) {      this.count += param2;    }    //handleAdd(count) {    //this.count = count;    //}  }  template: `    &lt;counter       :count="count"       @add-one="handleAdd"    /&gt;  `});app.component('counter', {props: ['count'],emits: ['add'],  methods: {    handleClick() {      this.$emit('add', 2, 3);      //this.$emit('add', this.count + 4)    }  },  template: `    &lt;div @click="handleClick"&gt;{{count}}&lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>子组件—–触发事件—–<strong>驼峰式</strong>写法</p><p><code>this.$emit('addOne', 2, 3);</code></p><p>触发事件梳理—-<code>emits: []</code> 也可以写成对象形式<strong>参数校验</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">emits: {addOne: (count) =&gt; {if(count &gt;= 0) {return true;} return false;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父组件—–监听事件—-<strong>间隔符</strong>写法捕获事件</p><p><code>@add-one="handleAddOne"</code></p></li><li><p>总结： 父组件传递给子组件一个数据—-子组件请求父组件改变对应数据</p></li></ul><ol start="2"><li>绑定数据让我们想到双向绑定 <code>v-model</code></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  data() {    return { count: 1 }  },  template: `    &lt;counter v-model="count" /&gt;  `});app.component('counter', {  props: ['modelValue'],  methods: {    handleClick() {      this.$emit('update:modelValue', this.modelValue + 3);    }  },  template: `    &lt;div @click="handleClick"&gt;{{modelValue}}&lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果想改变名称可以，而且可以多个<code>v-model</code>的绑定</p><p><code>&lt;counter v-model:add="count" /&gt;</code> 对应改为<code>add</code></p></li><li><p>update 是固定写法 — 底层就是 <code>@change和-bind</code></p></li></ul><ul><li><strong>v-model的自定义修饰符</strong></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  data() {    return { count: 'a' }  },  template: `    &lt;counter v-model.uppercase="count" /&gt;  `});app.component('counter', {  props: {  'modelValue': String,  'modelModifiers': {  default: ()=&gt;({})  //检测是否有修饰符  如果有就添加到对象中 值为 true  }  },  methods: {    handleClick() {    let newValue = this.modelValue + 'b';    if(this.modelModifiers.uppercase) {    newValue = newValue.toUpperCase();    }      this.$emit('update:modelValue', this.modelValue + 3);    }  },  template: `    &lt;div @click="handleClick"&gt;{{modelValue}}&lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5使用插槽-和具名插槽解决组件内容传递"><a href="#3-5使用插槽-和具名插槽解决组件内容传递" class="headerlink" title="3.5使用插槽 和具名插槽解决组件内容传递"></a>3.5使用插槽 和具名插槽解决组件内容传递</h2><p>父组件往子组件传递DOM节点时   子组件中用<code>&lt;slot&gt;</code>作为形式DOM，有父组件内部实际DOM</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//数据属性，作用域问题--- 父模板里面的数据使用父模板中的数据//插槽默认值：  父代没有内容时，默认值在子代插槽标签内部const app = Vue.createApp({  template: `  //只有layout一层时，不用具名插槽    &lt;layout&gt;      &lt;template v-slot:header&gt;//需要外层结构包裹，双标签！        &lt;div&gt;header&lt;/div&gt;      &lt;/template&gt;      &lt;template v-slot:footer&gt;        &lt;div&gt;footer&lt;/div&gt;      &lt;/template&gt;    &lt;/layout&gt;  `});app.component('layout', {  template: `    &lt;div&gt;      &lt;slot name="header"&gt;&lt;/slot&gt;//必须配备对应的name      &lt;div&gt;content&lt;/div&gt;      &lt;slot name="footer"&gt;&lt;/slot&gt;    &lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6作用域插槽"><a href="#3-6作用域插槽" class="headerlink" title="3.6作用域插槽"></a>3.6作用域插槽</h2><p>怎么通过子代插槽标签，传递子代数据到父代对应DOM中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  template: `    &lt;list v-slot="{item}"&gt;//应该是slotProps 解构！      &lt;div&gt;{{item}}&lt;/div&gt;    &lt;/list&gt;  `});app.component('list', {  data() {return {list: [1, 2, 3]}},  template: `    &lt;div&gt;      &lt;slot v-for="item in list" :item="item" /&gt;      //绑定item传递给父代    &lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7动态组件-异步组件"><a href="#3-7动态组件-异步组件" class="headerlink" title="3.7动态组件/异步组件"></a>3.7动态组件/异步组件</h2><p>动态组件：根据数据变化，结合<code>&lt;component&gt;</code> ，实现对不同子组件调用的切换</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({data() {    return {      currentItem: 'input-item'    }},methods: {handleClick() {this.currentItem = this.currentItem === 'input-item' ?      'common-item' : 'input-item';}},template: `&lt;keep-alive&gt;      &lt;compoment :is="currentItem" /&gt;    &lt;/keep-alive&gt;    &lt;button @click="handleClick"&gt;change&lt;/button&gt;`})app.component('input-item', {template: `&lt;input /&gt;`});app.component('common-item', {template: `&lt;div&gt;minyue&lt;/div&gt;`});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;keep-alive&gt;</code> 可以缓存数据，保存input框输入的数据</li></ul><p>异步组件：异步调用渲染的组件形式</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app = Vue.createApp({  template: `    &lt;div&gt;      &lt;common-item /&gt;//同步组件      &lt;async-common-item /&gt;//异步组件    &lt;/div&gt;  `});app.component('common-item', {  template: `&lt;div&gt;hello world&lt;/div&gt;`});app.component('async-common-item', Vue.defineAsyncComponent(() =&gt; {  return new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {      resolve({        template: `&lt;div&gt;this is an async component&lt;/div&gt;`      })    }, 4000)  })}))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Vue.defineAsyncComponent(() =&gt; {})</code> 返回一个promise 当resolved之后就会触发渲染。</li></ul><h2 id="3-8基础语法补充"><a href="#3-8基础语法补充" class="headerlink" title="3.8基础语法补充"></a>3.8基础语法补充</h2><ol><li><p><code>v-once</code> :表示标签只渲染一次，但绑定事件照样会触发</p></li><li><p><code>ref </code> : 获取DOM/组件引用，当页面挂载完，可以操作带有<code>ref</code>属性的DOM元素/组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">mounted() {console.log(this.$refs.count.innerHTML = 'minyue');},template: `&lt;div ref='count'&gt;  {{count}}&lt;/div&gt;`,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过这种语法，获取子组件中的函数，并引用</p></li><li><p><code>provide/inject</code> 跨组件传值</p><pre class="line-numbers language-none"><code class="language-none">const app = Vue.createApp({  data() {    return { count: 1 };  },  provide() {//传递变量数据要函数 返回值形式    return {      count: this.count,    };  },  //provide: {//数据可以直接对象 键值对形式  //count: 1;  //}  template: `  &lt;div&gt;    &lt;child /&gt;    &lt;button @click="count += 1"&gt;Add&lt;/button&gt;  &lt;/div&gt;`,});app.component("child", {  template: `&lt;child-child /&gt;`,});app.component("child-child", {  inject: ["count"],  template: `&lt;div&gt;{{count}}&lt;/div&gt;`,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然这种返回都是<strong>一次性的</strong> 不是双向绑定的关系，数据变化返回值不会更新</p></li></ol><h1 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h1><h2 id="4-1实现基础的CSS过渡和动画"><a href="#4-1实现基础的CSS过渡和动画" class="headerlink" title="4.1实现基础的CSS过渡和动画"></a>4.1实现基础的CSS过渡和动画</h2><ol><li>CSS帧动画</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//style样式&lt;style&gt;  @keyframes leftToRight {    0% {      transform: translate(-100px);    }    50% {      transform: translate(-50px);    }    0% {      transform: translate(0px);    }  }  .animation {    animation: leftToRight 3s;  }&lt;/style&gt;//scriptconst app = Vue.createApp({data() {return {animate: {animation: false;}}},methods() {handleClick() {this.animate.animation = !this.animate.animation;}},template: `&lt;div :class="animate"&gt;hello world&lt;/div&gt;&lt;button @click="handleClick"&gt;切换&lt;/button&gt;`});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>过渡</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//style 样式.transition {transition: 3s background-color ease;}.blue {background: blue;}.green {background: green;}//scriptdata() {return {animate: {transition: true,blue: true,green: false,}}},methods: {handleClick() {this.animate.blue = !this.animate.blue;this.animate.green = !this.animate.green;}},template: `&lt;div&gt;&lt;div :class="animate"&gt;hello world&lt;/div&gt;&lt;button @click="handleClick"&gt;切换&lt;/button&gt;&lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同样也可以通过样式对象来，使用<strong>行内样式</strong>来实现。</li></ul><h2 id="4-2-lt-transition-gt-标签实现单元素组件过渡和动画"><a href="#4-2-lt-transition-gt-标签实现单元素组件过渡和动画" class="headerlink" title="4.2<transition>标签实现单元素组件过渡和动画"></a>4.2<code>&lt;transition&gt;</code>标签实现单元素组件过渡和动画</h2><ol><li>过渡写法</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//过渡css  transition标签对应固定写法.v-enter-from {opacity: 0;//入场效果的初态}.v-enter-active {transition: opacity 3s ease-out;//如何执行动画}.v-enter-to {opacity: 1;//入场效果的终态}.v-leave-from {opacity: 1;//可以省略}.v-leave-active {transition: opacity 3s ease-in;}.v-leave-to {opacity: 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//transition标签包裹需要动画效果的标签//当按钮改变show的值，标签展示隐藏时，就会触发动画&lt;transition&gt;&lt;div v-if="show"&gt;hello&lt;/div&gt;&lt;/transition&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>动画写法</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)关键帧@keyframes shake {0% {transform: translateX(-100px)}50% {transform: translateX(-50px)}100% {transform: translateX(50px)}}.v-enter-active {animation: shake 3s;}.v-leave-active {animation: shake 3s;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>&lt;transform&gt;</code> 标签添加 <code>name</code>属性，, 使用对应<code>name-</code> 代替默认的<code>v-</code></p><p>也可以直接自定义class的名字</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transitionenter-active-class="hello"leave-active-class="bye"&gt;//.....&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义动画方便和第三方库结合 <code>https://animate.style/</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transitionenter-active-class="animate__animated animate__bounce"leave-active-class="animate__animated animate__bounce"&gt;//.....&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>显然动画和过渡可以同时添加在transition标签中。思考，时间不同一，怎么办？</p><blockquote><ol><li><code>transition</code> 标签上添加属性<code>type="transition"</code>表示以过渡为准</li><li>绑定属性<code>:duration="1000"</code>强制1秒完成 ，<code>:duration={enter:1000,leave:2000}</code>表示入场动画1秒，出场动画2秒</li></ol></blockquote></li></ul><ol start="3"><li>使用js实现动画效果</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//(1)css禁用  调用transition过程的钩子函数methods: {handleBeforeEnter(el) {el.style.color = "red";},handleEnterActive(el,done) {const animation = setInteval(() =&gt; {const color = el.style.color;if (color === "red") {el.style.color = 'green';} else {el.style.color = 'red';}}, 1000);setTimeOut(() =&gt; {clearInterval(animation);done();}, 3000)},handleEnterEnd((el)=&gt;{alert(123);//当Active函数中调用了 done()后才能执行})}&lt;transiton:css="false"//禁用css  @before-enter="handleBeforeEnter"//el  @enter="handleEnterActive"//el  done  @after-enter="handleEnterEnd"//el&gt;//....&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3组件和元素切换动画实现"><a href="#4-3组件和元素切换动画实现" class="headerlink" title="4.3组件和元素切换动画实现"></a>4.3组件和元素切换动画实现</h2><ol><li>多个单元素标签之间的切换</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition mode="out-in" appear&gt;//动画先出后进，首次入场动画&lt;div v-if="show"&gt;hello&lt;/div&gt;//show变量值控制两个标签的切换&lt;div v-else="show"&gt;bye&lt;/div&gt;&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mode="out-in"</code>: 动画先出后进，避免出现和消失同时呈现</li><li><code>appear</code>: 首次展示的DOM也会有动画</li></ul><ol start="2"><li>多个组件之间切换     </li></ol><pre class="line-numbers language-none"><code class="language-none">//除了使用 组件 if-show以外，还可以使用component动态组件data() {return {component: 'component-a'}},methods: {handleClick() {this.component = this.component==='component-a'?'component-b':'component-a';}},//&lt;transition mode="out-in" appear&gt;&lt;component :is="component" /&gt;&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4列表添加删除动画"><a href="#4-4列表添加删除动画" class="headerlink" title="4.4列表添加删除动画"></a>4.4列表添加删除动画</h2><pre class="line-numbers language-none"><code class="language-none">//style    v-move 其他项移动会有的动画.v-enter-from {  opacity: 0;  transform: translateY(30px);}.v-enter-active {  transition: all .5s ease-in;}.v-enter-to {  opacity: 1;  transform: translateY(0);}.v-move {  transition: all .5s ease-in;}.list-item {  display: inline-block;//同行显示  margin-right: 10px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//vue  使用到 transition-groupdata() {  return { list: [1, 2, 3] }},methods: {  handleClick() {    this.list.unshift(this.list.length + 1);  },},template: `  &lt;div&gt;    &lt;transition-group&gt;      &lt;span class="list-item" v-for="item in list" :key="item"&gt;{{item}}&lt;/span&gt;    &lt;/transition-group&gt;    &lt;button @click="handleClick"&gt;增加&lt;/button&gt;  &lt;/div&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5状态动画"><a href="#4-5状态动画" class="headerlink" title="4.5状态动画"></a>4.5状态动画</h2><p>数据的变化—&gt;所看到的动画</p><pre class="line-numbers language-none"><code class="language-none">const app = Vue.createApp({  data() {    return {      number: 1,      animateNumber: 1    }  },  methods: {    handleClick() {      this.number = 10;      if(this.animateNumber &lt; this.number) {        const animation = setInterval(() =&gt; {          this.animateNumber += 1;          if(this.animateNumber === 10) {            clearInterval(animation);          }        }, 100);      }    },  },  template: `    &lt;div&gt;      &lt;div&gt;{{animateNumber}}&lt;/div&gt;      &lt;button @click="handleClick"&gt;增加&lt;/button&gt;    &lt;/div&gt;  `});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vue高级用法"><a href="#vue高级用法" class="headerlink" title="vue高级用法"></a>vue高级用法</h1><h2 id="5-1mixin混入"><a href="#5-1mixin混入" class="headerlink" title="5.1mixin混入"></a>5.1mixin混入</h2><ul><li>组件 ：data, methods 优先级高于 mixin data, methods 优先级</li></ul><ul><li>生命周期函数：先执行 mixin 里面的，再执行组件里面的</li></ul><ul><li>自定义的属性，组件种的属性优先级高于 mixin 属性的优先级</li></ul><pre class="line-numbers language-none"><code class="language-none">//局部mixin添加一句  mixins: [myMixin]//全局mixin   app.mixin({})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//自定义属性 this.$options.numberconst myMixin = {    number: 1  }const app = Vue.createApp({  mixins: [myMixin],  number: 2,  template: `    &lt;div&gt;    &lt;div&gt;{{this.$options.number}}&lt;/div&gt;    &lt;/div&gt;  `});//自定义优先级app.config.optionMergeStrategies.number = (mixinVal, appValue) =&gt; {  return mixinVal || appValue;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2自定义指令"><a href="#5-2自定义指令" class="headerlink" title="5.2自定义指令"></a>5.2自定义指令</h2><p>比如：自动聚焦实现</p><pre class="line-numbers language-none"><code class="language-none">//(1)可以使用生命周期函数实现mounted() {this.$refs.input.focus();},template: `&lt;input ref="input" /&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//(2)创建自定义指令 directive&lt;input v-focus /&gt; //可以实现同样效果//全局的自定义指令app.directive('focus', {mounted(el) {el.focus();},})//局部自定义指令const directive = {focus: {mounted(el) {el.focus();},},}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="2021/01/04/http/"/>
      <url>2021/01/04/http/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP</title>
      <link href="2021/01/04/tcp/"/>
      <url>2021/01/04/tcp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器</title>
      <link href="2021/01/04/liu-lan-qi/"/>
      <url>2021/01/04/liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-关于浏览器缓存"><a href="#1-关于浏览器缓存" class="headerlink" title="1.关于浏览器缓存"></a>1.关于浏览器缓存</h1><ul><li>强缓存<ul><li>Expires</li><li>Cache-Control</li></ul></li><li>协商缓存<ul><li>Last-Modified</li><li>ETag</li></ul></li><li>缓存位置<ul><li>Service Woker</li><li>Memory Cache 和 Disk Cache</li><li>Push Cache</li></ul></li><li>简述缓存机制？</li></ul><a id="more"></a><h1 id="2-关于浏览器本地存储"><a href="#2-关于浏览器本地存储" class="headerlink" title="2.关于浏览器本地存储"></a>2.关于浏览器本地存储</h1><ul><li><p>cookie</p></li><li><p>WebStorage</p><ul><li>localStorage</li><li>sessionStorage</li></ul></li><li><p>indexedDB</p></li><li><p>简述各自的应用场景和特点？</p></li></ul><h1 id="3-说一说从输入URL到页面呈现发生了什么？–网络篇"><a href="#3-说一说从输入URL到页面呈现发生了什么？–网络篇" class="headerlink" title="3.说一说从输入URL到页面呈现发生了什么？–网络篇"></a>3.说一说从输入URL到页面呈现发生了什么？–网络篇</h1><ul><li>网络请求<ul><li>构建请求（行）</li><li>查找强缓存</li><li>DNS解析</li><li>建立TCP连接</li><li>发送HTTP请求</li></ul></li><li>网络响应</li><li>简述浏览器端网络请求过程？</li></ul><h1 id="4-说一说从输入URL到页面呈现发生了什么？–解析算法篇"><a href="#4-说一说从输入URL到页面呈现发生了什么？–解析算法篇" class="headerlink" title="4.说一说从输入URL到页面呈现发生了什么？–解析算法篇"></a>4.说一说从输入URL到页面呈现发生了什么？–解析算法篇</h1><ul><li><p>构建DOM树</p><ul><li>HTML文法-上下文有关文法</li><li>解析算法<ul><li>标记化算法</li><li>建树算法</li></ul></li></ul></li><li><p>样式计算</p><ul><li>格式化样式表</li><li>标准化样式属性</li><li>计算每个节点的具体样式（计算规则）</li></ul></li><li><p>生成布局树</p></li><li><p>简述解析html文档到布局树流程？</p></li></ul><h1 id="5-说一说从输入URL到页面呈现发生了什么？–渲染过程篇"><a href="#5-说一说从输入URL到页面呈现发生了什么？–渲染过程篇" class="headerlink" title="5.说一说从输入URL到页面呈现发生了什么？–渲染过程篇"></a>5.说一说从输入URL到页面呈现发生了什么？–渲染过程篇</h1><ul><li>建立<code>图层树</code>(<code>Layer Tree</code>)<ul><li>显示合成</li><li>隐式合成</li></ul></li><li>生成<code>绘制列表</code></li><li>生成<code>图块</code>并<code>栅格化</code>—合成线程</li><li>显示器显示内容</li><li>简述页面渲染过程？</li></ul><h1 id="6-谈谈你对重绘和回流的理解"><a href="#6-谈谈你对重绘和回流的理解" class="headerlink" title="6.谈谈你对重绘和回流的理解"></a>6.谈谈你对重绘和回流的理解</h1><ul><li>回流<ul><li>触发条件</li><li>回流过程</li></ul></li><li>重绘<ul><li>触发条件</li><li>重绘过程</li></ul></li><li>合成<ul><li>GPU加速的原因？</li></ul></li><li>简述这三种方式对提升性能有什么指导意义？</li></ul><h1 id="7-说说XSS攻击"><a href="#7-说说XSS攻击" class="headerlink" title="7.说说XSS攻击"></a>7.说说XSS攻击</h1><ul><li>什么是XSS攻击？<ul><li>存储型</li><li>反射型</li><li>文档型</li></ul></li><li>防范措施<ul><li>一个信念</li><li>使用CSP</li><li>使用HttpOnly</li></ul></li></ul><h1 id="8-说说CSRF攻击"><a href="#8-说说CSRF攻击" class="headerlink" title="8.说说CSRF攻击"></a>8.说说CSRF攻击</h1><ul><li><p>什么是CSRF攻击？</p><ul><li>自动发GET请求</li><li>自动发POST请求</li><li>诱导点击发送GET请求</li></ul></li><li><p>防范措施</p><ul><li>利用Cookie的SameSite属性</li><li>验证来源站点</li><li>CSRF Token</li></ul></li><li><p>防范措施</p><ul><li>一个信念</li></ul></li></ul><h1 id="9-HTTPS为什么让数据传输更安全？"><a href="#9-HTTPS为什么让数据传输更安全？" class="headerlink" title="9.HTTPS为什么让数据传输更安全？"></a>9.HTTPS为什么让数据传输更安全？</h1><ul><li>对称加密和非对称加密</li><li>两者结合</li><li>添加数字证书</li></ul><h1 id="10-能不能实现事件的防抖和节流？"><a href="#10-能不能实现事件的防抖和节流？" class="headerlink" title="10.能不能实现事件的防抖和节流？"></a>10.能不能实现事件的防抖和节流？</h1><ul><li>加强版节流</li></ul><h1 id="11-能不能实现图片懒加载？"><a href="#11-能不能实现图片懒加载？" class="headerlink" title="11.能不能实现图片懒加载？"></a>11.能不能实现图片懒加载？</h1><ul><li>方案一:clientHeight、scrollTop 和 offsetTop</li><li>方案二：getBoundingClientRect</li><li>方案三: IntersectionObserver</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习</title>
      <link href="2020/12/23/suan-fa-xue-xi/"/>
      <url>2020/12/23/suan-fa-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="分类大纲"><a href="#分类大纲" class="headerlink" title="分类大纲"></a>分类大纲</h1><ol><li>算法的复杂度分析。</li><li>排序算法，以及他们的区别和优化。</li><li>数组中的双指针、滑动窗口思想。</li><li>利用 Map 和 Set 处理查找表问题。</li><li>链表的各种问题。</li><li>利用递归和迭代法解决二叉树问题。</li><li>栈、队列、DFS、BFS。</li><li>回溯法、贪心算法、动态规划。</li></ol><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="2020/12/18/flex-bu-ju/"/>
      <url>2020/12/18/flex-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex语法篇"><a href="#Flex语法篇" class="headerlink" title="Flex语法篇"></a>Flex语法篇</h1><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">语法篇-阮大神</a></p><ul><li>Flex（Flexible Box）：弹性布局</li></ul><a id="more"></a><h3 id="一，基本概念"><a href="#一，基本概念" class="headerlink" title="一，基本概念"></a>一，基本概念</h3><ul><li>采用Flex布局的元素，称为Flex容器（Flex container）。他的所有子元素自动成为容器成员，称为Flex项目（Flex item）</li></ul><img data-src="/2020/12/18/flex-bu-ju/image-20201220095004649.png" class="" title="Flex布局"><blockquote><p>容器存在默认的两根轴，水平的主轴（main axis），和垂直的交叉轴（cross axis）</p><p>项目默认按主轴排列，单个项目占据的主轴控件叫做main size，交叉轴空间叫做cross end</p></blockquote><h3 id="二，容器的属性"><a href="#二，容器的属性" class="headerlink" title="二，容器的属性"></a>二，容器的属性</h3><p>容器上有六个属性</p><blockquote><p>flex-direction</p><p>flex-wrap</p><p>flex-flow</p><p>justify-content</p><p>align-content</p></blockquote><h4 id="2-1flex-direction"><a href="#2-1flex-direction" class="headerlink" title="2.1flex-direction"></a>2.1flex-direction</h4><ul><li>决定主轴方向</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span><span class="token property">flex-direction</span><span class="token punctuation">:</span> row/row-reverse/column/column-reverse<span class="token punctuation">;</span><span class="token comment">/*分别表示：垂直反方向，垂直方向，默认水平方向，水平反方向，*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220100104496.png" class="" title="flex-direction"><h4 id="2-2flex-wrap"><a href="#2-2flex-wrap" class="headerlink" title="2.2flex-wrap"></a>2.2flex-wrap</h4><ul><li>默认情况下，项目都排列在一条轴线上，flex-wrap解决，如果一条轴线排列不下如何换行的问题。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap/wrap/wrap-reverse<span class="token punctuation">;</span>  <span class="token comment">/*默认不换行，换行，换行第一行在下方*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220100524250.png" class="" title="flex-wrap"><img data-src="/2020/12/18/flex-bu-ju/image-20201220100736377.png" class="" title="wrap-reverse"><h4 id="2-3flex-flow"><a href="#2-3flex-flow" class="headerlink" title="2.3flex-flow"></a>2.3flex-flow</h4><ul><li>flex-direction和flex-wrap的简写形式，默认值为<code>row nowrap</code></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt;||&lt;flex-wrap&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4justify-content"><a href="#2-4justify-content" class="headerlink" title="2.4justify-content"></a>2.4justify-content</h4><ul><li>定义了项目在主轴上的对齐方式</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start/flex-end/center/space-between/space-around<span class="token punctuation">;</span>  <span class="token comment">/*默认左对齐，右对齐，居中，两端对齐，项目两侧间隔相等*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220101514929.png" class="" title="justify-content"><h4 id="2-5align-items"><a href="#2-5align-items" class="headerlink" title="2.5align-items"></a>2.5align-items</h4><ul><li>根据交叉轴对齐，假设交叉轴为从上到下</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start/flex-end/center/baseline/stretch<span class="token punctuation">;</span>  <span class="token comment">/*交叉轴起点对齐，终点对齐，中点对齐，项目第一行文字基线对齐，默认交叉轴方向拉伸对齐*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220102111505.png" class="" title="align-items"><h4 id="2-6align-content"><a href="#2-6align-content" class="headerlink" title="2.6align-content"></a>2.6align-content</h4><ul><li>多根主线对齐方式（单主线不起作用）</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start/flex-end/center/space-between/space-around/stretch<span class="token punctuation">;</span>  <span class="token comment">/**/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220103300007.png" class="" title="align-content"><h3 id="三，项目的属性"><a href="#三，项目的属性" class="headerlink" title="三，项目的属性"></a>三，项目的属性</h3><blockquote><p>order</p><p>flex-grow</p><p>flex-shrink</p><p>flex-basis</p><p>flex</p><p>align-self</p></blockquote><h4 id="3-1order"><a href="#3-1order" class="headerlink" title="3.1order"></a>3.1order</h4><ul><li>定义项目的排列顺序，数值越小，排列越靠前，默认为0；</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220103704182.png" class="" title="order"><h4 id="3-2flex-grow"><a href="#3-2flex-grow" class="headerlink" title="3.2flex-grow"></a>3.2flex-grow</h4><ul><li>定义项目的放大比例，默认为0（即，存在剩余空间也不放大。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220104450433.png" class="" title="flex-grow"><blockquote><p>所有项目flex-grow属性都为1，等分剩余空间</p><p>类推</p></blockquote><h4 id="3-3flex-shrink"><a href="#3-3flex-shrink" class="headerlink" title="3.3flex-shrink"></a>3.3flex-shrink</h4><ul><li>定义项目的缩小比例，默认为1（即，空间如果不足，项目将缩小）</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220104854968.png" class="" title="flex-shrink"><blockquote><p>如果所有项目都为1，等比例缩小</p><p>如果有一个为0，其他为1，空间不足时前者不缩小</p></blockquote><h4 id="3-4flex-basis"><a href="#3-4flex-basis" class="headerlink" title="3.4flex-basis"></a>3.4flex-basis</h4><ul><li>在分配多余空间之前，项目占据的主轴空间（main size）。浏览器也根据这个属性计算主轴是否有多余空间。默认值auto，项目本来大小。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length&gt;|auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置占据的<code>main size</code>长度，将占据固定空间</li></ul><h4 id="3-5flex"><a href="#3-5flex" class="headerlink" title="3.5flex"></a>3.5flex</h4><ul><li>flex-grow，flex-shrink，flex-basis的简写，默认值为<code>0 [1 auto]</code>.</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none|auto|[ &lt;<span class="token string">'flex-grow'</span>&gt; &lt;<span class="token string">'flex-shrink'</span>&gt; &lt;<span class="token string">'flex-basis'</span>&gt; ]<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>快捷值：auto（1 1 auto），none（0 0 auto）</p><p>建议优先使用这个属性</p><p>后两个可选。</p></blockquote><h4 id="3-6align-self"><a href="#3-6align-self" class="headerlink" title="3.6align-self"></a>3.6align-self</h4><ul><li>允许单个项目有和其他项目不一样的对齐方式。可以覆盖<code>align-items</code> 默认值为<code>auto</code>，表示继承<code>.box </code>的<code>align-items</code></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto/flex-start/flex-end/center/baseline/stretch<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220110456877.png" class="" title="align-self"><h1 id="Flex布局-实例篇"><a href="#Flex布局-实例篇" class="headerlink" title="Flex布局-实例篇"></a>Flex布局-实例篇</h1><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">实例篇-阮大神</a></p><h3 id="一，骰子的布局"><a href="#一，骰子的布局" class="headerlink" title="一，骰子的布局"></a>一，骰子的布局</h3><img data-src="/2020/12/18/flex-bu-ju/00506193.png" class="" title="骰子">的一个面最多放置9个点，HTML模板如下：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>div元素表示 flex容器；span元素表示 flex项目</p></blockquote><h4 id="1-1单项目"><a href="#1-1单项目" class="headerlink" title="1.1单项目"></a>1.1单项目</h4><p>首先只有左上角一个点的情况，Flex布局默认左对齐。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220111348214.png" class="" title="单项目"> <p>设置项目对齐方式，实现居中对齐和右对齐</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*左对齐*/</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*右对齐*/</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220111740879.png" class="" title="单项目-居中"> <img data-src="/2020/12/18/flex-bu-ju/image-20201220111802890.png" class="" title="单项目-右对齐"><p>设置交叉轴对齐方式，可以垂直移动主轴</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*交叉轴居中*/</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*交叉轴，主轴居中*/</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220112357019.png" class="" title="交叉轴居中"> <img data-src="/2020/12/18/flex-bu-ju/image-20201220112417035.png" class="" title="交叉轴/主轴居中"><h4 id="1-2双项目"><a href="#1-2双项目" class="headerlink" title="1.2双项目"></a>1.2双项目</h4><p>当对角分布时</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.second-face</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.second-face .pip:nth-of-type(2)</span> <span class="token punctuation">{</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220135131492.png" class="" title="对角分布"> <h4 id="1-3多项目时"><a href="#1-3多项目时" class="headerlink" title="1.3多项目时"></a>1.3多项目时</h4><p>三个对角线</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.third-face</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.third-face .pip:nth-of-type(2)</span> <span class="token punctuation">{</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.third-face .pip:nth-of-type(3)</span> <span class="token punctuation">{</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220135259305.png" class="" title="三对角线"> <p>四角分布/六点分布</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.forth-face,.sixth-face</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.forth-face .column,.sixth-face .column</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220135743752.png" class="" title="四角分布"> <img data-src="/2020/12/18/flex-bu-ju/image-20201220135850935.png" class="" title="六点分布"><p>五点分布</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fifth-face</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fifth-face .column</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fifth-face .column:nth-of-type(2)</span> <span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/12/18/flex-bu-ju/image-20201220140006393.png" class="" title="五点分布"><h3 id="二，网格布局"><a href="#二，网格布局" class="headerlink" title="二，网格布局"></a>二，网格布局</h3><p>也就是通过<strong>百分比</strong>来布局</p><img data-src="/2020/12/18/flex-bu-ju/image-20201220140811347.png" class="" title="网格布局"><p>其中某些需要固定百分比，其余平均分配</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--第三行 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Grid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Grid-cell u-1of4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Grid-cell<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Grid-cell u-1of3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.Grid</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Grid-cell</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Grid-cell.u-full</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Grid-cell.u-1of2</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 50%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Grid-cell.u-1of3</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 33.3333%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Grid-cell.u-1of4</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 25%<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三，圣杯布局"><a href="#三，圣杯布局" class="headerlink" title="三，圣杯布局"></a>三，圣杯布局</h3><p>页面从上到下，分为三个部分：头部，主体部分（分为导航，主题，副栏），尾部</p><img data-src="/2020/12/18/flex-bu-ju/image-20201220141407196.png" class="" title="圣杯布局"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HolyGrail<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>...header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HolyGrail-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HolyGrail-nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...HolyGrail-nav<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HolyGrail-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...HolyGrail-content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HolyGrail-ads<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...HolyGrail-ads<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>...footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.HolyGrail</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><span class="token comment">/*可视区的100%*/</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header,footer</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.HolyGrail-body</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.HolyGrail-content</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token comment">/*充斥所有剩余部分*/</span><span class="token punctuation">}</span><span class="token selector">.HolyGrail-nav, .HolyGrail-ads</span> <span class="token punctuation">{</span>  <span class="token comment">/* 两个边栏的宽度设为12em */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 12em<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*小屏幕，躯干的三栏自动变为垂直叠加*/</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">.HolyGrail-body</span> <span class="token punctuation">{</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.HolyGrail-nav,  .HolyGrail-ads,  .HolyGrail-content</span> <span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四，悬挂式布局"><a href="#四，悬挂式布局" class="headerlink" title="四，悬挂式布局"></a>四，悬挂式布局</h3><p>图片侧栏的布局</p><p>可以灵活使用从上到下的垂直主轴。</p><img data-src="/2020/12/18/flex-bu-ju/image-20201220143156189.png" class="" title="悬挂式"><h3 id="五，固定底栏"><a href="#五，固定底栏" class="headerlink" title="五，固定底栏"></a>五，固定底栏</h3><p>垂直主轴布局，将主体部分充斥就可以了。</p><img data-src="/2020/12/18/flex-bu-ju/image-20201220143312601.png" class="" title="固定底栏"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Site<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Site-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.Site</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.Site-content</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六，流式布局"><a href="#六，流式布局" class="headerlink" title="六，流式布局"></a>六，流式布局</h3><p>固定每行项目数，会自动分行</p><img data-src="/2020/12/18/flex-bu-ju/image-20201220143658586.png" class="" title="流式布局"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token comment">/*多行主轴排列方式*/</span><span class="token punctuation">}</span><span class="token selector">.child</span> <span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment">/*防止边框因素溢出*/</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 25%<span class="token punctuation">;</span><span class="token comment">/*固定每行四个*/</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试复习</title>
      <link href="2020/12/18/qian-duan-mian-shi-fu-xi/"/>
      <url>2020/12/18/qian-duan-mian-shi-fu-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/user/2330620350708823">学习ssh大佬的文章</a> </p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><a id="more"></a><p><a href="https://rainylog.com/post/ife-note-1/">https://rainylog.com/post/ife-note-1/</a></p><h3 id="1-语义化"><a href="#1-语义化" class="headerlink" title="1.语义化"></a>1.语义化</h3><ul><li><p>语义化标签，易修改易维护，无障碍阅读支持，利于SEO</p><blockquote><p>SEO:搜索引擎优化（技术：语义化H5;撰稿：使用访问者词汇，图文并茂；声望：其他站点的链接）</p></blockquote></li><li><p>结构语义化</p><blockquote><p>他们不对内容有什么本质的影响，只是页面结构规范</p><img data-src="/2020/12/18/qian-duan-mian-shi-fu-xi/image-20201218131903848.png" class="" title="H5语义化"></blockquote></li><li><p>头部<code>&lt;header&gt;</code> </p><blockquote><p>用法一：标注内容的标题</p><p>用法二：页面的页眉</p></blockquote></li><li><p>导航栏<code>&lt;nav&gt;</code></p><blockquote><p>两种用法</p><pre class="line-numbers language-none"><code class="language-none">&gt;&lt;!-- 案例一 --&gt;  一组只是链接的附加内容&gt;&lt;nav&gt;&lt;!-- 此处是链接 --&gt;&lt;aside&gt;&lt;/aside&gt;&lt;aside&gt;&lt;/aside&gt;&gt;&lt;/nav&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;&lt;!-- 案例二 --&gt;  附加内容中除了链接还有其他模块&gt;&lt;aside&gt;&lt;nav&gt;  &lt;!-- 此处是链接 --&gt;&lt;/nav&gt;&lt;section&gt;&lt;/section&gt;&lt;div&gt;&lt;/div&gt;&gt;&lt;/aside&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>附注<code>&lt;aside&gt;</code></p><blockquote><p>它不仅仅是侧栏，也表示周围和主要文本没有密切关系的内容，说明附加内容，解释说明，相关链接等</p><ul><li>通常为广告区域，搜索，分享链接</li><li>其中的<code>&lt;section&gt;</code>规定一个带有标题的区域（与主题内容并列显示的小块区域，独立内容（如：表单），文章分类区块）</li></ul></blockquote></li><li><p>页脚<code>&lt;footer&gt;</code></p><blockquote><p>常包含版权信息，法律限制等之类的文本或链接。</p><pre class="line-numbers language-none"><code class="language-none">&gt;// 含有其他内容时&gt;&lt;div&gt;&lt;aside&gt;&lt;!-- 其它内容 --&gt;&lt;/aside&gt;&lt;footer&gt;  &lt;!-- 法律、版权、来源、联系信息等 --&gt;&lt;/footer&gt;&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>主要内容<code>&lt;main&gt;</code></p><blockquote><p>标识主体内容，通常是<code>&lt;body&gt;</code>的子标签，可以帮助屏幕阅读工具识别页面主要部分</p></blockquote></li><li><p>文章<code>&lt;article&gt;</code></p><blockquote><p>应该包含完整的标题，文庄署名，发布时间，正文</p><ul><li>文章中包含插图时，使用新的 语义化标签<code>&lt;figure&gt;</code></li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;&lt;article&gt;&lt;h1&gt;标题&lt;/h1&gt;&lt;p&gt;  &lt;!-- 内容 --&gt;&lt;/p&gt;&lt;figure&gt;  &lt;img src="#" alt="插图"&gt;  &lt;figcaption&gt;这是一个插图&lt;/figcaption&gt;&lt;/figure&gt;&gt;&lt;/article&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;img&gt;</code>的<code>alt</code>属性可以略去</p><p>（<code>&lt;figcaption&gt;</code>应该被放置在<code>&lt;figure&gt;</code>的第一个或最后一个）</p></blockquote></li></ul><h1 id="CSS基础面试题"><a href="#CSS基础面试题" class="headerlink" title="CSS基础面试题"></a>CSS基础面试题</h1><h3 id="1-50道CSS基础题"><a href="#1-50道CSS基础题" class="headerlink" title="1.50道CSS基础题"></a>1.50道CSS基础题</h3><p><a href="https://segmentfault.com/a/1190000013325778">https://segmentfault.com/a/1190000013325778</a></p><ol><li><p>标准css盒子模型，低版本IE盒子模型区别</p><ul><li>box-sizing</li><li>JS获取盒子模型对应宽高（dom.style.width内联样式;window.getComputedStyle(dom.width实际样式大小;dom.getBoundingClientRect().width通过视口距离实际大小)</li><li>父子边距重叠(父元素设置BFC)兄弟元素重叠(给下面的套个BFC父盒子；下面的设置inline-box)</li></ul></li><li><p>css选择器有哪些？那些属性可以继承？优先级？</p></li></ol><ol start="3"><li><p>如何居中div？居中一个浮动元素？居中一个<strong>绝对定位元素</strong>？</p></li><li><p>display有哪些值？</p></li><li><p>position的值？</p></li><li><p>CSS3新特性？</p></li><li><p>Flexbox？</p></li><li><p>CSS三角？</p></li><li><p>常见兼容性问题（默认内外边距？Chrome中文文本&gt;=12px？<a href="https://cloud.tencent.com/developer/article/1444600">超链接失效？love hate</a></p></li><li><p>为什么要初始化CSS样式？</p></li><li><p>absolute的containing block计算方式？</p></li><li><p>不同浏览器下，visibility属性的collapse属性值的区别？（hidden，visible）</p></li><li><p>display：none和visibility：hidden区别？</p></li><li><p>position，display，overflow，float属性重叠会？</p></li><li><p>对BFC规范的理解（块级格式化上下文block formatting context）？<a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">BFC</a></p></li><li><p>浮动？清除浮动？</p></li><li><p>上下外边距重合？</p></li><li><p>设置元素浮动后，元素的display值是？</p></li><li><p>移动端布局使用过媒体查询嘛？<a href="https://www.jianshu.com/p/2dfa5bab1ef1">媒体查询</a></p></li><li><p><a href="https://www.jianshu.com/p/da1e1ceeae1a">css预处理器</a>less，sass</p></li><li><p><a href="https://www.jianshu.com/p/4e673bf24a3b">css优化提高性能的方法？</a></p></li><li><p>浏览器是怎样解析CSS选择器的?</p></li><li><p>在网页中一个使用奇数还是偶数的字体？</p></li><li><p>margin和padding分别适合在什么场景？</p></li><li><p>元素竖向的百分比设定是相对于容器的高度嘛？</p></li><li><p><a href="https://github.com/haizlin/fe-interview/issues/182">全屏滚动</a></p></li><li><p><a href="https://www.w3cschool.cn/frontend_notebook/frontend_notebook-hl3u27a4.html">响应式设计</a></p></li><li><p><a href="https://www.cnblogs.com/coco1s/p/9453938.html">视差滚动效果</a></p></li><li><p>::before和:after中单引号和双引号的区别？<a href="https://www.php.cn/css-tutorial-412795.html">伪元素</a></p></li><li><p>对line-height理解？文本垂直居中（多行，单行）</p></li><li><p>怎么让Chrome支持小于12px字号？</p></li><li><p>让一碗面字体变清晰，变细css怎么做？（win，ios）</p></li><li><p>如果要手动写动画，最好的时间间隔是多少？60hz</p></li><li><p>li与li之间看不见的空白间隙是怎么产生的？如何解决？<code> letter-spacing: -3px;</code></p></li><li><p>有一个高度自适应的div，里面有两个div，一个高度为100px，希望另一个填满剩余高度？<code>子绝父相</code></p></li><li><p>png，jpg，gif图片格式解释？webp格式？</p></li><li><p>CSS Sprites精灵图？</p></li></ol><h3 id="2-Flex-布局"><a href="#2-Flex-布局" class="headerlink" title="2.Flex 布局"></a>2.Flex 布局</h3><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex</a></p><ul><li>传统布局基于盒子模型，<code>display属性</code>， <code>position属性</code>， <code>float属性</code></li><li>Flex布局就是弹性布局，用来为盒子模型提供最大的灵活性</li></ul><h3 id="3-什么是BFC"><a href="#3-什么是BFC" class="headerlink" title="3.什么是BFC"></a>3.什么是BFC</h3><p>可以参考<a href="http://47.98.159.95/my_blog/blogs/css/008.html#_3-bfc%E6%B8%B2%E6%9F%93%E8%A7%84%E5%88%99">BFC-三元</a></p><blockquote><p>定义：浮动元素和绝对定位元素，非块级盒子的块级容器（比如：inline-blocks，table-cells，和table-captions），以及overflow值不为“visiable”的块级盒子，都会创建新的BFC</p></blockquote><blockquote><p>渲染规则：</p><ul><li><p>垂直方向外边距重叠</p><p>避免外边距塌陷</p></li><li><p>BFC区域不会和浮动元素的box重叠</p><p>防止浮动导致父元素高度坍塌</p></li><li><p>BFC是一个独立容器，不受外面元素影响</p></li><li><p>计算BFC高度时，浮动元素也参与计算</p></li></ul></blockquote><h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><h3 id="1-讲一讲JS数据类型"><a href="#1-讲一讲JS数据类型" class="headerlink" title="1.讲一讲JS数据类型"></a>1.讲一讲JS数据类型</h3><p>最新ES标准规定8种<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures">数据类型</a></p><ul><li><p>6 种原始类型，有<code>typeof</code>运算符检查</p><ul><li>Boolean      <code>typeof instance === "boolean"</code></li><li>Undefined  <code>typeof instance === "undefined"</code></li><li>Number      <code>typeof instance === "number"</code></li><li>BigInt          <code>typeof instance === "bigint"</code></li><li>String          <code>typeof instance === "string"</code></li><li>Symbol       <code>typeof instance === "symbol"</code></li></ul></li><li><p>结构类型</p><ul><li><p>object         <code>typeof instance === "object"</code></p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>Map</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"><code>WeakMap</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"><code>WeakSet</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"><code>Date</code></a></p></blockquote></li><li><p>function     <code>typeof instance === "function"</code></p></li></ul></li><li><p>结构根基元</p><ul><li>null              <code>typeof instance === "object"</code></li></ul></li></ul><h3 id="2-讲一讲Map和Set"><a href="#2-讲一讲Map和Set" class="headerlink" title="2.讲一讲Map和Set"></a>2.讲一讲Map和Set</h3><p><a href="https://zh.javascript.info/map-set">Map和Set</a></p><ol><li><p>Map的key相对普通对象来说更加灵活，普通对象的key只能以基础数据类型作为key值，并且所有传入的key值都会被转化为string类型，而Map的key可以是各种数据类型</p><blockquote><p>Map使用<code>SameValueZero</code> 算法来比较键是否相等（和“===”差不多），只是NaN被看做等于NaN(也可以被作为键值)</p></blockquote></li><li><p>Set</p><blockquote><p>特殊的类型集合，“值的集合”，不重复</p><ul><li>重复使用同一个值调用 <code>set.add(value)</code> 并不会发生什么改变</li></ul></blockquote></li></ol><h3 id="3-WeakMap和Map之间的区别？"><a href="#3-WeakMap和Map之间的区别？" class="headerlink" title="3.WeakMap和Map之间的区别？"></a>3.WeakMap和Map之间的区别？</h3><p><a href="https://zh.javascript.info/weakmap-weakset">WeakMap</a></p><ol><li><code>WeakMap</code> 的键必须是对象，不能是原始值</li><li>key值是<strong>弱引用</strong>，在 weakMap 中使用一个对象作为键，并且没有其他对这个对象的引用 —— 该对象将会被从内存（和map）中自动清除。</li><li>不能迭代，并且无法获取所有当前内容。</li></ol><p>使用场景：用户数据的存储（删除用户，回收内存）；缓存数据</p><h3 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4.原型链"></a>4.原型链</h3><img data-src="/2020/12/18/qian-duan-mian-shi-fu-xi/img4.png" class="" title="原型链"><ul><li>用于：继承(call,原型链，组合继承)，instanceof</li><li>in检查对象属性（原型链上有也true），<code>obj.hasOwnProperty()</code>，<code>Object.getPrototypeOf/Object.setPrototypeOf</code></li></ul><h3 id="5-this"><a href="#5-this" class="headerlink" title="5.this?"></a>5.this?</h3><ul><li><strong>this是在执行上下文创建时确定的一个在执行过程中不可更改的变量。</strong></li></ul><ol><li>严格模式和非严格模式不一样window/undefined</li><li>函数独立调用时window/undefined；对象方法，；构造函数（new：创建一个临时对象，绑定原型，属性赋值，将临时对象return）；箭头函数；</li></ol><p>优先级: new &gt; call、apply、bind &gt; 对象.方法 &gt; 直接调用。</p><ul><li><strong>闭包</strong>：产生原因，作用域（两种：全局作用域和函数作用域）；表现形式：返回一个函数。刚刚已经举例，作为函数参数传递（回调函数，最直接的表现）；引到es6的let块级作用域。</li></ul><h3 id="6-深拷贝和浅拷贝"><a href="#6-深拷贝和浅拷贝" class="headerlink" title="6.深拷贝和浅拷贝"></a>6.深拷贝和浅拷贝</h3><ul><li>浅拷贝    一般指把对象的第一层拷贝到一个新对象中</li></ul><blockquote><p>实现方式</p><ol><li>Object.assign()  可以把可枚举属性拷贝给目标对象</li><li>函数库lodash的.clone方法</li><li>…展开运算符</li><li>Array.prototype.concat()     字符串连接函数,返回新字符串</li><li>Array.prototype.slice()      提取字符串函数</li></ol></blockquote><ul><li>深拷贝   </li></ul><blockquote><ol><li>JSON.parse(JSON.stringify())  可以处理数组和对象，但不能处理函数和正则（正则变成空对象，函数变成null）</li><li>函数库lodash的_.cloneDeep()  </li><li>jquery中的<code>$.extend(deepCopy, target, object1, [objectN])</code>  返回合并后的新对象</li><li><a href="https://segmentfault.com/a/1190000020255831">手写递归算法</a>   –遍历对象直到里面都是基本数据类型，然后再去复制，就是深拷贝</li></ol></blockquote><h3 id="7-事件冒泡和事件捕获"><a href="#7-事件冒泡和事件捕获" class="headerlink" title="7.事件冒泡和事件捕获"></a>7.事件冒泡和事件捕获</h3><ul><li>如何设置两者</li></ul><ol><li><p>事件冒泡：<code>event.target</code>,停止：</p></li><li><p>事件捕获：</p><p><code>element.addEventListener(event, function, useCapture)</code>第三个参数</p></li></ol><blockquote><p>event : 必须，不要on前缀 “click” ，react中<code>onClick</code>,</p><p>function : 必须，事件对象会作为第一个参数传入e.target</p><p>useCapture：布尔值，决定是捕获阶段，还是冒泡阶段（默认false）</p></blockquote><ul><li>应用：<strong>事件代理</strong></li></ul><blockquote><p><strong>事件冒泡机制，点击了 li 后会冒泡到 ul ，此时就会触发绑定在 ul 上的点击事件，再利用 target 找到事件实际发生的元素，就可以达到预期的效果。</strong></p></blockquote><ul><li>如何阻止事件冒泡？</li></ul><p><code>event.stopPropagation()</code>,(当前元素的其他行为还会触发)<code>event.stopImmediatePropagation()</code> 其他处理程序不再执行，不要在没有需要的情况下停止冒泡！替代方法：自定义事件；数据在一个处理程序中被存event对象中，可以在另一个处理程序中使用。</p><ul><li>如何阻止默认事件？</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//非IE浏览器</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">//IE浏览器(IE11以下)</span>  window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//return false;   //或者不写上面的判断直接写这句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h1><ol><li><p><strong>框架的优势：</strong></p><p>组件化—天然分层—生态—开发效率</p><ul><li>MVC（view层，Model层，<strong>Control层</strong>（逻辑集中，与View层一一对应，何谈复用））</li><li>MVP（Model 层和 View 层都必须通过 <strong>Presenter 层</strong>来传递信息，MV复用性好）</li><li>MVVM(View和ViewModel 是进行绑定的，改变ViewModel 就会直接作用到View视图上)(数据绑定方式：发布-订阅模式（<code>vm. set( ' property', value)</code>），数据劫持(通过<code> Object.defineProperty()</code>来劫持各个属性的setter,getter)，脏值检查(通过 <code>setInterval()</code> 定时轮询检测数据变动),angular.js,指定事件触发)</li></ul></li><li><p><strong>虚拟DOM优势</strong>：跨平台（虚拟DOM本质上是JavaScript对象,而DOM与平台强相关）；保证性能下限</p></li><li><p><strong>生命周期</strong>：挂载阶段、更新阶段、卸载阶段</p><img data-src="/2020/12/18/qian-duan-mian-shi-fu-xi/image-20210315221003637.png" class="" title="image-20210315221003637"></li><li><p><strong>setState</strong>到底是异步还是同步?</p><ul><li>在合成事件（onClick等）和钩子函数中是“异步”的（也是批量更新，原理）</li><li>原生事件和<code>setTimeout</code> 中都是同步</li></ul></li><li><p><strong>React 复用组件逻辑</strong></p><ul><li><p>Mixins：还是使用createClass时遗留的产物（不支持es6，<code>Mixins</code> 引入了隐式的依赖关系，会导致名称冲突）</p></li><li><p>HOC：一个纯函数，接受一个组件作为参数，返回一个新的组件（<code>connect</code> 是一个返回高阶组件的高阶函数）注意：不要在render中使用，需复制静态方法，refs不被传递（被<code>React.forwardRef((props,ref)=&gt;{})</code>解决）</p></li><li><p>render props:嵌套过深！</p></li><li><p>HOOKS：简洁: React Hooks解决了HOC和Render Props的嵌套问题；解耦: React Hooks可以更方便地把 UI 和状态分离；解决了类组件的几大问题:this 指向容易错误，分割在不同声明周期中的逻辑和维护代码复用成本高；</p><p>React.memo并不能完全替代shouldComponentUpdate（因为拿不到 state change，只针对 props change）</p></li></ul></li><li><p><strong>fiber算法</strong>：<strong>单线程调度算法</strong>，<code>reconcilation</code> 算法实际上是递归，想要中断递归是很困难的，React 16 开始使用了循环来代替之前的递归（将递归diff，拆分为小任务，老生代垃圾回收！），时间分片思想（异步渲染模式）</p></li><li><p><strong>redux</strong>：类flux架构，状态管理（单一数据源，状态只读，改变由纯函数进行）</p><img data-src="/2020/12/18/qian-duan-mian-shi-fu-xi/16cbc24efb408781" class="" title="img"></li><li><p><strong>react-redux</strong>：Provider+connect</p></li><li><p><strong>中间件</strong>：</p><ol><li><p>thunk 中间件</p><blockquote><p>dispatch一个action<br>action可以是一个函数 并接收一个dispath函数<br>可以在action的函数中进行异步操作<br>接受到数据后再dispatch一个action 此action必须是一个对象包含type和数据<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li><li><p>saga 中间件</p><blockquote><p>dispatch一个action<br>action只能是对象 并且type必须是reducer没有的<br>sagas.js拦截此type并执行另一个函数进行异步操作<br>接受到数据后再dispatch一个action 并且type必须是reducer存在的<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li><li><p>原生</p><blockquote><p>在componentDidMount生命周期函数里 执行异步操作 接受到数据后dispatch一个action<br>此action必须是一个对象包含type和数据<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li></ol></li><li><p><strong>react-router</strong>：</p></li></ol><ul><li><p>实现原理：依赖 history 库，通过路由匹配，决定应该展示什么样的组件。保证视图和 URL 的同步（hash，h5API，memory）</p></li><li><p>link和a的区别：（link不会重新渲染页面；link最终会被渲染为a；link的to，query，hash会组合为href；内部实现上使用脚本拦截了<strong>浏览器的默认行为</strong>，然后调用了history.pushState 方法）</p></li><li><p>路由有几种模式：</p><ol><li>HashRouter（URL中的哈希部分保证页面和url同步，window.location.hash<code>和</code>hashchange无法记录历史回退）</li><li>BrowseRouter（利用h5的history API，pushState<code>和</code>popState）</li><li>MemoryRouter：不存储history，所有路由过程保存在内存里，不能进行前进后退</li><li>NativeRouter：经常配合ReactNative使用，多用于移动端</li><li>StaticRouter：设置静态路由，需要和后台服务器配合设置</li></ol></li><li><p><strong>switch作用</strong>：排他性路由，采用 <code>&lt;Switch&gt;</code>，只有<strong>一个路由</strong>会被渲染，并且总是渲染第一个匹配到的组件，更好进行路由匹配</p></li><li><p><strong>重定向</strong>：采用 Redirect 进行重定向</p></li><li><p><strong>history中push和replace</strong>：一个路由栈，push会新增一条记录，replace替换当前（项目中props.history.push(<code>/singers/${id}</code>);） </p><p>获取history对象（import { useHistory } from “react-router-dom”;或者let history = this.props.history;）</p></li></ul><ol start="11"><li><strong>react有什么坑点？</strong></li></ol><ul><li><p>JSX做表达式判断时候，需要强转为boolean类型</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">render() {  const b = 0;  return (    &lt;div&gt;      {b &amp;&amp; &lt;div&gt;test&lt;/div&gt;}    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用 !!b 进行强转数据类型，会在页面里面输出 0。</p></li><li><p>遍历子节点的时候，不要用 index 作为组件的 key 进行传入</p></li><li><p>尽量不要在 componentWillReviceProps 里使用 setState，如果一定要使用，那么需要判断结束条件，不然会出现无限重渲染，导致页面崩溃。(实际不是componentWillReviceProps会无限重渲染，而是componentDidUpdate)</p></li><li><p>给组件添加ref时候，尽量不要使用匿名函数，因为当组件更新的时候，匿名函数会被当做新的prop处理，让ref属性接受到新函数的时候，react内部会先清空ref，也就是会以null为回调参数先执行一次ref这个props，然后在以该组件的实例执行一次ref，所以用匿名函数做ref的时候，有的时候去ref赋值后的属性会取到null。</p></li></ul><h3 id="1-React"><a href="#1-React" class="headerlink" title="1.React"></a>1.React</h3><p><strong>有没有用过React Hooks？</strong></p><ul><li>常见的API有哪些？都有什么作用？</li><li>如何使用HOOKS在依赖改变时重新发送请求？</li><li>写过自定义HOOK吗？解决了那些问题？</li><li>讲讲React Hooks的闭包陷阱，怎么解决？</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h3 id="1-webpack基础知识"><a href="#1-webpack基础知识" class="headerlink" title="1.webpack基础知识"></a>1.webpack基础知识</h3><ol><li><strong>介绍webpack</strong>：<code>JavaScript</code> 应用程序的静态模块打包器，当 <code>webpack</code> 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 <code>bundle</code>。</li><li><strong>核心概念</strong>：<ul><li>entry: 入口</li><li>output: 输出</li><li>loader: 模块转换器，用于把模块原内容按照需求转换成新内容</li><li>插件(plugins): 扩展插件</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token operator">:</span> <span class="token punctuation">{</span>    main<span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//打包js文件的输出src前缀,这里是根路径</span>    publicPath<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token comment">//开启web服务器并实时重新加载。dist目录放在内存中</span>  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>    contentBase<span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//webpack5 Dev-server有点问题，需要加对象web</span>  target<span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span>  <span class="token comment">//打包文件和源文件映射source-map</span>  <span class="token comment">// cheap：性能好，无需精确列；</span>  <span class="token comment">// module：不只映射当前文件</span>  <span class="token comment">// inline：不生成.map文件，而行内集成</span>  devtool<span class="token operator">:</span> <span class="token string">"eval-cheap-module-source-map"</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">[</span>                <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  targets<span class="token operator">:</span> <span class="token punctuation">{</span>                    edge<span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>                    firefox<span class="token operator">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>                    chrome<span class="token operator">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>                    safari<span class="token operator">:</span> <span class="token string">"11.1"</span><span class="token punctuation">,</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>                  <span class="token comment">//只对需要的语法进行补充</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">//库文件编写，防止全局污染时使用</span>            plugins<span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">[</span>                <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  absoluteRuntime<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                  corejs<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                  helpers<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  regenerator<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  version<span class="token operator">:</span> <span class="token string">"7.0.0-beta.0"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">"[name].[ext]"</span><span class="token punctuation">,</span>            outputPath<span class="token operator">:</span> <span class="token string">"images/"</span><span class="token punctuation">,</span>            limit<span class="token operator">:</span> <span class="token number">204800</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> importLoaders<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>          <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      cleanAfterEveryBuildPatterns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 修改了默认配置文件名时</span><span class="token comment">// npx webpack --config webpackconfig.js</span><span class="token comment">// entry后接字符串是对象main的简写;</span><span class="token comment">// entry: {</span><span class="token comment">//   main: "./src/index.js"</span><span class="token comment">// }</span><span class="token comment">// module.rules就是配置除js文件外的打包文件手段</span><span class="token comment">// {</span><span class="token comment">//   test: /\.jpg$/,</span><span class="token comment">//   use: {</span><span class="token comment">//     loader: "file-loader",</span><span class="token comment">//   },</span><span class="token comment">// },</span><span class="token comment">// 如果想自定义打包文件名称/位置</span><span class="token comment">// 添加options.name属性</span><span class="token comment">// options: {</span><span class="token comment">//   name: "[name].[ext]",</span><span class="token comment">//   outputPath: "images/",</span><span class="token comment">// },</span><span class="token comment">// 这里[name] [ext] [hash]都是占位符</span><span class="token comment">// 在dist目录下新建images文件存放打包的图片</span><span class="token comment">// 和fiile - loader类似的url - loader工具</span><span class="token comment">// 帮我们吧小图片直接base64编码在js文件中</span><span class="token comment">// 添加一个配置项： limit: 20480,   也就是20kb</span><span class="token comment">// css文件 / scss文件打包</span><span class="token comment">// css：</span><span class="token comment">// 首先css - loader整合css到一个文件</span><span class="token comment">// 然后style - loader将这个css挂载到页面的head部分</span><span class="token comment">// scss:</span><span class="token comment">// 安装node - Sass sass - loader</span><span class="token comment">// 先由sass-loader解析.scss文件为css</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h3 id="1-讲一讲web各个阶段的性能优化？"><a href="#1-讲一讲web各个阶段的性能优化？" class="headerlink" title="1.讲一讲web各个阶段的性能优化？"></a>1.讲一讲web各个阶段的性能优化？</h3><p><a href="https://mp.weixin.qq.com/s/XSvhOF_N0VbuOKStwi0IYw">React 16 加载性能优化指南</a></p><h3 id="2-webpack代码分割怎么做？"><a href="#2-webpack代码分割怎么做？" class="headerlink" title="2.webpack代码分割怎么做？"></a>2.webpack代码分割怎么做？</h3><p><a href="https://juejin.im/post/5e796ec1e51d45271e2a9af9">webpack的代码分割（路由懒加载同理）</a></p><p><strong>细看</strong></p><p><a href="https://github.com/xieranmaya/blog/issues/3">https://github.com/xieranmaya/blog/issues/3</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火车票项目</title>
      <link href="2020/11/25/hook-xue-xi/"/>
      <url>2020/11/25/hook-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><a id="more"></a><h2 id="一，项目搭建"><a href="#一，项目搭建" class="headerlink" title="一，项目搭建"></a>一，项目搭建</h2><h3 id="1-1创建项目"><a href="#1-1创建项目" class="headerlink" title="1.1创建项目"></a>1.1创建项目</h3><ul><li>使用<code>create-react-app</code>官方的脚手架工具</li></ul><pre class="line-numbers language-none"><code class="language-none">npx create-react-app train-ticket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>npm:就是一个npm的命令</p><ul><li>方便调用项目内部安装的模块</li><li>避免全局安装的模块</li></ul></blockquote><h3 id="1-2编译脚本"><a href="#1-2编译脚本" class="headerlink" title="1.2编译脚本"></a>1.2编译脚本</h3><ul><li><p>在package.json文件中有</p><blockquote><p>依赖文件<code>dependencies</code></p><ul><li>除了react，react-dom外，就是react-script和一些测试的模块，可以看出主要功能都是react-script完成的。</li></ul><p>脚本文件<code>script</code></p><ol><li>start：指引到react-script中对应start.js，starts.js中后会调用webpack.config.dev.js，实现本地服务环境的搭建等</li><li>build：指引到react-script中对应build.js完成编译过程</li><li>test：测试</li><li>eject：将react-script中的代码功能下放到具体项目实践中，提高项目灵活性</li></ol></blockquote></li></ul><h3 id="1-3eject具体用法"><a href="#1-3eject具体用法" class="headerlink" title="1.3eject具体用法"></a>1.3eject具体用法</h3><pre class="line-numbers language-none"><code class="language-none">npm run eject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>package.json中会增加很多的依赖，这个过程是不可逆的，后面多页面应用会用到修改</li></ul><h2 id="二，React新特性"><a href="#二，React新特性" class="headerlink" title="二，React新特性"></a>二，React新特性</h2><h3 id="2-1Context实现跨层级组件数据传递"><a href="#2-1Context实现跨层级组件数据传递" class="headerlink" title="2.1Context实现跨层级组件数据传递"></a>2.1Context实现跨层级组件数据传递</h3><ul><li>相当于全局变量一样，可以跨组件传递数据的组件树</li></ul><blockquote><ol><li>引入createContext函数</li></ol><ul><li>用这个函数声明想全局使用的变量</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;// 这里也可以设定属性的默认值&gt;const BatteryContext = createContext(90);&gt;const OnlineContext = createContext();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>从provider到consumer</li></ol><ul><li>在父代的顶层state中，value属性初始化想要传递的数据</li><li>多数据使用嵌套模式</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;&lt;BatteryContext.Provider value={battery}&gt; &lt;OnlineContext.Provider value={online}&gt;   &lt;button     type="button"     onClick={() =&gt; this.setState({ battery: battery - 1 })}   &gt;   Press   &lt;/button&gt;   &lt;button     type="button"     onClick={() =&gt; this.setState({ online: !online })}   &gt;   Switch   &lt;/button&gt;   &lt;Middle /&gt;//中间组件 &lt;/OnlineContext.Provider&gt;&gt;&lt;/BatteryContext.Provider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;class Leaf extends Component { render() {   return (     &lt;BatteryContext.Consumer&gt;       {(battery) =&gt; (         &lt;OnlineContext.Consumer&gt;           {(online) =&gt; (             &lt;h1&gt;               Battery: {battery}, Online: {String(online)}             &lt;/h1&gt;           )}         &lt;/OnlineContext.Consumer&gt;       )}     &lt;/BatteryContext.Consumer&gt;   ); }&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>consumer中也是嵌套使用  变量作为传入参数的箭头函数方式使用，最终返回的是JSX语法块。</li></ul></blockquote><h3 id="2-2静态属性contextType"><a href="#2-2静态属性contextType" class="headerlink" title="2.2静态属性contextType"></a>2.2静态属性contextType</h3><ul><li>这样是全局性质的值传递，影响react组件的组件化管理，所以，一般很少使用，当只是用一个数据时，我们使用一个简单方法。</li></ul><blockquote><p>类中定义contextType变量来获取对应预声明变量的值</p><p>this.context 调用这个变量</p><pre class="line-numbers language-none"><code class="language-none">&gt;static contextType = BatteryContext;&gt;// 这样就可以直接使用this.context来获取指定的数据。&gt;class Leaf extends Component { static contextType = BatteryContext; render() { const battery = this.context; return &lt;h1&gt;battery:{battery}&lt;/h1&gt;;&gt;}&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-3lazy和suspense实现延迟加载"><a href="#2-3lazy和suspense实现延迟加载" class="headerlink" title="2.3lazy和suspense实现延迟加载"></a>2.3lazy和suspense实现延迟加载</h3><ul><li>react-loadable同样实现懒加载</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;// (1) 首先,要从react中引入 lazy 和 suspence&gt;// (2) lazy中异步导入，Suspence加载对应获取到的异步组件，回调函数就是加载过渡内容&gt;import React, { Component, lazy, Suspense } from "react";&gt;import "./App.css";&gt;const About = lazy(() =&gt; import("./about"));&gt;class App extends Component { render() {   return (     &lt;div&gt;       &lt;Suspense fallback={&lt;div&gt;loading&lt;/div&gt;}&gt;         &lt;About&gt;&lt;/About&gt;       &lt;/Suspense&gt;     &lt;/div&gt;   ); }&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><img data-src="/2020/11/25/hook-xue-xi/lazy.png" class="" title="lazy"> <ul><li>提高名称的辨识度，我们可以借助webpack中的注释</li></ul><p>这样2.chunk.js  就换成了更加有辨识度的about.chunk.js</p><pre class="line-numbers language-none"><code class="language-none">const About = lazy(() =&gt; import(/* webpackChunkName:"about" */ "./about"));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4错误边界"><a href="#2-4错误边界" class="headerlink" title="2.4错误边界"></a>2.4错误边界</h3><ul><li>如果上面lazy导入的文件不存在，页面就会立即报错，并且这种错误是不可以捕获的。</li><li>这样我们就要考虑react ErrorBoundary</li></ul><blockquote><p>实际上是使用了生命周期函数中的componentDidCatch方法</p><p>或者。另外一个静态方法，getDerivedStateFromError函数，一旦出现错误可以返回一个新的state数据并合并到原来的state</p><pre class="line-numbers language-none"><code class="language-none">&gt;componentDidCatch() {   this.setState({     hasError: true,   });&gt;}&gt;static getDerivedStateFromError() {return {hasError: true,}&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果相同开发者界面都会显示error</li></ul></blockquote><ul><li>如何在发生错误后，触发重渲染？</li></ul><blockquote><p>我们演示使用外部按钮，实现重渲染</p></blockquote><pre class="line-numbers language-none"><code class="language-none">let About = lazy(() =&gt; import(/* webpackChunkName:"about" */ "./about"));class App extends Component {  state = {    load: false,    error: false,  };  // 手动触发异步组件的加载  load = () =&gt; {    this.setState({ load: true });  };  // 加载失败后，点击重试  retry = () =&gt; {    this.setState({ error: false });  };  // ErrorBoundary 的关键，无需再实现 componentDidCatch  static getDerivedStateFromError(e) {    return { error: e };  }  render() {    const { load, error } = this.state;    // 显然错误页    if (error) {      return (        &lt;div&gt;          &lt;p&gt;{error.message}&lt;/p&gt;          &lt;button onClick={this.retry}&gt;retry&lt;/button&gt;        &lt;/div&gt;      );    }    return (      &lt;div&gt;        &lt;button type="button" onClick={this.load}&gt;          load        &lt;/button&gt;        &lt;Suspense fallback={&lt;div&gt;loading&lt;/div&gt;}&gt;{load &amp;&amp; &lt;About /&gt;}&lt;/Suspense&gt;      &lt;/div&gt;    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们还会发现一个问题，重试没有作用，总是失败，</p><ul><li>因为，lazy中封装的promise只会执行一次，无论怎么获取它的结果，依然是失败的</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">{  retry = () =&gt; {    About = lazy(() =&gt; import('./about.js'));    this.setState({error: false});  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关键在于重新渲染这个about组件</p></blockquote><h3 id="2-5Memo实现指定组件渲染"><a href="#2-5Memo实现指定组件渲染" class="headerlink" title="2.5Memo实现指定组件渲染"></a>2.5Memo实现指定组件渲染</h3><ul><li>react有一个特点，组件渲染，render中包含的其他组件也会无条件渲染，即使没有数据变化。</li><li>react给我们提供了一个生命周期函数<code>shouldComponentUpdate(nextProps, nextState) {}</code> 通过比较<code>this.props和nextProps；this.state和nextState</code>数据是否变化，返回true/false，来决定组件是否更新</li><li>当然react给我们提供了更加方便的使用方法。</li></ul><blockquote><p>对于class组件来说：pureComponent</p><ul><li>只做浅比较，对句柄来比较，复杂数据类型，没有多级比较</li></ul><p>对于无状态组件来说：memo</p><ul><li>用memo()来包裹生成新的组件</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">const Foo = memo(function Foo(props) {  console.log("Foo render");  return &lt;div&gt;{props.person.age}&lt;/div&gt;;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于复杂数据类型，无状态组件，可以通过对memo传入第二个函数参数<code>areEqual</code></li></ul><pre class="line-numbers language-none"><code class="language-none">const Foo = memo(function Foo(props) {  console.log("Foo render" + props.person.age);  return &lt;div&gt;{props.person.age}&lt;/div&gt;;}, areEqual);function areEqual(prevProps, nextProps) {  return prevProps.person.age === nextProps.person.age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一定要用setState来改变数据</strong></p><h2 id="三，React-Hooks"><a href="#三，React-Hooks" class="headerlink" title="三，React Hooks"></a>三，React Hooks</h2><p><strong>类组件的不足</strong></p><ul><li><p>状态逻辑难复用</p><ul><li>缺少复用机制</li><li>渲染属性和告诫组件导致层级冗余</li></ul><pre class="line-numbers language-none"><code class="language-none">1. “render prop”  React组件之间使用一个值为函数的prop共享//想要实现鼠标移动后面跟着cat， &lt;Cat&gt;组件使用&lt;mouse&gt;组件的数据 //render方法中的函数传给有数据的&lt;mouse&gt;，告诉他需要渲染声明内容。让mouse组件变得有复用性//要注意mouse组件不能和PureComponent一起用，因为每次传入的prop肯定不一样，PureComponent没有意义    要让prop为静态，可以利用浅比较传入一个定义了的实例方法class Cat extends React.Component {  render() {    const mouse = this.props.mouse;    return (      &lt;img src="/cat.jpg" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} /&gt;    );  }}class Mouse extends React.Component {  constructor(props) {    super(props);    this.handleMouseMove = this.handleMouseMove.bind(this);    this.state = { x: 0, y: 0 };  }  handleMouseMove(event) {    this.setState({      x: event.clientX,      y: event.clientY    });  }  render() {    return (      &lt;div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}&gt;        {/*          使用 `render`prop 动态决定要渲染的内容，          而不是给出一个 &lt;Mouse&gt; 渲染结果的静态表示        */}        {this.props.render(this.state)}      &lt;/div&gt;    );  }}class MouseTracker extends React.Component {  render() {    return (      &lt;div&gt;        &lt;h1&gt;移动鼠标!&lt;/h1&gt;        &lt;Mouse render={mouse =&gt; (          &lt;Cat mouse={mouse} /&gt;        )}/&gt;      &lt;/div&gt;    );  }}2. HOC高阶组件  参数为组件，返回值为新组件的函数// 例如Redux中的 connectconst WrapperedFoo = resizable(Foo);&lt;WrapperedFoo/&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类组件难以维护</p><ul><li>生命周期函数混杂不相干逻辑</li><li>相干逻辑分散在不同生命周期</li></ul></li><li><p>this指向困扰</p></li></ul><p><strong>Hooks优势</strong></p><ul><li>函数组件不存在this问题</li><li>方便复用状态逻辑</li><li>副作用关注点分离</li></ul><blockquote><p>副作用：数据获取，设置订阅或者手动直接更改 React 组件中的 DOM 都属于副作用。</p><p>副作用的时机：Mount之后，Update之后，Unmount之前</p></blockquote><h3 id="3-1useState使用"><a href="#3-1useState使用" class="headerlink" title="3.1useState使用"></a>3.1useState使用</h3><ul><li>设置修改组件的state，Hooks提供了新的手段<code>useState</code></li></ul><pre class="line-numbers language-none"><code class="language-none">// 引入useState  参数为默认值function App() {const [count, setCount] = useState(0);  return (  &lt;button      type="button"      onClick={()=&gt;{setCount(count + 1)}}    &gt;    Click ({count})    &lt;/button&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意问题</li></ul><blockquote><ul><li>使用useState时，时借助了js的单线程特性，判断当前的useState调用当前的变量而不会混乱。</li><li>当有多个变量时，必须<strong>顺序调用</strong>，<strong>调用数量匹配</strong>否则会出现错误</li></ul></blockquote><p>新版都自动集成了eslint-plugin-react-hooks  更加友好的错误信息</p><ul><li>转换逻辑时 利用默认值函数只调用一次提升性能</li></ul><pre class="line-numbers language-none"><code class="language-none">function App(props) {const [count, setCount] = useState(() =&gt; {return props.defaultCount || 0;})}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setCount函数句柄是稳定的！！</li></ul><h3 id="3-2Effect-Hooks"><a href="#3-2Effect-Hooks" class="headerlink" title="3.2Effect Hooks"></a>3.2Effect Hooks</h3><ul><li><p>处理副作用的时机之前都是三个生命周期函数处理的</p><ul><li>componentDidMount</li><li>componentDidUpdate</li><li>componentWillUnmount</li></ul></li><li><p>现在我们使用useEffect完成相应操作</p></li></ul><pre class="line-numbers language-none"><code class="language-none">function App(props) {  const [count, setCount] = useState(0);  const [size, setSize] = useState({    width: document.documentElement.clientWidth,    height: document.documentElement.clientHeight,  });  const onResize = () =&gt; {    setSize({      width: document.documentElement.clientWidth,      height: document.documentElement.clientHeight,    });  };  useEffect(() =&gt; {    console.log("count:", count);  }, [count]);  useEffect(() =&gt; {    document.title = count;  });  useEffect(() =&gt; {    window.addEventListener("resize", onResize, false);    return () =&gt; {      window.removeEventListener("resize", onResize, false);    };  }, []);const onClick = () =&gt; {    console.log("click");  };    useEffect(() =&gt; {    document.querySelector("#size").addEventListener("click", onClick, false);    return () =&gt; {      document        .querySelector("#size")        .removeEventListener("click", onClick, false);    };  });  return (    &lt;div&gt;      &lt;button        type="button"        onClick={() =&gt; {          setCount(count + 1);        }}      &gt;        Click ({count})      &lt;/button&gt;      {count % 2 ? (        &lt;span id="size"&gt;          size: {size.width}x{size.height}        &lt;/span&gt;      ) : (        &lt;p id="size"&gt;          size: {size.width}x{size.height}        &lt;/p&gt;      )}    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>useEffect有两个参数</li></ul><ol><li>前一个参数：处理副作用函数</li><li>后一个参数（可选）：变化数组（多次执行），常量数组（只执行一次）。</li></ol><ul><li>多个副作用功能分开多个useEffect管理更加方便</li><li>remove操作，当事件移除时才会解绑</li><li>当组件return jsx之后才执行useEffect</li></ul></blockquote><p><strong>注意</strong></p><blockquote><ul><li>异步处理函数中的数据都是前一次的句柄</li><li>很奇怪的是：onResize事件中回调函数中永远保存着原始大小的句柄。（向下还原算两次事件触发，最大化算一次时间触发）</li><li>函数作用域内的数据都是同步的最新数据</li></ul></blockquote><p><strong>类属性</strong>声明state和constructor中声明没什么区别</p><h3 id="3-3Context-Hooks"><a href="#3-3Context-Hooks" class="headerlink" title="3.3Context Hooks"></a>3.3Context Hooks</h3><ul><li><strong>类组件</strong>中可以使用<code>Count.Provider</code> <code>Count.Consumer</code>来对一到多个变量的调用；使用<code>static contextType = CountContext</code>对一个变量进行传递</li><li><strong>函数组件</strong> 就是要使用到这里的<code>useContext()</code>而且没有个数限制。</li></ul><pre class="line-numbers language-none"><code class="language-none">import React, { Component, useState, createContext, useContext } from "react";const CountContext = createContext();class Foo extends Component {  render() {    return (      &lt;CountContext.Consumer&gt;        {(count) =&gt; &lt;h1&gt;{count}&lt;/h1&gt;}      &lt;/CountContext.Consumer&gt;    );  }}class Bar extends Component {  static contextType = CountContext;  render() {    const count = this.context;    return &lt;h1&gt;{count}&lt;/h1&gt;;  }}function Counter() {  const count = useContext(CountContext);  return &lt;h1&gt;{count}&lt;/h1&gt;;}function App(props) {  const [count, setCount] = useState(0);  return (    &lt;div&gt;      &lt;button        type="button"        onClick={() =&gt; {          setCount(count + 1);        }}      &gt;        Click ({count})      &lt;/button&gt;      &lt;CountContext.Provider value={count}&gt;        &lt;Foo /&gt;        &lt;Bar /&gt;        &lt;Counter /&gt;      &lt;/CountContext.Provider&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4useMemo和callBack"><a href="#3-4useMemo和callBack" class="headerlink" title="3.4useMemo和callBack"></a>3.4useMemo和callBack</h3><ul><li><p>函数组件中定义<strong>一段函数是否执行</strong>，memo是对组件而言</p></li><li><p>不像useEffect在下一次渲染的时候触发，useMemo是渲染过程中执行，参与本次渲染数据变化。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">useMemo(()=&gt;{},[])  //前：要处理的函数段返回值，后：依赖项//对内置函数包装时使用useCallbackuseCallback(()=&gt;{},[])  //返回一个函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import React, { useMemo, useState, memo, useCallback } from "react";const Counter = memo(function Counter(props) {  console.log("Counter render");  const { count } = props;  props.onClick();  return &lt;h1&gt;{count}&lt;/h1&gt;;});function App(props) {  const [count, setCount] = useState(0);  const double = useMemo(() =&gt; {    return count * 2;  }, [count === 4]);    const onClick = useCallback(() =&gt; {    console.log("click" + clickCount);  }, []);  //让onClick句柄不变化，只会返回一次！！！    return (    &lt;div&gt;      &lt;button        type="button"        onClick={() =&gt; {          setCount(count + 1);        }}      &gt;        Click ({count}), double: ({double})      &lt;/button&gt;      &lt;Counter count={double} onClick={onClick} /&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们不能阻止useCallback生成新的函数消耗性能，但是可以控制不让他返回（依赖项）</li><li>作用在于，优化因传入组件的值的过度变化而导致组件过度渲染</li></ul><h3 id="4-5-Ref-Hooks"><a href="#4-5-Ref-Hooks" class="headerlink" title="4.5 Ref Hooks"></a>4.5 Ref Hooks</h3><ul><li>具有实例化对象的class组件中，可以使用createRef()来连接操作DOM。</li><li>函数组件中没有实例化对象所以，使用新的API <code>useRef()</code></li></ul><ol><li>获取DOM</li></ol><blockquote><ul><li><p>获取函数组件时，要把函数组件转换为class组件才能被ref获取。</p></li><li><p>常见用法是调用获取组件中的方法</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;//想要获取Counter组件中的speak()方法&gt;class Counter extends PureComponent { speak() {   console.log(`now counter is: ${this.props.count}`); } render() {   const { props } = this;   return &lt;h1 onClick={props.onClick}&gt;{props.count}&lt;/h1&gt;; }&gt;}&gt;&lt;Counter ref={counterRef} count={double} onClick={onClick} /&gt;&gt;//对应组件中声明，调用&gt;const counterRef = useRef();&gt;const onClick = useCallback(() =&gt; {console.log("click");setCountadd((countadd) =&gt; countadd + 1);counterRef.current.speak();&gt;}, []);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ol start="2"><li>渲染周期之间共享数据</li></ol><blockquote><ul><li>因为每次渲染组件后，组件中的变量都会变化</li><li>要想在渲染周期之间共享数据（state/useRef）</li><li>但是state操作会触发渲染，会很麻烦</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;//声明  每次周期渲染it都是共享不变的&gt;const it = useRef();&gt;//调用&gt;useEffect(() =&gt; { it.current = setInterval(() =&gt; { setCount((count) =&gt; count + 1); }, 1000);&gt;}, []);&gt;useEffect(() =&gt; { if (count &gt; 10) {clearInterval(it.current); }&gt;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-6自定义Hooks"><a href="#4-6自定义Hooks" class="headerlink" title="4.6自定义Hooks"></a>4.6自定义Hooks</h3><ul><li>以<code>use---</code> 作为组件名的React函数组件，和普通函数组件的区别就是输入输出参数不一样。</li><li>自定义Hooks函数多用在封装功能，方便复用，内部可以使用Hooks所有钩子函数。</li></ul><pre class="line-numbers language-none"><code class="language-none">// 举例：想要封装复用查询好友在线状态的功能function useFriendStatus(friendID) {  const [isOnline, setIsOnline] = useState(null);  // ...  return isOnline;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//使用订阅好友状态的自定义hook函数// (1)显示好友状态function FriendStatus(props) {  const isOnline = useFriendStatus(props.friend.id);  if (isOnline === null) {    return 'Loading...';  }  return isOnline ? 'Online' : 'Offline';}// (2)生成好友状态列表function FriendListItem(props) {  const isOnline = useFriendStatus(props.friend.id);  return (    &lt;li style={{ color: isOnline ? 'green' : 'black' }}&gt;      {props.friend.name}    &lt;/li&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7使用Hook的注意点"><a href="#4-7使用Hook的注意点" class="headerlink" title="4.7使用Hook的注意点"></a>4.7使用Hook的注意点</h3><ol><li><h5 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a>只在最顶层使用 Hook</h5><ul><li>不要在循环或嵌套函数中使用Hook</li><li>确保 Hook 在每一次渲染中都按照同样的顺序被调用</li></ul></li><li><p>生命周期方法对应到Hook</p><ul><li><p>constructer</p><p>函数组件不需要构造函数，使用<code>useState()</code>初始化state,初始值复杂表达式时可以传入一个箭头函数return这个表达式（这个函数只会在首次组件搭载时运行，优化性能）</p></li><li><p>shouldComponentUpdate()</p><p>也就是<code>useMemo()</code> <code>useCallback()</code></p></li><li><p>render</p><p>就是函数组件本身</p></li><li><p><code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code></p><p>useEffect()副作用函数</p></li></ul></li></ol><h2 id="四，PWA"><a href="#四，PWA" class="headerlink" title="四，PWA"></a>四，PWA</h2><h3 id="4-1服务工作线程：Service-Worker"><a href="#4-1服务工作线程：Service-Worker" class="headerlink" title="4.1服务工作线程：Service Worker"></a>4.1服务工作线程：Service Worker</h3><ul><li>一个服务器和浏览器之间的中间人角色，注册了service worker的网站可以拦截当前网络所有的请求，进行判断。</li></ul><blockquote><p>基于web worker 独立与js主线程的独立线程。</p><p>增加离线缓存功能，可以让开发者控制管理缓存的内容和版本</p><p>本质上充当代理服务器的身份</p><p>由事件驱动，具有生命周期</p></blockquote><ol><li>如何给浏览器添加service worker</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//页面中添加script脚本</span><span class="token comment">//navigator浏览器对象</span><span class="token comment">//register对象表示哪个脚本挂载到哪个页面，挂在结果返回一个promise</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"sw.js"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  scope<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">registration</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：只能在http协议下运行service worker，不能在file协议（也就是文件打开的方式）下。</p><ol start="2"><li>下面编写我们的service worker</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//在这里（sw.js）我们不能访问DOM，也不能使用一些Window之类的对象。这是一个全新的上下文。</span><span class="token comment">//可以使用self，全局作用域对象</span><span class="token comment">//监听self对象的事件，下面三个生命周期函数</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样sw文件修改后，只会运行第一步install，处于等待状态</span><span class="token comment">//激活有两种方式，一种直接激活，一种条件延迟激活。</span><span class="token comment">//将下面的激活函数加载到对应生命周期函数中就可以。</span>event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">skipWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fetch: 可以捕获网络资源请求eg： css文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong>：promise：异步逻辑</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//回调函数的方式：读取xml文件/解析文件内容</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">parseXML</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> xml</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用promise</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">content</span> <span class="token operator">=&gt;</span> <span class="token function">parseXML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">xml</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//处理xml</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//错误捕获</span><span class="token comment">//使用同步的语法写 返回一个promise</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readXML</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> xml <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseXML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> xml<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong>：fetch</p><h3 id="4-2资源缓存系统–Cache-API"><a href="#4-2资源缓存系统–Cache-API" class="headerlink" title="4.2资源缓存系统–Cache API"></a>4.2资源缓存系统–Cache API</h3><p>让离线变成可能</p><p>学会如何创建缓存，清理缓存，调用缓存。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">//前面的sw.js//创建缓存版本const CACHE_NAME = 'cache-v1';self.addEventListener("install", (event) =&gt; {  console.log("install", event);  event.waitUntil(caches.open(CACHE_NAME).then(cache =&gt; {   cache.addAll([//资源的路径  这个资源列表应该自动生成      '/',      './index.css'    ]);  }));  //这里应该拉取缓存必要的资源});self.addEventListener("activate", (event) =&gt; {  console.log("activate", event);  event.waitUntil();  //清除上一代不必要的缓存  event.waitUntil(caches.keys().then(cacheNames =&gt; {    return Promise.all(cacheNames.map(cacheName =&gt; {      if (cacheName !== CACHE_NAME) {        return caches.delete(cacheName);      }    }));  }));});self.addEventListener("fetch", (event) =&gt; {  console.log("fetch", event);  event.respondWith(caches.open(CACHE_NAME).then(cache =&gt; {    return cache.match(event.request).then(response =&gt; {      if (response) {        return response;      }      return fetch(event.request).then(response =&gt; {        cache.put(event.request, response.clone());        return response;      })    })  }))  //捕获请求后，查询并返回缓存中的资源});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3Notifiction-API-通知"><a href="#4-3Notifiction-API-通知" class="headerlink" title="4.3Notifiction API 通知"></a>4.3Notifiction API 通知</h3><p>1.授权（只能发生在页面中）</p><p>2.设置通知（页面和sw中不一样）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//查看网页许可 返回"default" "denied"  "granted"</span>Notification<span class="token punctuation">.</span>permission<span class="token comment">//请求授权会有弹框 允许或拒绝</span>Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//许可后，发送弹窗</span><span class="token comment">//第一个参数是弹窗标题，第二个是一个对象option（如：body）</span><span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">"通知的title"</span>，<span class="token punctuation">{</span>body<span class="token operator">:</span> <span class="token string">'this is a notification'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//但是在service worker下没有requestPermission</span><span class="token comment">//所以首先要在页面上获取授权，然后切换到sw下</span><span class="token comment">//并且只能使用self.regestration,showNotification("title", {})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react hook </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS_Module</title>
      <link href="2020/11/10/css-module/"/>
      <url>2020/11/10/css-module/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Module"><a href="#CSS-Module" class="headerlink" title="CSS Module"></a>CSS Module</h1><ul><li>react编写过程中我们会发现，css文件都是全局作用的，这样就会产生样式混叠名称难以设置的问题</li><li>CSS Module帮我们解决了这一问题</li></ul><a id="more"></a><h2 id="1-局部作用域"><a href="#1-局部作用域" class="headerlink" title="1.局部作用域"></a>1.局部作用域</h2><ul><li>产生局部作用域的唯一方法就是，使用一个独一无二的<code>className</code>，这也就是CSS Module的做法。</li></ul><blockquote><p>这里我们先使用<code>create-react-app</code> 这个官方脚手架（2.0以后完全兼容了css module）</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[name].module.css//命名规范import xxx from 'xxx.module.css'//引用方法&lt;div className={xxx.styleName}&gt;//用法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Button-module-css"><a href="#Button-module-css" class="headerlink" title="Button.module.css"></a><code>Button.module.css</code></h5></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.error</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Button-js"><a href="#Button-js" class="headerlink" title="Button.js"></a><code>Button.js</code></h5></li></ul><pre class="line-numbers language-none"><code class="language-none">import React, { Component } from 'react';import styles from './Button.module.css'; // Import css modulesclass Button extends Component {  render() {    return &lt;button className={styles.error}&gt;Error Button&lt;/button&gt;;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h5></li></ul><pre class="line-numbers language-none"><code class="language-none">//[filename]\_[classname]\_\_[hash]&lt;button class="Button_error_ax7yz"&gt;Error Button&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-全局作用域"><a href="#2-全局作用域" class="headerlink" title="2.全局作用域"></a>2.全局作用域</h2><ul><li>CSS Modules 允许使用<code>:global(.className)</code>的语法，声明一个全局规则。凡是这样声明的<code>class</code>，<u>都不会被编译成哈希字符串</u>。</li></ul><pre class="line-numbers language-none"><code class="language-none">xxx.css   //命名规范import ‘xxx.css’//引用方法&lt;div className='styleName'&gt;//用法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="App-css"><a href="#App-css" class="headerlink" title="App.css"></a><code>App.css</code></h5></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:global(.title)</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a><code>App.js</code></h5></li></ul><pre class="line-numbers language-none"><code class="language-none">import React, { Component } from 'react';import from './App.css'; // Import css modulesclass App extends Component {  render() {    return (      &lt;h1 className="title"&gt;        Hello World      &lt;/h1&gt;    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h5></li></ul><pre class="line-numbers language-none"><code class="language-none">//不进行哈希编码&lt;h1 data-reactroot="" class="title"&gt;Hello World&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h4><ul><li>CSS Modules 还提供一种显式的局部作用域语法<code>:local(.className)</code>，等同于<code>.className</code></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//等效写法:local(.title)</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">:global(.title)</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-定制哈希类名"><a href="#3-定制哈希类名" class="headerlink" title="3.定制哈希类名"></a>3.定制哈希类名</h2><pre class="line-numbers language-none"><code class="language-none">create-react-app:默认的哈希算法是 [path][name]__[local]--[hash:base64:5]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>webpack中<code>css-loader</code>默认的哈希算法是<code>[hash:base64]</code>，这会将<code>.title</code>编译成<code>._3zyde4l1yATCOkgn-DBWEL</code>这样的字符串。</li><li><code>webpack.config.js</code> 里面可以定制哈希字符串的格式。</li></ul><h2 id="4-Class组合"><a href="#4-Class组合" class="headerlink" title="4.Class组合"></a>4.Class组合</h2><ul><li><p>一个选择器可以继承另一个选择器的规则，这称为”组合”</p></li><li><h4 id="composes"><a href="#composes" class="headerlink" title="composes"></a>composes</h4></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.className</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.title</span> <span class="token punctuation">{</span>  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>//蓝底红字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//被编译成._2DHwuiHWMnKTOYG45T0x34 {  color: red;}._10B-buq6_BEOTOl9urIjf8 {  background-color: blue;}&lt;h1 class="_2DHwuiHWMnKTOYG45T0x34 _10B-buq6_BEOTOl9urIjf8"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-输入其他模块"><a href="#5-输入其他模块" class="headerlink" title="5.输入其他模块"></a>5.输入其他模块</h2><ul><li>选择器也可以继承其他CSS文件中的规则</li></ul><p><strong>another.css</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.className</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>App.css</strong>可以继承<code>another.css</code>里面的规则</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.title</span> <span class="token punctuation">{</span>  <span class="token property">composes</span><span class="token punctuation">:</span> className from <span class="token string">'./another.css'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>未完待续。。。。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简书项目</title>
      <link href="2020/11/08/jian-shu-xiang-mu/"/>
      <url>2020/11/08/jian-shu-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="简书项目"><a href="#简书项目" class="headerlink" title="简书项目"></a>简书项目</h1><a id="more"></a><h2 id="Header组件开发"><a href="#Header组件开发" class="headerlink" title="Header组件开发"></a>Header组件开发</h2><h3 id="样式问题Styled-Components"><a href="#样式问题Styled-Components" class="headerlink" title="样式问题Styled-Components"></a>样式问题Styled-Components</h3><ul><li>react项目文件中的css文件都是一个引用全局受用，这样就会造成样式混乱管理的问题</li></ul><p><strong>我们引入Styled-Components结合Reset.css</strong></p><pre class="line-numbers language-none"><code class="language-none">// (1)安装styled-componentsnpm install styled-components// (2)项目目录下创建一个style.js文件来存放样式// 引入对应全局样式的 apiimport { createGlobalStyle } from "styled-components";// (3)创建一个组件，以组件的形式导出对应样式const GlobalStyle = createGlobalStyle`  ...Reset.css //统一规范样式`;export default GlobalStyle;// (4)以组件的形式使用添加到对应JSX语法块中&lt;Fragment&gt;  &lt;div className="body"&gt;minyue&lt;/div&gt;  &lt;GlobalStyle /&gt;&lt;/Fragment&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完成header组件布局"><a href="#完成header组件布局" class="headerlink" title="完成header组件布局"></a>完成header组件布局</h3><ol><li>在src目录下新建<code>common文件夹</code>来装公共样式</li><li>common文件夹下再新建<code>header文件夹</code>，新建<code>index.js文件</code>，样式文件<code>style.js</code>来设置头部样式</li></ol><blockquote><p>这里我们使用styled-components布局方式—-组件化布局方式</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HeaderWrapper</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Logo</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Logo</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nav</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavItem</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavItem</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavItem</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">下载APP</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavItem</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavSearch</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavSearch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavItem</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavItem</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavItem</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Aa</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavItem</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Nav</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">HeaderWrapper</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>样式作为一个个块的组件搭建起来，在样式文件样式文件中完成标签类型的设定，组件形式导出</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;// (1)引入包文件&gt;import styled from "styled-components";&gt;import logoPic from "../../statics/logo.png";&gt;// (2)组件形式编写样式组件&gt;export const Logo = styled.a.attrs({ href: "/",&gt;})` position: absolute; top: 0; left: 0; display: block; width: 100px; height: 56px; background: url(${logoPic}); background-size: contain;&gt;`;&gt;export const NavItem = styled.div` line-height: 56px; padding: 0 15px; font-size: 17px; color: #333; &amp;.left {   float: left; } &amp;.right {   float: right; } &amp;.active {   color: #ea6f5a; }&gt;`;&gt;export const NavSearch = styled.input.attrs({ placeholder: "search",&gt;})` width: 160px; height: 38px; padding: 0 20px; margin-top: 9px; margin-left: 20px; box-sizing: border-box; border: none; outline: none; border-radius: 19px; background: #eee; font-size: 14px; &amp;::placeholder {   color: #999; }&gt;`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong></p><ol><li>图片的插入方式！！！</li><li>设置标签的其他默认属性，及其样式的方法（href，placeholder等）</li><li>如何使用选择器（<code>&amp;.className{}</code>）</li></ol></blockquote><h3 id="字体图标的使用"><a href="#字体图标的使用" class="headerlink" title="字体图标的使用"></a>字体图标的使用</h3><ul><li><p>和图片一样作为静态数据，我们存放在<code>statics</code> 中</p></li><li><p><code>iconfont</code> 下删掉没有用的文件，将<code>iconfont.css</code> 改为<code> iconfont.js</code>,把字体图标的样式当做一个全局组件使用<code>createGlobalStyle</code> 函数。</p></li></ul><p><strong>App.js</strong></p><pre class="line-numbers language-none"><code class="language-none">import React, { Fragment } from "react";import { GlobalStyle } from "./style";import { GlobalIconFont } from "./statics/iconfont/iconfont";import Header from "./common/header/index.js";function App() {  return (    &lt;Fragment&gt;      &lt;Header /&gt;      &lt;GlobalStyle /&gt;      &lt;GlobalIconFont /&gt;    &lt;/Fragment&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>iconfont.js</strong></p><pre class="line-numbers language-none"><code class="language-none">import { createGlobalStyle } from "styled-components";export const GlobalIconFont = createGlobalStyle`....`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>style.js</strong></p><pre class="line-numbers language-none"><code class="language-none">import { createGlobalStyle } from "styled-components";// 不同浏览器的统一样式规范export const GlobalStyle = createGlobalStyle`.....`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>header/style.js</strong></p><table><thead><tr><th>样式问题</th><th></th></tr></thead><tbody><tr><td>.className</td><td>下一级含有该类，下一级元素的样式设定</td></tr><tr><td>&amp;.className</td><td>&amp;（表示当前元素），同级元素含有对应类的元素进行样式设定</td></tr><tr><td>.attrs({ 默认属性 }）</td><td>对当前元素默认属性的设置</td></tr><tr><td>&amp;::placeholder {}</td><td>对当前元素的伪类元素进行样式设定（默认内容属性，类似元素的伪类属性）</td></tr></tbody></table><h3 id="搜索框的动态效果"><a href="#搜索框的动态效果" class="headerlink" title="搜索框的动态效果"></a>搜索框的动态效果</h3><blockquote><p>使用 react-redux实现</p></blockquote><ul><li>这里就需要一个状态，和两个action</li></ul><ol><li>安装react-transition-group</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install react-transition-group --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>写搜索框样式</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;SearchWrapper&gt;  &lt;CSSTransition    in={props.focused}    timeout={200}    classNames="slide"   &gt;    &lt;NavSearch      className={props.focused ? 'focused': ''}      onFocus={props.handleInputFocus}      onBlur={props.handleInputBlur}    &gt;&lt;/NavSearch&gt;  &lt;/CSSTransition&gt;  &lt;i className={props.focused ? 'focused iconfont': 'iconfont'}&gt;    &amp;#xe614;  &lt;/i&gt;&lt;/SearchWrapper&gt;//对应搜索框下&amp;.focused {    width: 240px;  }&amp;.slide-enter {    width: 160px;  }  &amp;.slide-enter-active {    transition: all 0.2s ease-out;    width: 240px;  }  &amp;.slide-exit {    width: 240px;  }  &amp;.slide-exit-active {    width: 160px;    transition: all 0.2s ease-out;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用react-redux管理数据"><a href="#使用react-redux管理数据" class="headerlink" title="使用react-redux管理数据"></a><strong>使用react-redux管理数据</strong></h3><ol><li>先安装redux，react-redux</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install redux;npm install react-redux;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>App.js中引入Privider，连接store</li></ol><pre class="line-numbers language-none"><code class="language-none">import store from "./store";import { Provider } from "react-redux";//使用&lt;Provider store={store}&gt;  &lt;Header /&gt;  &lt;GlobalStyle /&gt;  &lt;GlobalIconFont /&gt;&lt;/Provider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>header/index.js中连接store </li></ol><pre class="line-numbers language-none"><code class="language-none">import { connect } from "react-redux";//使用const mapStateToProps = (state) =&gt; {  return {    focused: state.focused,  };};const mapDispathToProps = (dispatch) =&gt; {  return {    handleInputFocus() {      const action = {        type: "search_focus",      };      dispatch(action);    },    handleInputBlur() {      const action = {        type: "search_blur",      };      dispatch(action);    },  };};export default connect(mapStateToProps, mapDispathToProps)(Header);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意将文章中的state用props替换</li></ul><ol start="4"><li>src下创建store编写index.js/reducer.js</li></ol><pre class="line-numbers language-none"><code class="language-none">(1)reducer是一个纯函数,返回一个对象(2)index.js中使用createStore，compose  API（参考react-devtools使用方法）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="combineReducers数据拆分管理"><a href="#combineReducers数据拆分管理" class="headerlink" title="combineReducers数据拆分管理"></a>combineReducers数据拆分管理</h3><ul><li>把src下的store/reducer.js下放到对应区块的子store中，更加方便管理数据</li></ul><ol><li>在header下新建store</li></ol><pre class="line-numbers language-none"><code class="language-none">//reducer移入之前的内容....//导出路径过长，新建一个index.js导出对应reducer，就会是调用路径减少两层import reducer from './reducer';export { reducer };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>src下的总reducer，汇总功能</li></ol><pre class="line-numbers language-none"><code class="language-none">//引入combineReducers()//es6语法 ’as‘ 名称替代写法(名称重复时使用)import { combineReducers } from 'redux';import { reducer as headerReducer } from '../common/header/store';const reducer = combineReducers({header: headerReducer});export default reducer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意<code>focused: state.header.focused,</code>  要加中间header</li></ul><h3 id="immutable-js管理数据"><a href="#immutable-js管理数据" class="headerlink" title="immutable.js管理数据"></a>immutable.js管理数据</h3><ul><li>为了确保reducer中不会返回一个<strong>”有问题“的”state“</strong>，我们设法把defaultState设定成有权限的数据类型</li></ul><p><strong>引入<code>immutable.js</code> 的 fromJS()</strong></p><ol><li>安装</li></ol><pre class="line-numbers language-none"><code class="language-none">//分支reducer需要 fromJS函数npm install immutable//总reducer需要 新的合并函数npm install redux-immutable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>header/store/reducer.js</li></ol><pre class="line-numbers language-none"><code class="language-none">// 把state模板设置为immutable对象import { fromJS } from "immutable";const defaultState = fromJS({  focused: false,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回对象时要用对应immutable对象提供的</li></ul><pre class="line-numbers language-none"><code class="language-none">return state.set("focused", true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>总reducer</li></ol><pre class="line-numbers language-none"><code class="language-none">//相当于combineReducers函数升级了import { combineReducers } from "redux-immutable";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>更改数据引用方式</li></ol><blockquote><p>我们使用了immutable后，store下面数据的引用不再使用’.属性‘来实现        需要通过immutable提供的API</p></blockquote><pre class="line-numbers language-none"><code class="language-none">// props和state连接时// focused: state.get("header").get("focused"),focused: state.getIn(["header", "focused"]),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ajax获取热门搜索框数据"><a href="#Ajax获取热门搜索框数据" class="headerlink" title="Ajax获取热门搜索框数据"></a>Ajax获取热门搜索框数据</h3><ol><li>异步获取数据，引入中间件redux-thunk</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install redux-thunk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改store/index.js</li></ul><pre class="line-numbers language-none"><code class="language-none">//引入applyMiddleware//引入thunkimport { createStore, compose, applyMiddleware } from "redux";import thunk from "redux-thunk";//在composeEnhancers中添加中间件const store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>热门搜索框效果添加</li></ol><ul><li>index.js中</li></ul><pre class="line-numbers language-none"><code class="language-none">// (1) 把搜索框写入一个函数组件，当focus（true）时返回样式，并添加到searchWrapper中getListArea() {    const { focused, list } = this.props;    if (focused) {      return (        &lt;SearchInfo&gt;          &lt;SearchInfoTitle&gt;            热门搜索            &lt;SearchInfoSwitch&gt;换一批&lt;/SearchInfoSwitch&gt;          &lt;/SearchInfoTitle&gt;          &lt;SearchInfoList&gt;            {list.map((item) =&gt; {              return &lt;SearchInfoItem key={item}&gt;{item}&lt;/SearchInfoItem&gt;;            })}          &lt;/SearchInfoList&gt;        &lt;/SearchInfo&gt;      );    } else {      return null;    }}// (2)style.js样式！！！// (3)数据需要一个listlist: state.getIn(["header", "list"]),dispatch(actionCreators.getList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>数据的异步获取</li></ol><ul><li>actionCreaters.js</li></ul><pre class="line-numbers language-none"><code class="language-none">// 异步获取数据请求// (1)安装axios模块npm install axios//getList 可以返回一个函数了！！//模拟数据可以放在public/api下(程序会检索到这里)export const getList = () =&gt; {  return (dispatch) =&gt; {    axios      .get("/api/headerList.json")      .then((res) =&gt; {        const data = res.data;        dispatch(changeList(data.data));      })      .catch(() =&gt; {        console.log("error");      });  };};const changeList = (data) =&gt; ({  type: actionTypes.CHANGE_LIST,  data: fromJS(data),  //data类型匹配！！});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reducer.js</li></ul><pre class="line-numbers language-none"><code class="language-none">// (1)defaultState 中添加list项  注意他是一个immutable类型// (2)处理程序添加一项case actionTypes.CHANGE_LIST:  return state.set("list", action.data); //data也应该是immutable类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意这里Ajax请求<strong>只需要请求一次</strong></li></ul><blockquote><p>但是只要我们点击输入框就会触发Ajax请求，我们需要修改，当list为空时才发起请求！！</p><pre class="line-numbers language-none"><code class="language-none">&gt;// 将list传入函数 handleInputFocus&gt;handleInputFocus(list) {list.size === 0 &amp;&amp; dispatch(actionCreators.getList());dispatch(actionCreators.searchFocus());&gt;},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>immutable对象没有length只有size判断list的长度</li></ul></blockquote><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a><strong>流程</strong></h4><table><thead><tr><th align="left">1.添加结构(发现要什么数据，什么行为)</th><th>index.js</th></tr></thead><tbody><tr><td align="left"><strong>2.connect的两函数实现数据连接，行为传递</strong></td><td><strong>index.js</strong></td></tr><tr><td align="left"><strong>3.actionCreaters对行为做集中处理，返回action，调用dispatch传递行为(异步行为，返回一个函数，函数中会再次调用actionCreaters中的函数返回行为对象，并在返回的函数中实现dispatch)</strong></td><td><strong>actionCreaters.js</strong></td></tr><tr><td align="left"><strong>4.reducer中添加默认数据种类，添加处理程序（使用immutable时，注意数据类型的匹配）</strong></td><td><strong>reducer.js</strong></td></tr><tr><td align="left"><strong>5.检查完善(结构化赋值，等),数据文件的编写</strong></td><td><strong>actionTypes.js(public/api/..)</strong></td></tr></tbody></table><h4 id="bug解决"><a href="#bug解决" class="headerlink" title="bug解决"></a>bug解决</h4><ul><li>我们可以看到，点击热门搜索框，内容搜索框失焦，热门搜索框也跟着关闭了？？</li></ul><p><strong>index.js</strong></p><pre class="line-numbers language-none"><code class="language-none">// (1)给热门搜索框增加一个mouseIn判断值if (focused || mouseIn) {return (&lt;SearchInfo onMouseEnter={handleMouseEnter}onMouseLeave={handleMouseLeave}&gt;...)}//添加一个mouseIn的数据，走一遍流程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="热门搜索换页功能"><a href="#热门搜索换页功能" class="headerlink" title="热门搜索换页功能"></a>热门搜索换页功能</h3><ol><li>添加换页iconfont</li></ol><ul><li>注意，页面中有多个字体图标样式修改时，我们要对每一个设定自己特定的类名！！！，避免样式冲突</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例如</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>focused    <span class="token operator">?</span> <span class="token string">"focused iconfont search"</span>    <span class="token operator">:</span> <span class="token string">"iconfont search"</span>  <span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  &amp;#xe637;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont spin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  &amp;#xe772;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>实现分页思路</li></ol><blockquote><p>我们获取到的数据是一大堆数据数组的集合，我们可以把它们分为固定长度为一组，预定存储当前页数，和总页数两个数据在store中</p></blockquote><p><strong>index.js</strong></p><pre class="line-numbers language-none"><code class="language-none">// (1)在getListArea函数中根据page来选择数据const newList = list.toJS();//immutable数据变为js标准数据const newList = [];if (newList.length) {for (let i = (page-1) * 10; i &lt; page * 10; i++) {pageList.push(&lt;SearchInfoItem key={newList[i]}&gt;{newList[i]}&lt;/SearchInfoItem&gt;)}}// (2)点击事件在&lt;SearchInfoSwitch&gt;上添加onClick={() =&gt; handleChangePage(page, totalPage, this.spinIcon)}//这个点击事件需要传入三个参数，最后一个参数是对应的字体图标标签元素，这里需要使用ref属性获取！！ref={(icon) =&gt; {this.spinIcon = icon;}}// (3)数据连接部分修改page: state.getIn(["header", "page"]),totalPage: state.getIn(["header", "totalPage"]),handleChangePage(page, totalPage, spin) {let originAngle = +spin.style.transform.replace(/[^0-9]/gi, "");spin.style.transform = "rotate(" + (originAngle + 360) + "deg)";if (page &lt; totalPage) {dispatch(actionCreators.changePage(page + 1));} else {dispatch(actionCreators.changePage(1));}},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>String.replace方法(返回替换后的新字符串接受两个参数，一个实匹配字符串，一个是替换字符串)</li></ul><ol><li>正则表达式表示的匹配字符串</li><li>普通字符串</li></ol><pre class="line-numbers language-none"><code class="language-none">&gt;const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';&gt;const regex = /dog/gi;&gt;console.log(p.replace(regex, 'ferret'));&gt;// expected output: "The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?"&gt;console.log(p.replace('dog', 'monkey'));&gt;// expected output: "The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正则表达式：末尾的gi表示（多次匹配，不考虑大小写）</li></ul></blockquote><p><strong>actionCreaters.js</strong></p><pre class="line-numbers language-none"><code class="language-none">// (1)添加一个changePage函数export const changePage = (page) =&gt; ({  type: actionTypes.CHANGE_PAGE,  page,});// (2)changeList中添加计算totalPage的action在异步获取数据的同时也确定了总的热门搜索的页数totalPage: Math.ceil(data.length / 10),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对应更改actionTypes.js</li></ul><p><strong>reducer.js</strong></p><pre class="line-numbers language-none"><code class="language-none">// changeList action添加更改获取totalPage值case actionTypes.CHANGE_LIST:  return state.merge({  list: action.data,  totalPage: action.totalPage,});// changePage action获取当前page值case actionTypes.CHANGE_PAGE:return state.set("page", action.page);default:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>merge方法，返回一个对象，可以修改一组immutable类型的数据。代替get链的写法</li></ul><h2 id="首页开发"><a href="#首页开发" class="headerlink" title="首页开发"></a>首页开发</h2><h3 id="路由功能使用"><a href="#路由功能使用" class="headerlink" title="路由功能使用"></a>路由功能使用</h3><ul><li>对于单页面应用，更改对应不同的路径显示不同的div，实现内容切换</li></ul><ol><li>安装</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install react-router-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>引入对应模块</li></ol><pre class="line-numbers language-none"><code class="language-none">import { BrowserRouter, Route } from "react-router-dom";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>BrowserRouter是切换部分的总盒子</li><li>Route是盒子内的切换子模块</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;BrowserRouter&gt;  &lt;Route path="/" exact render={() =&gt; &lt;div&gt;home&lt;/div&gt;}&gt;&lt;/Route&gt;  &lt;Route path="/detail" exact render={() =&gt; &lt;div&gt;detail&lt;/div&gt;}&gt;&lt;/Route&gt;&lt;/BrowserRouter&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>exact属性</strong>: path完全匹配（不加的话，“/detail”会识别“/”和”/detail”）</li></ul><h3 id="文件架构搭建"><a href="#文件架构搭建" class="headerlink" title="文件架构搭建"></a>文件架构搭建</h3><ol><li>新建pages文件夹<ul><li>存放各个页面</li></ul></li><li>pages文件夹下，新建detail详情页和home主页</li><li>detail和home都要创建对应的index.js和styles.js</li><li>页面内容过多可以分组件开发<ul><li>如：home下新建compoments文件夹存放主页的各个小组件</li></ul></li></ol><p><strong>App.js</strong></p><pre class="line-numbers language-none"><code class="language-none">//引入各个页面组件import Home from "./pages/home";import Detail from "./pages/detail";//Route中 component属性指向相应组件，而不是render函数&lt;Route path="/" exact component={Home}&gt;&lt;/Route&gt;&lt;Route path="/detail" exact component={Detail}&gt;&lt;/Route&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>home/index.js</strong></p><ul><li>首页分为左右两个部分</li></ul><pre class="line-numbers language-none"><code class="language-none">//home 结构&lt;HomeWrapper&gt;  &lt;HomeLeft&gt;    &lt;Topic /&gt;    &lt;List /&gt;  &lt;/HomeLeft&gt;  &lt;HomeRight&gt;    &lt;Recommend /&gt;    &lt;Writer /&gt;  &lt;/HomeRight&gt;&lt;/HomeWrapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Topic部分设计"><a href="#Topic部分设计" class="headerlink" title="Topic部分设计"></a><strong>Topic部分设计</strong></h3><ul><li>在Topic.js文件中编写Topic内容</li></ul><ol><li>建立store连接</li></ol><pre class="line-numbers language-none"><code class="language-none">import { connect } from "react-redux";const mapState = (state) =&gt; ({  list: state.get("home").get("topicList"),});export default connect(mapState, null)(Topic);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>结构样式编写</li></ol><pre class="line-numbers language-none"><code class="language-none">render() {  const { list } = this.props;  return (    &lt;TopicWrapper&gt;      {list.map((item) =&gt; (        &lt;TopicItem key={item.get("id")}&gt;          &lt;img className="topic-pic" src={item.get("imgUrl")} /&gt;          {item.get("title")}        &lt;/TopicItem&gt;      ))}    &lt;/TopicWrapper&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首页的样式都写在home文件夹下的统一style.js中</li></ul><pre class="line-numbers language-none"><code class="language-none">import { TopicWrapper, TopicItem } from "../style";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>添加reducer.js</li></ol><pre class="line-numbers language-none"><code class="language-none">// 需要使用到topicList列表 并且引入immutableimport { fromJS } from "immutable";const defaultState = fromJS({  topicList: [    {      id: 1,      title: "社会热点",      imgUrl:        "绝对地址1",    },    {      id: 2,      title: "手绘",      imgUrl:        "绝对地址2",    },  ],});export default (state = defaultState, action) =&gt; {  switch (action.type) {    default:      return state;  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List部分设计"><a href="#List部分设计" class="headerlink" title="List部分设计"></a>List部分设计</h3><ul><li>在List.js中设计List内容    流程和上面相同</li></ul><p>分析一下就行：</p><blockquote><ul><li>页面设计三个部分：（标题，简介），图片（右）</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">list.map((item) =&gt; {  return (    &lt;ListItem key={item.get('id')}&gt;      &lt;img alt='' className='pic' src={item.get('imgUrl')} /&gt;      &lt;ListInfo&gt;        &lt;h3 className='title'&gt;{item.get('title')}&lt;/h3&gt;        &lt;p className='desc'&gt;{item.get('desc')}&lt;/p&gt;      &lt;/ListInfo&gt;    &lt;/ListItem&gt;  );})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>connect连接数据仓库</p></li><li><p>修改reducer，</p></li><li><p>添加articleList列表数据</p></li></ul></blockquote><ul><li>其他两个模块类似完成 Recommend.js和Writer.js</li></ul><h3 id="异步获取数据"><a href="#异步获取数据" class="headerlink" title="异步获取数据"></a>异步获取数据</h3><ul><li>在home/index.js中通过componentDidMount函数实现异步axios数据请求</li></ul><pre class="line-numbers language-none"><code class="language-none">// (1) 需要引入axios模块// (2) 在componentDidMount中异步请求  componentDidMount() {    axios.get("/api/home.json").then((res) =&gt; {      const result = res.data.data;      const action = {        type: "change_home_data",        topicList: result.topicList,        articleList: result.articleList,        recommendList: result.recommendList,      };      this.props.changeHomeData(action);    });  }// (3) 这里只用对dispatch方法做连接const mapDispatch = (dispatch) =&gt; ({  changeHomeData(action) {    dispatch(action);  },});export default connect(null, mapDispatch)(Home);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步操作中间件优化"><a href="#异步操作中间件优化" class="headerlink" title="异步操作中间件优化"></a>异步操作中间件优化</h3><ul><li>之前我们已经引入redux-thunk模块，所以，我们可以在actioncreators.js中异步返回函数！</li><li>并且利用生命周期函数componentDidMount异步调用执行方法changeHomeData</li></ul><blockquote><p>将异步请求放再actionCreators.js中</p><ol><li>引入axios模块</li><li>导出getHomeInfo（返回一个函数）</li><li>函数中还会带着数据再次调用dispatch方法（返回action）</li><li>dispatch方法将action派发给reducer进行处理</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">componentDidMount() {this.props.changeHomeData();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">const mapDispatch = (dispatch) =&gt; ({  changeHomeData() {    dispatch(actionCreators.getHomeInfo());  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载更多模块设计"><a href="#加载更多模块设计" class="headerlink" title="加载更多模块设计"></a>加载更多模块设计</h3><ul><li>点击加载更多按钮，加载出更多list列表项</li></ul><ol><li>结构代码添加 <code>List.js</code></li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;LoadMore onClick={() =&gt; getMoreList(page)}更多文字&lt;/LoadMore&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>样式文件添加对应样式 <code>style.js</code></li></ol><pre class="line-numbers language-none"><code class="language-none">export const LoadMore = styled.div`width: 100%;  height: 40px;  line-height: 40px;  margin: 30px 0;  background: #a5a5a5;  text-align: center;  border-radius: 20px;  color: #fff;  cursor: pointer;`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>绑定<code> dispatch</code>函数</li></ol><pre class="line-numbers language-none"><code class="language-none">getMoreList(page) {dispatch(actionCreators.getMoreList(page));},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改 <code>actionCreators.js</code></li></ol><ul><li>也是异步请求，但是要加上加载的页码数</li></ul><pre class="line-numbers language-none"><code class="language-none">const addHomeList = (list, nextPage) =&gt; ({  type: actionTypes.ADD_ARTICLE_LIST,  list: fromJS(list),  nextPage,});export const getMoreList = (page) =&gt; {  return (dispatch) =&gt; {    axios.get("/api/homeList.json?page=" + page).then((res) =&gt; {      const result = res.data.data;      dispatch(addHomeList(result, page + 1));    });  };};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>reducer.js</li></ol><ul><li>添加处理程序</li></ul><pre class="line-numbers language-none"><code class="language-none">case actionTypes.ADD_ARTICLE_LIST:return state.merge({articleList: state.get("articleList").concat(action.list),articlePage: action.nextPage,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol><li><p>react-redux使用connect连接store和页面，一旦store改变了，就会重新渲染使用connect所连接的所有render部分。</p><blockquote><ul><li>为解决这样的性能消耗，react帮我们预定义了一个纯组件<code>PureComponent</code></li></ul><p>其中相当于内置了<strong>shouldComponentUpdate</strong>这个生命周期函数！！，进行一层浅比较，所以对于一些引用数据类型可能会有坑，但对于使用immutable.js管理的数据，可以得到很好的兼容性！！！</p></blockquote></li><li><p>单页面跳转</p><blockquote><ul><li>在react-router-dom中有一个<code>Link</code>组件  <code>to</code> 属性可以实现单页面跳转功能</li></ul><pre class="line-numbers language-none"><code class="language-none">  &gt;//使用方法 ：外面加一个  &gt;&lt;Link to="/"&gt;//回到根页面....  &gt;&lt;/Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意点</strong>：使用路由跳转的组件都应该放在<code>&lt;BrowserRouter&gt;</code>组件内部</p></blockquote></li></ol><h2 id="详情页-登录功能开发"><a href="#详情页-登录功能开发" class="headerlink" title="详情页/登录功能开发"></a>详情页/登录功能开发</h2>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="2020/10/29/shu-ju-lei-xing/"/>
      <url>2020/10/29/shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="原始类型的方法"><a href="#原始类型的方法" class="headerlink" title="原始类型的方法"></a>原始类型的方法</h2><a id="more"></a><ul><li>7种原始类型：<code>string</code>，<code>number</code>，<code>bigint</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code> 和 <code>undefined</code>。</li><li>对象</li><li>除了 <code>null</code> 和 <code>undefined</code> 以外的原始类型都提供了许多有用的方法</li><li>形式上，构造器方法，内置方法通过临时对象工作</li></ul><p><strong>实例</strong></p><ul><li>原始对象不是对象，不能额外存储数据</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问？ 返回结果是什么</span><span class="token comment">// (1)undefined（非严格模式）</span><span class="token comment">// (2)报错（严格模式）</span><span class="token comment">// 分析：</span><span class="token comment">// 1. 当我们访问str属性时，一个‘对象包装器‘被创建</span><span class="token comment">// 2. 严格模式下，写入内容会报错</span><span class="token comment">// 3. 否则，会执行属性操作，对象获得test属性，但使用完’对象包装器消失‘，因此str并没有这个属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>number有两种类型</p><ol><li>js中常规数字以64位的格式IEEE-754存储，也就是“双精度浮点数”，常规数字不能超过 <code>2e53</code> 或小于 <code>-2e53</code>。</li><li>BigInt数字，表示任意长度的<strong>整数</strong></li></ol><h4 id="编写数字的更多方法"><a href="#编写数字的更多方法" class="headerlink" title="编写数字的更多方法"></a>编写数字的更多方法</h4><ul><li>表示10亿<ol><li><code>let billion = 1000000000;</code></li><li><code>let billion = 10e9;</code></li><li><code>let billion = 1bn;</code></li></ol></li><li>进制<ol><li>16进制：<code>0xff</code>,一般用于表示颜色，编码字符等</li><li>8进制： <code>0o377</code>,八进制255</li><li>2进制：<code>0b11111111</code>,二进制255</li><li>其他进制使用，<code>parseInt</code></li></ol></li></ul><h4 id="toString-base"><a href="#toString-base" class="headerlink" title="toString(base)"></a>toString(base)</h4><ul><li>返回给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例子</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ff</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 11111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>base </code>范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code>。</p></li><li><p><strong>base=36</strong> 是最大进制，数字可以是 <code>0..9</code> 或 <code>A..Z</code>。例如，做一个短的URL，可以使用基数为36的数字系统表示</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">123456.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2n9c</span><span class="token comment">//也可写为</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用两点调用一个方法</strong>：注意，数字后一个点表示后面是小数部分，两个点就表明无小数部分，直接调用后面的方法</li></ul></li></ul><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><ul><li>对数字进行舍入（rounding）的内建函数</li></ul><ol><li><code>Math.floor</code>:向下舍入</li><li><code>Math.ceil</code>:向上舍入</li><li><code>Math.round</code>:向最近的整数舍入</li><li><code>Math.trunc</code>:移除小数点后的内容，不舍入</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax,fetch,axios</title>
      <link href="2020/10/29/ajax-fetch-axios/"/>
      <url>2020/10/29/ajax-fetch-axios/</url>
      
        <content type="html"><![CDATA[<h3 id="javascript的Ajax"><a href="#javascript的Ajax" class="headerlink" title="javascript的Ajax"></a>javascript的Ajax</h3><ul><li>Ajax的全称是Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求，而不需要重载（刷新）整个页面。</li><li>Ajax使用XMLHttpRequest对象取得新数据，然后再通过 DOM 将新数据插入到页面中。也就是无需刷新即可从服务器获取数据</li></ul><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h5><blockquote><p>对于IE7+和其他浏览器，直接使用XML对象，IE6以前使用ActiveXObject对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> xhr<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRquest<span class="token punctuation">)</span> <span class="token punctuation">{</span>  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动请求"><a href="#启动请求" class="headerlink" title="启动请求"></a><strong>启动请求</strong></h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>method:请求方法：post，get等</p><p>url：请求链接，只能向同源url发送</p><p>boolean：是否异步，默认true（异步）</p><p>body:包含request.body比如post要使用请求体，get方法填null或不填</p><p>注意：调用open并不会真正发送请求，只是启动一个请求以备发送</p></blockquote><h5 id="监听请求"><a href="#监听请求" class="headerlink" title="监听请求"></a><strong>监听请求</strong></h5><blockquote><p>load—请求完成（HTTP状态为400或500），并且响应已完全下载</p><p>error—当无法送出请求，如网络中断，无效URl</p><p>progress—在下载响应期间定期触发，报告下载了多少</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Loaded: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 仅在根本无法发出请求时触发</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Network Error</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 定期触发</span>  <span class="token comment">// event.loaded —— 已经下载了多少字节</span>  <span class="token comment">// event.lengthComputable = true，当服务器发送了 Content-Length header 时</span>  <span class="token comment">// event.total —— 总字节数（如果 lengthComputable 为 true）</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>status: HTTP状态码，200,404,403等，非HTTP错误为0；</p><p>statusText：状态信息，200状态码对应OK；404对应Not Found；403对应Forbidden</p><p>response：旧版本为responseText，服务器响应体</p></blockquote><p>我们还可以指定<strong>超时</strong></p><pre class="line-numbers language-none"><code class="language-none">xhr.timeout = 10000; //timeout单位是ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL搜索参数（确保正确编码）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://google.com/search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'test me!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编码</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//https://google.com/search?q=test+me%21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>readyState</strong></p><p>xml的状态由 <code>0</code> → <code>1</code> → <code>2</code> → <code>3</code> → … → <code>3</code> → <code>4</code> 通过网络接收到一个数据包就重复一次状态<code>3</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">UNSENT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始状态</span><span class="token constant">OPENED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// open 被调用</span><span class="token constant">HEADERS_RECEIVED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 接收到 response header</span><span class="token constant">LOADING</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 响应正在被加载（接收到一个数据包）</span><span class="token constant">DONE</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 请求完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//以前的监听事件就是这样实现的；现在被load，error，progress代替</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//加载中</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//请求完成</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h5 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a><strong>完整示例</strong></h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.创建一个XML对象</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.配置请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'同源url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.发送网络请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.收到响应后调用</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>statusText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Done,got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComtable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Request failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应类型"><a href="#响应类型" class="headerlink" title="响应类型"></a>响应类型</h5><p>使用<code>xhr.responseType</code>设置响应格式</p><ul><li>“” （默认）：响应格式为字符串</li><li>“text”：字符串</li><li>“arraybuffer”：响应格式为ArrayBuffer，二进制数据</li><li>“blob”：响应格式为Blod，二进制数据</li><li>“document“：响应格式为XML document</li><li>“json”：响应为JSON（自动解析）</li></ul><p>以JSON为例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'/article/xmlhttprequest/example/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 响应为 {"message": "Hello, world!"}</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> responseObj <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>responseObj<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, world!</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="终止请求"><a href="#终止请求" class="headerlink" title="终止请求"></a>终止请求</h5><p>随时都可以中止请求，调用<code>xhr.abort()</code>;触发abort事件，xhr.status变为0</p><h5 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h5><p>open的第三个参数为<code>false</code>,阻塞脚本执行，像alert</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'/article/xmlhttprequest/hello.txt'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>statusText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 代替 onerror</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Request failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：阻塞程序执行；没有进度指示；不能向其他域发送请求；不能设置超时</p><h5 id="HTTP-Header"><a href="#HTTP-Header" class="headerlink" title="HTTP-Header"></a>HTTP-Header</h5><p>XML允许发送自定义header，并且可以从响应中读取header</p><ol><li><p>setRequestHeader(name, value)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>getResponseHeader(name)/getAllResponseHeaders()</p><pre class="line-numbers language-none"><code class="language-none">xhr.getResponseHeader('Content-Type');//header单行形式返回Cache-Control: max-age=31536000Content-Length: 4260Content-Type: image/pngDate: Sat, 08 Sep 2012 16:53:16 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：不能获取set-cookie；header只加不减，不能移除；对于一些浏览器专门管理的header不能修改（Referer，Host）</p><p><strong>补充：Host，Origin，Referer</strong></p><blockquote><p>1.Host:请求将被发送的目的地，<strong>包括域名端口号</strong></p><p>2.Referer：告诉服务器请求的原始资源URL，用于所有请求；<strong>协议+域名+查询参数（不包括锚点信息）</strong>；file协议下是不带referer的</p><p>3.Origin：说明请求从哪里发起，<strong>协议+域名</strong>；存在CORS请求或者POST请求</p></blockquote><h5 id="获取header对象"><a href="#获取header对象" class="headerlink" title="获取header对象"></a>获取header对象</h5><p>header之间都是’/r/n’为换行符；并且name和value之间都是’:’分割</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> headers <span class="token operator">=</span> xhr  <span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// headers['Content-Type'] = 'image/png'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="POST，FormData"><a href="#POST，FormData" class="headerlink" title="POST，FormData"></a>POST，FormData</h5><p>POST请求可以很好地使用FormData对象作为请求体</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个对象，可以选择从 &lt;form&gt; 中获取数据</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 附加一个字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>xhr.open('POST', ...)</code> —— 使用 <code>POST</code> 方法。</li><li><code>xhr.send(formData)</code> 将表单发送到服务器。</li></ol><p>示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>surname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Smith<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 从表单预填充 FormData</span>  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 附加一个字段</span>  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"middle"</span><span class="token punctuation">,</span> <span class="token string">"Lee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将其发送出去</span>  <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/article/xmlhttprequest/post/user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 <code>multipart/form-data</code> 编码发送表单。</p><p><strong>补充</strong>：HTML表单的entype三种类型</p><ol><li>application/x-www-urlencoded</li></ol><ul><li><p>默认编码模式，数据会被以x-www-urlencoded 方式编码到 Body 中来传送，如果是GET请求，会附在url后面发送（GET只支持ASCII字符集，其一个劣势）</p></li><li><p>编码方式：数据会被编码成以<code>&amp;</code>分隔的键值对；字符以URL编码方式编码。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">// 转换过程: {a: 1, b: 2} -&gt; a=1&amp;b=2 -&gt; 如下(最终形式)"a%3D1%26b%3D2"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>multipart/form-data</li></ol><ul><li>请求头中<code>Content-Type</code>字段会包含<code>boundary</code>（由浏览器默认指定）</li><li>数据会分为多个部分，每一个部分都通过分隔符分隔，并且都有HTTP头部描述子包体，最后<code>--</code>结束</li></ul><pre class="line-numbers language-none"><code class="language-none">//请求体Content-Disposition: form-data;name="data1";Content-Type: text/plaindata1----WebkitFormBoundaryRRJKeWfHPGrS4LKeContent-Disposition: form-data;name="data2";Content-Type: text/plaindata2----WebkitFormBoundaryRRJKeWfHPGrS4LKe--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong>：每个表单元素都是独立的资源表述；对于一些文件上传，基本使用这个，而不是前者，没必要url编码。</p><ol start="3"><li>text/plain</li></ol><ul><li>按照键值对排列表单数据<code>key1=value1\r\nkey2=value2</code>，不进行转义。</li></ul><p><strong>使用JSON字符串形式发送</strong></p><ul><li>不要忘了设置 <code>Content-Type: application/json</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  surname<span class="token operator">:</span> <span class="token string">"Smith"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">'/submit'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上传进度"><a href="#上传进度" class="headerlink" title="上传进度"></a>上传进度</h5><p>对于下载进度我们有onprogress事件监听，上传进度<code>xhr.upload</code></p><ul><li><code>loadstart</code> —— 上传开始。</li><li><code>progress</code> —— 上传期间定期触发。</li><li><code>abort</code> —— 上传中止。</li><li><code>error</code> —— 非 HTTP 错误。</li><li><code>load</code> —— 上传成功完成。</li><li><code>timeout</code> —— 上传超时（如果设置了 <code>timeout</code> 属性）。</li><li><code>loadend</code> —— 上传完成，无论成功还是 error。</li></ul><p><strong>示例</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload(this.files[0])<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--onchange事件:对于file类型在选择文件后触发--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 跟踪上传进度</span>  xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Uploaded </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 跟踪完成：无论成功与否</span>  xhr<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/article/xmlhttprequest/post/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery的Ajax"><a href="#jQuery的Ajax" class="headerlink" title="jQuery的Ajax"></a>jQuery的Ajax</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>  type<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>  contentType<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  async<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  dataType<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>url 必填项，规定把请求发送到哪个 URL。</p><p>type 以什么样的方式获取数据，是get或post</p><p>contentType：发送POST请求的格式，默认值为’application/x-www-form-urlencoded;</p><p>charset=UTF-8’，也可以指定为text/plain、application/json</p><p>async 是否异步执行AJAX请求，默认为true，千万不要指定为false</p><p>data 发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上，如果是POST请求，根据contentType把data序列化成合适的格式；</p><p>dataType</p><p>接收的数据格式，可以指定为’html’、‘xml’、‘json’、’text’等，缺省情况下根据响应的Content-Type猜测。</p><p>success 可选。执行成功时返回的数据。</p></blockquote><p>是基于xhr开发的，针对MVC模式的编程模式，不太适合当前的MVVM。jQuery本身比较大。</p><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>也是对原生XHR的封装；Promise实现版本，很好的实现异步逻辑。可以用于浏览器和node的HTTP库。</p><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h5 id="设置全局axios默认值"><a href="#设置全局axios默认值" class="headerlink" title="设置全局axios默认值"></a>设置全局axios默认值</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：axios的headers的content-type默认<code>application/json</code></p><p>默认情况下，axios会将js对象序列化为JSON，get请求对请求参数不用处理；post请求并且content-type为application/x-www-form-urlencoded，需要使用URLSearchParms格式化请求参数，否则content-type依然是application/JSON</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="get请求三种方法"><a href="#get请求三种方法" class="headerlink" title="get请求三种方法"></a>get请求三种方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种写法</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?id=12345&amp;name=xiaoming'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二种写法</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>      id<span class="token operator">:</span> <span class="token string">'12345'</span>，      name<span class="token operator">:</span> <span class="token string">'xiaoming'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三种写法</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>      id<span class="token operator">:</span> <span class="token string">'12345'</span>，      name<span class="token operator">:</span> <span class="token string">'xiaoming'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="post请求两种方法"><a href="#post请求两种方法" class="headerlink" title="post请求两种方法"></a>post请求两种方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种写法</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      id<span class="token operator">:</span> <span class="token string">'12345'</span>，      name<span class="token operator">:</span> <span class="token string">'xiaoming'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二种写法</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'/user'</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      id<span class="token operator">:</span> <span class="token string">'12345'</span>，      name<span class="token operator">:</span> <span class="token string">'xiaoming'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span>       headers<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h5><blockquote><p>axios.all()  axios.spread()</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acct<span class="token punctuation">,</span> perms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 两个请求现在都执行完成</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h5><blockquote><p>axios.create([config])</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token operator">:</span> <span class="token string">'http://localhost:3000/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>配置项优先级：</p></blockquote><blockquote><p>config参数 &gt; 实例的defaults属性 &gt; node_modules/axios/lib/defaults.js 找到的库的默认值</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用由库提供的配置的默认值来创建实例</span><span class="token comment">// 此时超时配置的默认值是 `0`</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 覆写库的超时默认值</span><span class="token comment">// 现在，所有请求都会等待 2.5 秒</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span> <span class="token comment">// 为已知需要花费很长时间的请求覆写超时设置</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/longRequest'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><blockquote><p>请求发出之前后者响应被then或catch处理前拦截他们做预处理</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//axiosInstance为自定义实例</span>axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token comment">//request类似</span>  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"网络错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以在稍后移除拦截器</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><blockquote><p>一个 基于promise设计的low-level API</p><p>优点：实现关注点分离，输入，输出，事件跟踪分离</p><p>缺点：不支持同步；只对网络请求报错，对400和500都当做成功请求，需要封装处理；</p></blockquote><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.await调用</span><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析 response header</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 body 读取为 json</span><span class="token comment">//2.promise形式</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token comment">/* process result */</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>options</strong></li></ul><blockquote><p>method：HTTP方法</p><p>headers：一个对象（不是所有的header都可以编写）</p><p>body：post等方法时才有请求体</p><ul><li>字符串（例如 JSON 编码的），</li><li><code>FormData</code> 对象，以 <code>form/multipart</code> 形式发送数据</li><li><code>Blob</code>/<code>BufferSource</code> 发送二进制数据，</li><li>URLSearchParams，以 <code>x-www-form-urlencoded</code> 编码形式发送数据，很少使用。</li></ul></blockquote><ul><li><strong>response</strong></li></ul><blockquote><p><strong>响应属性</strong>：status，ok（状态码为2XX即为，true），headers（类似于map的对象）</p><p><strong>响应体：</strong>只能获取一次！！</p><ul><li><strong><code>response.text()</code></strong> —— 读取 response，并以文本形式返回 response，</li><li><strong><code>response.json()</code></strong> —— 将 response 解析为 JSON 对象形式，</li><li><strong><code>response.formData()</code></strong> —— 以 <code>FormData</code> 对象（form/multipart 编码，参见下一章）的形式返回 response，</li><li><strong><code>response.blob()</code></strong> —— 以 <a href="https://zh.javascript.info/blob">Blob</a>（具有类型的二进制数据）形式返回 response，</li><li><strong><code>response.arrayBuffer()</code></strong> —— 以 <a href="https://zh.javascript.info/arraybuffer-binary-arrays">ArrayBuffer</a>（低级别的二进制数据）形式返回 response。</li></ul></blockquote><h5 id="实例：上传图片"><a href="#实例：上传图片" class="headerlink" title="实例：上传图片"></a>实例：上传图片</h5><blockquote><p>使用Blob对象通过fetch提交二进制数据，<code>&lt;canvas&gt;</code>作为画布</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span>0</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvasElem<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>1px solid</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    canvasElem<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> ctx <span class="token operator">=</span> canvasElem<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/fetch/post/image'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        body<span class="token operator">:</span> blob      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 服务器给出确认信息和图片大小作为响应</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/10/29/ajax-fetch-axios/image-20210331151953251.png" class="" title="cavans"><blockquote><p>注：没有手动设置content/type，因为Bolb对象通过toBlob生成带有，”image/png”，这个类型就是content-type值</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//promise改写</span><span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/fetch/post/image'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      body<span class="token operator">:</span> blob    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实例：fetch-github用户信息"><a href="#实例：fetch-github用户信息" class="headerlink" title="实例：fetch github用户信息"></a>实例：fetch github用户信息</h5><blockquote><p>要获取一个用户，我们需要：<code>fetch('https://api.github.com/users/USERNAME')</code>.</p><p>如果响应的状态码是 <code>200</code>，则调用 <code>.json()</code> 来读取 JS 对象。</p><p>否则，如果 <code>fetch</code> 失败，或者响应的状态码不是 <code>200</code>，我们只需要向结果数组返回 <code>null</code> 即可</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token parameter">names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> jobs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> job <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token parameter">successResponse</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>successResponse<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> successResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token parameter">failResponse</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    jobs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> results<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里使用Promise.all确保都resolve结束再返回；直接.then而不是在Promise.all中实现，使得json解析不需要累计解决，提升效率。</p></blockquote><h5 id="POST和FormData"><a href="#POST和FormData" class="headerlink" title="POST和FormData"></a>POST和FormData</h5><p>fetch 可以接受一个FormData作为body，并编码发送出去，带有 <code>Content-Type: multipart/form-data</code></p><p><strong>实例：发送一个简单的表单</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formElem<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>surname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Smith<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  formElem<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/formdata/post/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      body<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>formElem<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/10/29/ajax-fetch-axios/image-20210401054132188.png" class="" title="fetch-formdata"><blockquote><p>修改FormData中的字段</p><ul><li><code>formData.append(name, value)</code> —— 添加具有给定 <code>name</code> 和 <code>value</code> 的表单字段，</li><li><code>formData.append(name, blob, fileName)</code> —— 添加一个字段，就像它是 <code>&lt;input type="file"&gt;</code>，第三个参数 <code>fileName</code> 设置文件名（而不是表单字段名），因为它是用户文件系统中文件的名称，</li><li><code>formData.delete(name)</code> —— 移除带有给定 <code>name</code> 的字段，</li><li><code>formData.get(name)</code> —— 获取带有给定 <code>name</code> 的字段值，</li><li><code>formData.has(name)</code> —— 如果存在带有给定 <code>name</code> 的字段，则返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p>从技术上来讲，一个表单可以包含多个具有相同 <code>name</code> 的字段，因此，多次调用 <code>append</code> 将会添加多个具有相同名称的字段。</p><p>还有一个 <code>set</code> 方法，语法与 <code>append</code> 相同。不同之处在于 <code>.set</code> 移除所有具有给定 <code>name</code> 的字段，然后附加一个新字段。因此，它确保了只有一个具有这种 <code>name</code> 的字段，其他的和 <code>append</code> 一样：</p><ul><li><code>formData.set(name, value)</code>，</li><li><code>formData.set(name, blob, fileName)</code>。</li></ul><p>我们也可以使用 <code>for..of</code> 循环迭代 formData 字段：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 列出 key/value 对</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> formData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key1=value1，然后是 key2=value2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>实例：发送带有文件的表单</strong></p><p>表单始终以 <code>Content-Type: multipart/form-data</code> 来发送数据，这个编码允许发送文件。因此 <code>&lt;input type="file"&gt;</code> 字段也能被发送</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"formElem"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"firstName"</span> value<span class="token operator">=</span><span class="token string">"John"</span><span class="token operator">&gt;</span>  Picture<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"picture"</span> accept<span class="token operator">=</span><span class="token string">"image/*"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  formElem<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/formdata/post/user-avatar'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      body<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>formElem<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/10/29/ajax-fetch-axios/image-20210401055022057.png" class="" title="fetch-file"><p><strong>实例：发送具有Blob的表单</strong></p><p>前面我们知道可以使用Blob发送一个动态生成的二进制数据（图片）；实际更加方便的发送图片的方式不是单独发，而是作为表单的一部分，并带有附加字段（比如：“name”和其他的metadata）一起发</p><p>服务器也更加适合接受多部分编码的表单（multipart-encoded form），而不是原始的二进制数据。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span>0</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvasElem<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>1px solid</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    canvasElem<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> ctx <span class="token operator">=</span> canvasElem<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> imageBlob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> imageBlob<span class="token punctuation">,</span> <span class="token string">"image.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/formdata/post/image-form'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        body<span class="token operator">:</span> formData      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：图片Blob是如何添加的？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//像表单 &lt;input type="file" name="image"&gt; 一样</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> imageBlob<span class="token punctuation">,</span> <span class="token string">"image.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上传下载进度"><a href="#上传下载进度" class="headerlink" title="上传下载进度"></a>上传下载进度</h5><blockquote><p>无法跟踪上传进度（请看XMLHttpRequest）</p><p>下载进度：使用<code>response.body</code>属性,给与进度读取完全控制。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Step 1：启动 fetch，并获得一个 reader</span><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits?per_page=100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Step 2：获得总长度（length）</span><span class="token keyword">const</span> contentLength <span class="token operator">=</span> <span class="token operator">+</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Content-Length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Step 3：读取数据</span><span class="token keyword">let</span> receivedLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前接收到了这么多字节</span><span class="token keyword">let</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 接收到的二进制块的数组（包括 body）</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>done<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  receivedLength <span class="token operator">+=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>receivedLength<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>contentLength<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Step 4：将块连接到单个 Uint8Array</span><span class="token keyword">let</span> chunksAll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>receivedLength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (4.1)</span><span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> chunk <span class="token keyword">of</span> chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>  chunksAll<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (4.2)</span>  position <span class="token operator">+=</span> chunk<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Step 5：解码成字符串</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>chunksAll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我们完成啦！</span><span class="token keyword">let</span> commits <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>commits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><p><code>response.body.getReader()</code>:获取一个流读取器</p></li><li><p> <code>Content-Length</code> :跨域请求可能不存在这个 header</p></li><li><p> <code>await reader.read()</code>：响应块放在chunks中</p></li><li><p>合并这些<code>Uint8Array</code> 字节块数组</p></li><li><p>解码为字符串</p><p><code>result = new TextDecoder("utf-8").decode(chunksAll);</code></p></li><li><p>或者想要的到二进制数据，直接将chunks这个字节数组变为二进制</p><p><code>blob = new Blob(chunks);</code></p></li></ol></blockquote><h5 id="中止（Abort）"><a href="#中止（Abort）" class="headerlink" title="中止（Abort）"></a>中止（Abort）</h5><blockquote><p>js通常没有终止promise的概念，但提供了一个内建对象<code>AbortController</code>，不仅可以终止fetch，还可以终止其他异步任务</p></blockquote><p><strong>AbortController 对象</strong></p><blockquote><p>创建一个控制器<code>let controller = new AbortController();</code></p><ul><li>一个方法abort()</li><li>一个属性signal，设置事件监听器</li></ul><p>当 <code>abort()</code> 被调用时：</p><ul><li><code>controller.signal</code> 就会触发 <code>abort</code> 事件。</li><li><code>controller.signal.aborted</code> 属性变为 <code>true</code>。</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span><span class="token comment">// 可取消的操作这一部分</span><span class="token comment">// 获取 "signal" 对象，</span><span class="token comment">// 并将监听器设置为在 controller.abort() 被调用时触发</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"abort!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 另一部分，取消（在之后的任何时候）：</span>controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中止！</span><span class="token comment">// 事件触发，signal.aborted 变为 true</span><span class="token function">alert</span><span class="token punctuation">(</span>signal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结合Fetch</strong></p><blockquote><p>作为fetch的一个option进行传递</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>  signal<span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：1s后终止fetch</strong></p><blockquote><p><code>fetch</code> 从 <code>signal</code> 获取了事件并中止了请求。当一个 fetch 被中止，它的 promise 就会以一个 error <code>AbortError</code> reject</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1 秒后中止</span><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/fetch-abort/demo/hang'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    signal<span class="token operator">:</span> controller<span class="token punctuation">.</span>signal  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'AbortError'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// handle abort()</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Aborted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：终止其他异步promise</strong></p><blockquote><p>核心就是添加abort监听事件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourJob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 我们的任务</span>  <span class="token operator">...</span>  controller<span class="token punctuation">.</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> fetchJobs <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">url</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">// fetches</span>  signal<span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待完成我们的任务和所有 fetch</span><span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>fetchJobs<span class="token punctuation">,</span> ourJob<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果 controller.abort() 被从其他地方调用，</span><span class="token comment">// 它将中止所有 fetch 和 ourJob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react实践入门</title>
      <link href="2020/10/24/react-shi-jian-ru-men/"/>
      <url>2020/10/24/react-shi-jian-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解create-react-app"><a href="#深入理解create-react-app" class="headerlink" title="深入理解create-react-app"></a>深入理解<code>create-react-app</code></h2><ul><li>这是一个官方文档提供的新手使用的脚手架</li></ul><a id="more"></a><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><pre class="line-numbers language-none"><code class="language-none">npx create-react-app my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在目标文件夹下打开shell命令行工具，写入上述语句，就可以在当前目录下新建一个react工程文件</li></ul><h3 id="工程目录解析"><a href="#工程目录解析" class="headerlink" title="工程目录解析"></a>工程目录解析</h3><ul><li>新建工程目录如下</li></ul><img data-src="/2020/10/24/react-shi-jian-ru-men/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90.png" class="" title="文件目录解析"><blockquote><ol><li><p><code>package-lock.josn</code>:项目依赖的安装包版本号</p></li><li><p><code>package.json</code>:node的包文件，可以让项目变为一个包,也安装了react，供<code>.js</code>文件引用</p></li><li><p><code>gitignore</code>:不想传到git仓库的文件可以放在这里</p></li><li><p>src:</p><ul><li><p>index.js：程序的运行入口</p><pre class="line-numbers language-none"><code class="language-none">import React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from '.App';//import reportWebVitals from './reportWebVitals';//reportWebVitals();//上面两个是一对用于PWA，增强web app功能//还可以用相同的引入格式，引入其他文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>index.css：文件样式</p></li><li><p>App.js: </p><pre class="line-numbers language-none"><code class="language-none">improt './App.css';//头部，等引入文件...export default App;//引出文件，提供给别的.js文件引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>App.test.js: 自动化测试文件（函数式编程）</p></li></ul></li><li><p>public:</p><ul><li>index.html:</li><li>favicon.ico</li><li>manifest.json:定义快捷方式的图标（和pwa相配）</li></ul></li><li><p>node_modules:第三方的包，</p></li></ol></blockquote><h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><h5 id="Component基类"><a href="#Component基类" class="headerlink" title="Component基类"></a>Component基类</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">improt <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">//等价于,下面两句语句</span><span class="token comment">//import React from 'react';</span><span class="token comment">//const Component = React.Component;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义组件需要继承React.Component</li></ul><pre class="line-numbers language-none"><code class="language-none">import React from "react";class App extends React.Component {  render() {    return &lt;div&gt;hello&lt;/div&gt;;  }}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主文件下"><a href="#主文件下" class="headerlink" title="主文件下"></a>主文件下</h5><ol><li>引用<code>import ReactDOM from 'react-dom';</code></li></ol><ul><li><p>ReactDOM用法</p></li><li><p>他是一个第三方组件，调用<code>render方法</code>将我们定义的组件挂载到html页面中</p></li></ul><pre class="line-numbers language-none"><code class="language-none">ReactDOM.render(&lt;App /&gt;, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>引入<code>import React from 'react';</code></li></ol><ul><li><p>React中包含<code>JSX</code>语法</p><blockquote><p><code>&lt;App /&gt;</code>：标签式语法</p><p><code>render(){}</code>: 函数中的标签也是JSX语法</p></blockquote></li></ul><h5 id="补充：简单jsx语法"><a href="#补充：简单jsx语法" class="headerlink" title="补充：简单jsx语法"></a>补充：简单jsx语法</h5><ol><li><p>支持.js文件中写类似H5的标签语法</p><blockquote><ul><li>大写字母开头，一般都是JSX语法定义的自定义组件</li><li>小写字母开头，一般是H5标签</li></ul></blockquote></li><li><p>jsx语法规定：外层必须要有一个div包裹内部的平级标签</p><blockquote><p>当然可以引入react中的<code>Fragment</code> 来代替外层div标签</p><pre class="line-numbers language-none"><code class="language-none">import React, { Component, Fragment } from 'react';//render return内部就可以&lt;Fragment&gt;....&lt;/Fragment&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h3 id="TodoList"><a href="#TodoList" class="headerlink" title="TodoList"></a>TodoList</h3><ol><li><p>如何实现组件化开发？</p></li><li><p>如何实现向子组件传递参数？</p></li><li><p>如何反馈父组件/调用父组件的函数？</p></li><li><p>如何理清函数的this指向问题？</p><blockquote><ul><li>箭头函数this指向，箭头函数定义的作用于下</li><li>不同函数的this指向，函数由那个对象调用</li></ul></blockquote></li><li><p>如何解决map，list中key的添加？</p></li><li><p>react中特殊属性？</p><blockquote><ol><li>label标签中<code>for id</code>的使用区别</li></ol><ul><li>由于for关键词的冲突，改用<code>htmlFor="..."</code></li><li>对应input标签，仍然是<code>id="...."</code></li></ul><ol start="2"><li>防止转义的属性</li></ol><ul><li><code>dangerouslySetInnerHTML={{__html: item}}</code></li><li>item内容中的html标签内容非自动转义</li></ul></blockquote></li><li><p>如何优化代码结构？</p><blockquote><ul><li>结构化赋值<code>{content}=this.props</code>等价于<code>{this.props.content}</code></li><li>样式文件引入放在后面</li><li>组件初始化的时候就将函数<code>this</code> 指向改好</li><li>JSX体积过大，尽量拆分代码，用函数替换</li><li><code>this.setState</code> 改变状态时，使用<code>prevState</code>代替<code>this.state</code>;使用箭头函数的写法（加括号，简写return；不加括号写函数体）</li><li>使用列表时，注意key值（唯一性），（放在最外层）</li></ul></blockquote></li></ol><h3 id="react的思考"><a href="#react的思考" class="headerlink" title="react的思考"></a>react的思考</h3><ol><li>声明式开发</li><li>可以和其他框架并存</li><li>组件化</li><li>单向数据流</li><li>视图层框架</li><li>函数式编程</li></ol><h2 id="高级部分"><a href="#高级部分" class="headerlink" title="高级部分"></a>高级部分</h2><h3 id="PropTypes与DefaultProps"><a href="#PropTypes与DefaultProps" class="headerlink" title="PropTypes与DefaultProps"></a>PropTypes与DefaultProps</h3><ul><li>做组件接受属性时的强校验</li></ul><ol><li><p>引入PropTypes</p><pre class="line-numbers language-none"><code class="language-none">import PropTypes from 'prop-types'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对属性进行强校验</p><pre class="line-numbers language-none"><code class="language-none">//PropTypes可以限制传值的类型//限制对象中没有对应属性时，就不会校验也不会报错TodoItem.propTypes = {content: PropTypes.string,deleteItem: PropTypes.func,index: PropTypes.number}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>强制传值</p><pre class="line-numbers language-none"><code class="language-none">// isRequired强制传值，如果没有就会报错test: PropTypes.string.isRequired,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>默认值</p><pre class="line-numbers language-none"><code class="language-none">// defalultProps 设置传值属性的默认值TodoItem.defaultProps = {test: 'hello world',}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>其他用法</li></ul><ol><li><p>PropTypes/.oneOfType([ ])</p><pre class="line-numbers language-none"><code class="language-none">//一个对象可以是几种类型中的任意一种optionalUnion: PropTypes.oneOfType([PropsTypes.string,PropsTypes.number,PropsTypes.instanceof(Message),])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>PropTypes.element</p><pre class="line-numbers language-none"><code class="language-none">// 确保传递给组件的children只包含一个元素MyComponent.propTypes = {  children: PropTypes.element.isRequired};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>PropTypes.arrayOf(PropTypes.number)</p><pre class="line-numbers language-none"><code class="language-none">// 指定一个数组由某种类型的元素组成optionalArrayOf: PropTypes.arrayOf(PropTypes.number),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="props-state-render之间的关系"><a href="#props-state-render之间的关系" class="headerlink" title="props,state,render之间的关系"></a>props,state,render之间的关系</h3><ul><li>当组件state和props发生变化时，render函数就会被重新执行</li><li>当父组件的render函数被执行时，子组件的render也会被重新执行</li></ul><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><ul><li><p>一般的生成修改DOM的流程</p><blockquote><ol><li>state数据</li><li>JSX模板</li><li>数据 + 模板 生成真实的DOM，并显示出来</li><li>state发生变化</li><li>数据 + 模板 生成新的DOM替换原始的DOM</li></ol></blockquote></li></ul><p>缺陷：生成了两次DOM，替换了一次DOM十分耗性能</p><ul><li><p>改进方案</p><blockquote><ol><li>state数据</li><li>JSX模板</li><li>数据 + 模板 生成真实的DOM，并显示出来</li><li>state发生变化</li><li>数据 + 模板 生成新的DOM，不直接替换，而是和原始的比对，找差异</li><li>找到对应的差异部分，用新的DOM差异部分替换</li></ol></blockquote></li></ul><p>缺点：性能提升不明显</p><ul><li><p><strong>虚拟DOM</strong></p><blockquote><ol><li><p>state数据</p></li><li><p>JSX模板</p></li><li><p>生成虚拟DOM（虚拟DOM就是一个<strong>JS对象</strong>）</p></li><li><p>数据 + 模板 生成真实的DOM，并显示出来</p><p>eg:<code>['div', {id: 'abc'}, ['span', {}, 'hello world']]</code></p></li><li><p>state发生改变</p></li><li><p>数据 + 模板 生成新的虚拟DOM（<strong>极大性能的 提升</strong>）</p><p>eg:<code>['div', {id: 'abc'}, ['span', {}, 'hello minyue']]</code></p></li><li><p>比较原始虚拟DOM和新生成的虚拟DOM，找到区别（<strong>极大提升性能</strong>）</p></li><li><p>直接操作DOM,改变对应不同点</p></li></ol></blockquote></li><li><p><strong>JSX代码转换为真实DOM的历程</strong></p></li></ul><pre class="line-numbers language-none"><code class="language-none">JSX -&gt; createElement -&gt; 虚拟DOM（JS对象） -&gt; 渲染为真实DOM// 下面两种写法等价return &lt;div&gt; {index} &lt;/div&gt;return React.createElement('div', {}, 'index');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>虚拟DOM的优点</strong></p><blockquote><ol><li>性能提升了</li><li>跨段应用得以实现，React Native（虚拟DOM可以被转换为原生的组件，在移动端使用）</li></ol></blockquote></li><li><p>虚拟DOM是如何比对的呢—<strong>diff算法</strong></p><blockquote><ol><li>从头开始，同级比对</li></ol><ul><li>如果某一级的内容出现差异，就直接替换下面所有内容</li></ul><ol start="2"><li>key值的重要性</li></ol><ul><li>虚拟DOM比对时，对列表数据就可以只比较数据的 key值是否对应相等，提升比对性能</li></ul><ol start="3"><li>补充</li></ol><ul><li>setState方法的异步设定的意义也在于，减少虚拟DOM比对的频繁性，提升性能</li></ul></blockquote></li></ul><h3 id="ref使用"><a href="#ref使用" class="headerlink" title="ref使用"></a>ref使用</h3><p>在input组件中<code>onChange</code> 属性调用的<code>handleInputChange(e)</code>输入参数使用<code>e.target</code> 就能获取对应inputDOM元素</p><ul><li>在react中是怎么获取DOM元素的呢？</li></ul><p>没错就是使用<code>ref</code> </p><pre class="line-numbers language-none"><code class="language-none">// 在input框架中添加属性refref={(input) =&gt; {this.input = input}// 之后我们就可以在handleInputChange函数中this.input.value//代替原来的e.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用注意点</strong></li></ul><p>在ref使用时会和setState函数产生矛盾，因为setState函数是异步的，所以就有可能获取到的DOM元素是状态还没有改变前的内容，那么有什么解决办法呢？</p><pre class="line-numbers language-none"><code class="language-none">// 使用异步函数setState的回调函数，来获取DOM// 回调函数中，确保setState已经执行this.setState((prevState) =&gt; ({list: [...prevState, prevState.inputValue],inputValue: ''}), () =&gt; {console.log(this.ul.querySelectorAll('div').length);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然，React面向数据的操作，建议我们少直接操作DOM！！</li></ul><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ul><li><p>生命周期函数是指，某一时刻组件会自动调用执行的函数</p><blockquote><p>render  当数据发生变化时，会自动执行</p><p>constructor 初始化时自动执行的函数</p></blockquote></li></ul><img data-src="/2020/10/24/react-shi-jian-ru-men/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0.png" class="" title="生命周期函数"><p><strong>分模块解释</strong></p><blockquote><ol><li>Initialization 初始化</li></ol><ul><li>constructor中的props和state</li></ul><ol start="2"><li>Mounting 挂载</li></ol><ul><li>componentWillMount </li><li>render 页面第一次挂载</li><li>componentDidMount</li></ul><ol start="3"><li>Updation 更新</li></ol><ul><li><p>props</p><ul><li>componentWillReceiveProps（对子组件有用）<ol><li>子组件接受父组件的props </li><li>组件非第一次存在父组件，才会执行</li></ol></li><li>shouldComponentUpdate（是否更新）<ol><li>需要返回一个布尔值</li><li>true才会执行后面的步骤</li></ol></li><li>componentWillUpdate（编译前执行）</li><li>render</li><li>componentDidUpdate（编译后执行）</li></ul></li><li><p>states  没有第一步</p></li><li><p>每一个组件都有自己的生命周期函数！！</p></li></ul></blockquote><h3 id="生命周期函数使用场景"><a href="#生命周期函数使用场景" class="headerlink" title="生命周期函数使用场景"></a>生命周期函数使用场景</h3><ul><li>render不可缺少<ul><li>由于组件都是继承于<code>Component</code> ，其中都内置了其余的生命周期函数，但唯一没有<code>render</code></li></ul></li></ul><h4 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h4><blockquote><p>之前我们需要的提升性能的点：</p><ol><li>函数作用域绑定在constructor中完成</li><li>列表key值的绑定，diff算法</li><li>setState异步函数</li></ol></blockquote><ul><li><p><strong>shouldComponentUpdate使用</strong></p><ul><li>我们都知道，父组件render函数改变时，会连带子组件的render函数也重新渲染，但是当我们没有提交改变内容时，我们不需要子组件渲染，如何解决？</li><li>使用这个生命周期函数，停止渲染</li></ul><pre class="line-numbers language-none"><code class="language-none">shouldComponentUpdate(nextProps, nextState) {if(nextProps.content !== this.props.content) {return true;} else {return false;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h4><blockquote><p>在网页不重载的情况下，改变网页内容，ajax请求只用一次，获取到数据留用就行了，所以找一个有且执行一次的生命周期函数</p><ul><li>componentWillMount，constructor等有些些不便的原因（其他端产生冲突）</li></ul></blockquote><ol><li>首先，在react中发送ajax请求需要安装第三方插件</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install axios//安装之后重新打开项目npm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在页面中引入axios组件</li></ol><pre class="line-numbers language-none"><code class="language-none">import axios from "axios";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>**componentDidMount()**中添加请求</li></ol><pre class="line-numbers language-none"><code class="language-none">componentDidMount() {axios.get('/api/todolist').then(()=&gt;alert('success')).catch(()=&gt;alert('error'));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显然没有这个接口，返回弹窗error，在network中可以看到确实发送了请求，返回<code>404</code></li></ul><h3 id="使用fiddler实现本地数据mock"><a href="#使用fiddler实现本地数据mock" class="headerlink" title="使用fiddler实现本地数据mock"></a>使用fiddler实现本地数据mock</h3><ul><li>前后端分离的开发，让前端人员要自己模拟后端数据，这里我们使用fiddler工具</li></ul><blockquote><ul><li><p>新建一个.json文件，放入数据</p></li><li><p>刷新react项目页面，可以找到请求的链接</p></li><li><p>双击该请求，在右方详情页中选择AutoResponder,然后勾选前两个复选框Enable rules和Unmatched requests passthrough,点击Add Rule，在Rule Editor的第二个input框中复制本地文件链接，点击save，勾选下方的If request中新建的rule</p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">//简单的使用：将数据默认显示在list中componentDidMount() {axios.get("/api/todolist").then((res)=&gt;{this.setState(()=&gt;({list:[...res.list]}));}).catch(()=&gt;alert("error"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img data-src="/2020/10/24/react-shi-jian-ru-men/fiddler.png" class="" title="fiddler"><h3 id="React实现CSS过渡效果"><a href="#React实现CSS过渡效果" class="headerlink" title="React实现CSS过渡效果"></a>React实现CSS过渡效果</h3><ul><li><p>这里过渡效果以交替呈现的示例就引入<code>.css</code> 文件</p><blockquote><p>写入两个类一个描述透明度<code>.show,</code>一个描述<code>.hide</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.show</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hide</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>在<code>js</code>文件中</p><blockquote><ol><li>state中创建一个布尔变量属性</li><li>按钮，对state的布尔值改变</li><li>对应className就根据state变量改变样式类</li></ol></blockquote></li></ul><h3 id="React使用CSS动画效果"><a href="#React使用CSS动画效果" class="headerlink" title="React使用CSS动画效果"></a>React使用CSS动画效果</h3><ul><li>动画效果就是引入动画模块<code>@keyframes</code>，<code>animation</code>属性</li><li><strong>值得注意的地方</strong>：加上<code>forwards</code>(保留最后一帧动画效果)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.show</span> <span class="token punctuation">{</span>  <span class="token property">animation</span><span class="token punctuation">:</span> show-item 2s ease-in forwards<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hide</span> <span class="token punctuation">{</span>  <span class="token property">animation</span><span class="token punctuation">:</span> hide-item 2s ease-in forwards<span class="token punctuation">;</span><span class="token punctuation">}</span>//show-item 同下//....<span class="token atrule"><span class="token rule">@keyframes</span> hide-item</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用React-transition-group"><a href="#使用React-transition-group" class="headerlink" title="使用React-transition-group"></a>使用React-transition-group</h3><ul><li>进入github，搜索<a href="https://reactcommunity.org/react-transition-group/">React-transition-group</a></li></ul><ol><li><p>安装这个模块</p><pre class="line-numbers language-none"><code class="language-none">npm install react-transition-group --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引入这个模块</p><pre class="line-numbers language-none"><code class="language-none">import { CSSTransition } from 'react-transition-group';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用<code>&lt;CSSTransition&gt; &lt;/CSSTransition&gt;</code>包裹需要样式的”html元素”</p><ul><li><p>他帮助我们完成样式的更改添加</p></li><li><p>注意他的属性！！！</p><blockquote><ul><li> in={this.state.show}: 动画执行的标志</li><li> timeout={1000}：动画执行时长</li><li>classNames=”fade”：类名前缀</li><li>unmountOnExit：exit后动画元素删除</li><li>appear={true}： 首次渲染时也添加动画</li></ul></blockquote></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;CSSTransitionin={this.state.show}timeout={1000}  classNames="fade"  unmountOnExit  appear={true}&gt;&lt;div&gt;hello&lt;/div&gt;&lt;/CSSTransition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//对应CSS文件//存在enter和exit就可以了//如果appear=</span><span class="token punctuation">{</span>true<span class="token punctuation">}</span><span class="token selector">，就加上.fade-appear等类.fade-enter,.fade-appear</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-active,.fade-appear-active</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 1s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-done,.fade-appear-done</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-exit</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-exit-active</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 1s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-exit-done</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>另外，一些<strong>钩子函数</strong></p><blockquote><p><strong>也是添加在属性中</strong></p><p>钩子：和生命周期函数一样的，特定时间发生！！</p><ol><li>onEnter</li></ol><ul><li>进入的第一时刻</li></ul><ol start="2"><li>onEntering</li></ol><ul><li>进入的动画时间</li></ul><ol start="3"><li>onEntered</li></ol><ul><li>进入结束时</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;//进入结束后出发的函数&gt;onEntered={(er)=&gt;{el.style.color='blue'}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同样对于exit</li></ul></blockquote></li></ul><ol start="4"><li><strong>TransitionGroup</strong></li></ol><ul><li><p>对于一组一组的添加动画效果时，需要配合<code>TransitionGroup</code> 使用</p><blockquote><ul><li>下面以点击按钮，添加item的一组效果</li></ul><ol><li>这里就要把show改为list</li><li>点击按钮，函数操作改为在原有list末尾添加一个元素</li><li>样式部分<code>&lt;TransitionGroup&gt;</code>放在list遍历外部，<code>&lt;CSSTransition&gt;</code>放在对应小组件的外层</li></ol></blockquote></li></ul><img data-src="/2020/10/24/react-shi-jian-ru-men/TransitionGroup.png" class="" title="TransitionGroup"> <h2 id="Redux入门"><a href="#Redux入门" class="headerlink" title="Redux入门"></a>Redux入门</h2><ul><li>和react配套使用的数据层框架</li><li>使用redux，我们将数据都存放在Store中，当一个组件改变了Stroe中的数据，其他组件就会自动感知数据的变化做出反应</li></ul><h3 id="Redux工作流"><a href="#Redux工作流" class="headerlink" title="Redux工作流"></a>Redux工作流</h3><img data-src="/2020/10/24/react-shi-jian-ru-men/Redux.png" class="" title="Redux"><ul><li>举例把这个流程理解成图书馆的流程</li></ul><ol><li>react component：借书的人</li><li>action creaters：询问管理员要借哪一本书</li><li>store：图书管理员</li><li>reducers：图书管理员的记录资料</li></ol><h3 id="Antd页面布局"><a href="#Antd页面布局" class="headerlink" title="Antd页面布局"></a>Antd页面布局</h3><ul><li><a href="https://ant.design/components/overview-cn/">官网地址</a></li></ul><ol><li><p>安装</p><pre class="line-numbers language-none"><code class="language-none">//使用npm$ npm install antd --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>简单使用</p><blockquote><ul><li><p>引用样式和你所需要的组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"antd/dist/antd.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>根据文档中的使用代码方法使用就可以了</p></li></ul></blockquote></li></ol><h3 id="redux中的store"><a href="#redux中的store" class="headerlink" title="redux中的store"></a>redux中的store</h3><ol><li>安装redux核心库</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install redux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>在项目src目录下创建store文件夹</p><ul><li>index.js(存储仓库，图书管理员)</li></ul><pre class="line-numbers language-none"><code class="language-none">//引入创建库的函数//引入reducerimport { createStore } from 'redux';import reducer from './reducer';const store = createStore(reducer);export default store;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reducter.js(图书记录本)</li></ul><pre class="line-numbers language-none"><code class="language-none">//返回一个函数//state:图书馆书籍信息,有一个默认值//action:一个个借书操作const defaultState = {inputValue = '',list: []}export default (state = defaultState, action) = {return state;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在容器组件中引入store</p><pre class="line-numbers language-none"><code class="language-none">//文件目录下的index.js文件可以默认不写import store from './store';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>引用数据 <code>getStore()</code></p><pre class="line-numbers language-none"><code class="language-none">//返回一个存有数据的对象this.state = store.getStore()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发送action <code>store.dispatch(action)</code></p><pre class="line-numbers language-none"><code class="language-none">//写一个实例函数handleInputChange(e) {const action = {type: 'change_input_value',value: e.target.value,}store.dispatch(action)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>reducer处理程序</p><pre class="line-numbers language-none"><code class="language-none">//reducer的函数中处理对应的action//reducer需要深拷贝state//store中的数据，由返回的newState在index.js中替换旧state时，才被修改if(action === 'change_input_value') {const newState = JSON.parse(JSON.stringify(state));newState.inputValue = action.value;return newState;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>容器组件中同步store数据的修改</p><pre class="line-numbers language-none"><code class="language-none">//constructor中监视store的改变store.subscribe(this.handleStore);//函数功能：替换statehandleStore() {this.setState(store.getStore());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><strong>其他功能类似</strong></li></ul><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><ol><li><p><strong>actionTypes.js</strong></p><ul><li>集中管理各个action名称（避免书写错误带来的麻烦）</li></ul><pre class="line-numbers language-none"><code class="language-none">//store目录下新建一个actionTpes.jsexport const CHANGE_INPUT_VALUE = 'change_input_value'.....//使用时，引入import { CHANGE_INPUT_VALUE } from 'src'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>actionCreater.js</strong></p><ul><li>集中管理action</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">//对每一个action对象，都进行这样的封装，返回一个对象export const getInputChangeAction = (value) =&gt; ({type: CHANGE_INPUT_VALUE,value});//使用时import { getInputChangeAction } from 'src';handleInputChange(e) {const action = getInputChangeAction(e.target.value);store.dispatch(action);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="redux总结"><a href="#redux总结" class="headerlink" title="redux总结"></a>redux总结</h3><ol><li><p>store是惟一的，也只有index.js中才能改变store中的数据</p></li><li><p>reducer是一个纯函数，（给定输入，一定有固定输出，而且不会产生副作用）</p></li><li><p>核心API</p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>createStore</td><td>index.js创建仓库</td></tr><tr><td>store.dispatch</td><td>传递action</td></tr><tr><td>store.getState</td><td>获取store数据对象</td></tr><tr><td>store.subscribe</td><td>捕捉store改变</td></tr></tbody></table></li></ol><h2 id="Redux进阶"><a href="#Redux进阶" class="headerlink" title="Redux进阶"></a>Redux进阶</h2><h3 id="UI组件-容器组件-无状态组件"><a href="#UI组件-容器组件-无状态组件" class="headerlink" title="UI组件/容器组件/无状态组件"></a>UI组件/容器组件/无状态组件</h3><ul><li>一个负责逻辑，一个负责渲染</li><li>无状态组件就是函数组件，性能更好</li></ul><blockquote><p>将渲染部分（render函数内部）独立出来一个分支</p><p><strong>TodoListUI.js</strong></p></blockquote><pre class="line-numbers language-react" data-language="react"><code class="language-react">//引入样式文件和react文件import { Input, Button, List } from "antd";import React from "react";//仅仅只负责渲染我们可以使用无状态组件（无需创建类）//箭头函数输入props，就使用props代替this.propsconst TodoListUI = (props) =&gt; {return (.....//JSX语法);};//对应render函数render() {return(&lt;TodoListUI       inputValue={this.state.inputValue}       list={this.state.list}       handleInputChange={this.handleInputChange}       handleClickBtn={this.handleClickBtn}       handleDeleteItem={this.handleDeleteItem}     /&gt;);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redux-thunk-中间件实现ajax请求"><a href="#redux-thunk-中间件实现ajax请求" class="headerlink" title="redux-thunk 中间件实现ajax请求"></a>redux-thunk 中间件实现ajax请求</h3><ul><li>之前我们使用ajax请求，是将代码放在componentDidMount函数中</li><li>但是当异步操作变多时，函数中的代码就会变得多到难以调试</li></ul><blockquote><p>我们引入这个中间件来时我们</p></blockquote><ol><li><p>首先下载这个中间件包</p><pre class="line-numbers language-none"><code class="language-none">npm install redux-thunk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解决和redux并行使用的问题</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//在github中 redux-devtools文档中//引入thunk包，compose等api//import { createStore, applyMiddleware, compose } from "redux";import thunk from "redux-thunk";const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})  : compose;const enhancer = composeEnhancers(applyMiddleware(thunk));const store = createStore(reducer, enhancer);export default store;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>actionCreater中实现异步函数调用</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//返回的getTodoList()是一个函数//并且这个函数接受了前面传来的dispatchexport const initListAction = (data) =&gt; ({  type: INIT_LIST_ACTION,  data,});export const getTodoList = () =&gt; {  return (dispatch) =&gt; {    axios.get("/api/todolist").then((res) =&gt; {      const data = res.data;      const action = initListAction(data);      dispatch(action);    });  };};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>componentDidMount</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//因为有redux-thunk存在，action可以是一个函数//在第5句中自动执行该函数（并且引入dispatch参数）componentDidMount() {  const action = getTodoList();  store.dispatch(action);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="redux-saga中间件异步操作"><a href="#redux-saga中间件异步操作" class="headerlink" title="redux-saga中间件异步操作"></a>redux-saga中间件异步操作</h3><ol><li><p>安装</p><pre class="line-numbers language-none"><code class="language-none">$ npm install redux-saga<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>store目录下新建一个<code>sagas.js</code></p><pre class="line-numbers language-none"><code class="language-none">function* mySaga() {  //...}export default mySaga;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>index.js文件中引入中间件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//和thunk很像，仿照官方文档import { createStore, applyMiddleware, compose } from "redux";import reducer from "./reducer";import createSagaMiddleware from "redux-saga";import mySaga from "./sagas";// create the saga middlewareconst sagaMiddleware = createSagaMiddleware();const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})  : compose;const enhancer = composeEnhancers(applyMiddleware(sagaMiddleware));const store = createStore(reducer, enhancer);sagaMiddleware.run(mySaga);export default store;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>componentDidMount</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//和原生用法类似const action = getInitList();store.dispatch(action);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>actionCreater</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">//创建对应的action对象//但注意这个action的处理程序不在reducer，而在sagas.js中export const getInitList = () =&gt; ({  type: GET_INIT_LIST,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>sagas.js文件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 参照官方文档import { takeEvery, put } from "redux-saga/effects";import { GET_INIT_LIST } from "./actionType";import axios from "axios";import { initListAction } from "./actionCreater";function* getInitList() {  try {    const res = yield axios.get("/api/todolist");    const action = initListAction(res.data);    yield put(action);  } catch (e) {    console.log("404");  }}//generator函数 书写形式//takeEvery可以捕获每一次的action类型//下面函数功能：一旦接受到GET_INIT_LIST类型的action时//就会执行fetchUser方法function* mySaga() {  yield takeEvery(GET_INIT_LIST, getInitList);}export default mySaga;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>将异步处理程序迁移到<code>sagas.js</code>文件中处理</li></ul><h3 id="redux中间件"><a href="#redux中间件" class="headerlink" title="redux中间件"></a>redux中间件</h3><ul><li>在action和store中间，对store的dispatch方法的升级</li><li>thunk中间件，action可以是一个函数 并接收一个dispath函数，dispatch会让其异步执行；当然如果不是函数就按原逻辑执行</li><li>redux-log：对dispatch每次派发的时候进行console.log()，即打印日志</li><li>redux-saga：单独对异步逻辑拆分出来放在一个文件管理</li></ul><img data-src="/2020/10/24/react-shi-jian-ru-men/redux%E4%B8%AD%E9%97%B4%E4%BB%B6.png" class="" title="redux中间件"> <blockquote><p><strong>流程分析</strong></p><ol><li><p>thunk 中间件</p><blockquote><p>dispatch一个action<br>action可以是一个函数 并接收一个dispath函数<br>可以在action的函数中进行异步操作<br>接受到数据后再dispatch一个action 此action必须是一个对象包含type和数据<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li><li><p>saga 中间件</p><blockquote><p>dispatch一个action<br>action只能是对象 并且type必须是reducer没有的<br>sagas.js拦截此type并执行另一个函数进行异步操作<br>接受到数据后再dispatch一个action 并且type必须是reducer存在的<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li><li><p>原生</p><blockquote><p>在componentDidMount生命周期函数里 执行异步操作 接受到数据后dispatch一个action<br>此action必须是一个对象包含type和数据<br>reducer拦截到action的type和数据返回新的state</p></blockquote></li></ol></blockquote><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><ol><li><p>安装</p><pre class="line-numbers language-none"><code class="language-none">npm install react-redux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>Provider</strong></p><ul><li>第一个核心API</li></ul><pre class="line-numbers language-none"><code class="language-none">  // 在index.js中引入  import { provider } from 'react-redux';  import store from './store';  ....    //provider将自己有的属性提供给内部所有组件  //将store引入内部的组件中  //注意，jsx语法块用括号包裹  const App = (&lt;Provider store={store}&gt;  &lt;TodoList /&gt;  &lt;/Provider&gt;  )  ReactDOM.render(App, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>connect</strong></p><ul><li>第二个核心API</li></ul><pre class="line-numbers language-none"><code class="language-none">//TodoList.js实现连接关系// (1)数据获取的连接const mapStateToProps = (state) =&gt; {return {inputValue: state.inputValue,}}// (2)改变数据方法的连接const mapDsipatchToProps = (dispatch) =&gt; {return {handleInputChange(e) {const action = {        type: "change_input_value",        value: e.target.value,      };      dispatch(action);}}}export default connect(mapStateToProps, mapDsipatchToProps)(TodoList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这样不管是读，还是写都可以直接通过</p><p><code>this.props.inputValue</code></p><p><code>this.props.handleInputChange</code></p><p>来调用</p></li></ul></li></ol><blockquote><p>我们可以发现 ，<todolist>组件就是一个UI组件，connect函数引用了UI组件，加上对store的调用相当于返回了一个容器组件</todolist></p></blockquote><ol start="4"><li><p>优化代码</p><blockquote><ol><li><p>actioncreater.js :</p><pre class="line-numbers language-none"><code class="language-none">export const ....一个个函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>actionTypes.js :</p><pre class="line-numbers language-none"><code class="language-none">export const 宏定义赋值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>UI组件用函数组件（无状态组件代替）</p></li><li><p>结构化赋值</p><pre class="line-numbers language-none"><code class="language-none">const {  inputValue,  handleInputChange,  handleClickBtn,  list,  handleDeleteItem,} = props;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React官方文档入门学习</title>
      <link href="2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/"/>
      <url>2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><ul><li>本文档为React官网，学习历程，完成第一个React项目–tic-tac-toe</li></ul><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>这里我们使用官方推荐的Create React App 来完成项目</li></ul><ol><li><p>在项目根目录下打开node （shift + 右键）</p></li><li><p>输入创建新项目指令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删掉<code>src/</code>下的所有文件，创建我们需要的<code>index.css</code>,<code>index,js</code></p></li><li><p>最后将下面三行代码写到<code>index.js</code> 文件的顶部</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>运行测试，执行<code>npm start</code>, 会自动弹出浏览器 <code>http://localhost:3000</code>.</li></ul><h2 id="项目概览"><a href="#项目概览" class="headerlink" title="项目概览"></a>项目概览</h2><ul><li>个人理解：React代码就是有很多层级的组件，通过props传递信息，render()函数返回实现一层一层UI界面和交互效果的。</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>组件：React的独立代码片段，就像封装的函数一样</li></ul><h4 id="函数组件-class组件"><a href="#函数组件-class组件" class="headerlink" title="函数组件/class组件"></a>函数组件/class组件</h4><ul><li>最简单的定义组件的方式就是函数组件</li></ul><pre class="line-numbers language-none"><code class="language-none">function Welcome(props) {    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用类来定义</li></ul><pre class="line-numbers language-none"><code class="language-none">class Welcome extends React.Component {    render() {        return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h4><ol><li><p>React元素：</p><blockquote><p>React元素包含DOM元素和自定义的组件</p><pre class="line-numbers language-none"><code class="language-none">const element = &lt;div /&gt;;const element2 = &lt;Welcome name="minyue" /&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>当React元素为自定义组件时，它会将JSX接受的属性（attributes），子组件（children）转换为单个对象传递给组件，这个对象就是“props”</li><li>组件名称一定要“大写字母开头”，<code>&lt;Welcome /&gt;</code>（小写将被认为是原生DOM）</li></ul></blockquote></li><li><p>渲染</p><blockquote><p>这里要使用到 <code>ReactDOM.render()</code> 函数</p><pre class="line-numbers language-none"><code class="language-none">ReactDOM.render(element,    document.getElementById('root'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这个函数就是将React元素element，替换了DOM页面元素实现页面上的渲染</li></ul></blockquote></li></ol><h4 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h4><ul><li>这是React非常重要的一种思想方法，将一个复杂的组件，拆分为多层次的组件</li></ul><p>看我们的 <code>井字棋项目</code> 先看静态，大体就是三个组件</p><blockquote><ol><li>Square: 渲染单独的 <code>&lt;button&gt;</code> </li><li>Board: 渲染9个方块</li><li>Game:  渲染含有默认值的键盘</li></ol><p>他们就是在总界面上面，拆分出来的各个组件部分</p></blockquote><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><ul><li><p>组件间的交互效果</p><blockquote><ol><li>父级到子级的信息传递<ul><li>通过props传递</li></ul></li><li>子级到父级的信息传递<ul><li>通过父级传递给子级的回调函数</li></ul></li><li>同级上的信息传递<ul><li>将信息存在父级，通过父级状态提升</li></ul></li></ol></blockquote></li></ul><h4 id="父–-gt-子"><a href="#父–-gt-子" class="headerlink" title="父–>子"></a>父–&gt;子</h4><ul><li>尝试将数据从Board组件传递到Square组件中（也就是将Board9个方格的数据，通过props传递到Square组件显示出来</li></ul><pre class="line-numbers language-none"><code class="language-none">// 改写Board组件的renderSquare方法，传递value到Square中class Board extends React.Component {    renderSquare(i) {        return &lt;Square value={i} /&gt;    }} //修改Square组件中的render函数接受传来的参数修改界面的值class Square extends React.Component {    render() {        return (            &lt;button className="square"&gt;                {this.props.value}            &lt;/button&gt;        );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>渲染后可以看到每个方格都有一个数组</li></ul><img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/%E4%BC%A0%E5%8F%82%E5%89%8D.png" class="" title="传参前"> <img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/%E4%BC%A0%E5%8F%82%E5%90%8E.png" class="" title="传参后"> <ul><li>React 应用中，数据通过 props 的传递，从父组件流向子组件。</li></ul><h4 id="平行通信"><a href="#平行通信" class="headerlink" title="平行通信"></a>平行通信</h4><ul><li><p>我们需要知道9个Square组件的状态，来判断游戏的胜负</p></li><li><p>这里就用到了多个组件相互通信—-状态提升</p><blockquote><p>状态提升：<strong>把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中</strong></p></blockquote></li></ul><pre class="line-numbers language-none"><code class="language-none">// 这里我们在Board组件初始化时设置9个空值数组class Board extends React.Component {    constructor(props) {        super(props);        this.state = {            squares: Array(9).fill(null),        };    }}handleClick(i) {    const squares = this.state.squares.slice();    squares[i] = 'X';    this.setState({squares: squares});}renderSquare(i) {    return (&lt;Square                value={this.state.squares[i]}                onclick={() =&gt; this.handleClick(i)}            /&gt;    );}render() {   //界面布局}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>上面父类向子类传递了一个回调函数<code>handleClick()</code>来返回信息</p></li><li><p><strong>注意：</strong><code>handleClick()</code>,不要改变原始数据，创建副本！！！</p><blockquote><p>好处：</p><ol><li>撤回，恢复功能很需要</li><li>不可变数据，容易跟踪变化</li><li>react中，不可变性帮助我们创建 <a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html#examples">pure components</a>。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。</li></ol></blockquote></li></ul><p>当数据提升到父类之后，子类就不需要构造函数（state）了，数据完全由<code>props</code>,<code>回调函数</code>这个双向通道进行传输</p><pre class="line-numbers language-none"><code class="language-none">class Square extends React.Component {    render() {        return (            &lt;button                className="square"                onClick={() =&gt; this.props.onClick()}                &gt;                {this.props.value}            &lt;/button&gt;         );    }}// 不包含state时 使用函数组件更加简单// 函数组件中 箭头函数简写// onClick={() =&gt; this.props.onClick()} 改成了更短的 onClick={props.onClick}function Square(props) {    return (&lt;button className="square" onClick={props.onClick}&gt;            {props.value}            &lt;/button&gt;    );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子–-gt-父"><a href="#子–-gt-父" class="headerlink" title="子–>父"></a>子–&gt;父</h4><ul><li>上面的回调函数</li></ul><h2 id="项目完善"><a href="#项目完善" class="headerlink" title="项目完善"></a>项目完善</h2><ul><li>到目前为止，我们的井字棋程序，超需要加入<code>轮流落子</code>，<code>历史记录回溯</code></li></ul><h4 id="轮流落子"><a href="#轮流落子" class="headerlink" title="轮流落子"></a>轮流落子</h4><ul><li>添加<code>xIsNext: true</code>属性</li></ul><h4 id="判断胜出者"><a href="#判断胜出者" class="headerlink" title="判断胜出者"></a>判断胜出者</h4><ul><li><p>添加<code>status</code>属性，<code>calculateWinner()</code></p></li><li><p>功能分析：当点击<code>Square</code>时，触发回调函数<code>handleClick(i)</code></p><blockquote><ol><li>是否有玩家胜出？</li><li>是否当前空格已经填过？</li><li>其他情况正常翻转改变！</li></ol><pre class="line-numbers language-none"><code class="language-none">// 在初始化state中添加 xIsNext 属性，true代表X，flase代表O handleClick(i) {    const squares = this.state.squares.slice();    if(calculateWinner(squares) || squares[i]) {        return;    }    squares[i] = this.state.xIsNext ? 'X' : 'O';    this.setState({        squares: squares,        xIsNext: !this.xIsNext,    });}render() {    const winner = calculateWinner(this.state.squares);    let status;    if (winner) {        status = 'winner:' + winner;    } else {        status = 'Next Player:' + (this.state.xIsNext ? 'X' : 'O');    }}return (const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    return (      &lt;div&gt;        &lt;div className="status"&gt;{status}&lt;/div&gt;        &lt;div className="board-row"&gt;          {this.renderSquare(0)}          {this.renderSquare(1)}          {this.renderSquare(2)}        &lt;/div&gt;        &lt;div className="board-row"&gt;          {this.renderSquare(3)}          {this.renderSquare(4)}          {this.renderSquare(5)}        &lt;/div&gt;        &lt;div className="board-row"&gt;          {this.renderSquare(6)}          {this.renderSquare(7)}          {this.renderSquare(8)}        &lt;/div&gt;      &lt;/div&gt;    );  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将计算函数放在组件外面</li></ul><pre class="line-numbers language-none"><code class="language-none">function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i &lt; lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {      return squares[a];    }  }  return null;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h4 id="事件旅行"><a href="#事件旅行" class="headerlink" title="事件旅行"></a>事件旅行</h4><ul><li>不可变对象的优势就体现出来了，我们将历史的<code>squares</code>数组保存在<code>history</code>数组中</li></ul><pre class="line-numbers language-none"><code class="language-none">history = [  // 第一步之前  {    squares: [      null, null, null,      null, null, null,      null, null, null,    ]  },  // 第一步之后  {    squares: [      null, null, null,      null, 'X', null,      null, null, null,    ]  },  // 第二步之后  {    squares: [      null, null, null,      null, 'X', null,      null, null, 'O',    ]  },  // ...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>考虑，我们应该把<code>history</code>放在哪个组件中</p><p>——-保存在顶层组件Game中</p></li></ul><h5 id="再次提升状态！！！"><a href="#再次提升状态！！！" class="headerlink" title="再次提升状态！！！"></a><strong>再次提升状态！！！</strong></h5><blockquote><p>将数据提升到Game中，删除Board 组件中的 state，Game 组件就拥有了对 Board 组件数据的完全控制权（当前和过去）</p></blockquote><ul><li>Game组件初始化</li></ul><pre class="line-numbers language-none"><code class="language-none">class Game extends React.Component {    constructor(props) {        super(props);        this.state = {            history: [{                squares: Array(9).fill(null),            }],            xIsNext: true,        };    }    render() {        return (        &lt;div className="game"&gt;            &lt;div className="game-board"&gt;                &lt;Board /&gt;                &lt;/div&gt;                &lt;div className="game-info"&gt;                &lt;div&gt;{/* status */}&lt;/div&gt;                    &lt;ol&gt;{/* TODO */}&lt;/ol&gt;                &lt;/div&gt;            &lt;/div&gt;                );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>修改<code>board</code>组件</p><blockquote><ol><li><p>删除构造函数constructor()</p></li><li><p>执行函数handleClick()提升到Game组件</p><blockquote><p><code>this.handleClick(i)</code> 替换为 <code>this.props.onClick(i)</code></p></blockquote></li><li><p>将所有的<code>state</code>，换成<code>props</code></p></li></ol></blockquote></li></ul><pre class="line-numbers language-none"><code class="language-none">renderSquare(i) {    return (        &lt;Square            value={this.props.squares[i]}            onClick={() =&gt; this.props.onClick(i)}            /&gt;    );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改<code>handleClick(i)</code></li></ul><pre class="line-numbers language-none"><code class="language-none">// 需要把新的历史记录拼接到 history 上// 使用concat()完成数组拼接  不改变原数组！！handleClick(i) {    const history = this.state.history;    const current = history[history.length - 1];    const squares = current.squares.slice();    if (calculateWinner(squares) || squares[i]) {      return;    }    squares[i] = this.state.xIsNext ? 'X' : 'O';    this.setState({        history: history.concat([{            squares: squares,        }]),        xIsNext: !this.state.xIsNext,    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>render函数更改</li></ul><pre class="line-numbers language-none"><code class="language-none">// Board组件中的render 渲染状态的提升到Game中render() {    const history = this.state.history;    const current = history[history.length - 1];    const winner = calculateWinner(current.squares);    let status;    if (winner) {        status = 'Winner: ' + winner;    } else {        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    }    return (        &lt;div className="game"&gt;            &lt;div className="game-board"&gt;                &lt;Board                    squares={current.squares}                    onClick={(i) =&gt; this.handleClick(i)}                    /&gt;            &lt;/div&gt;            &lt;div className="game-info"&gt;                &lt;div&gt;{status}&lt;/div&gt;                &lt;ol&gt;{/* TODO */}&lt;/ol&gt;            &lt;/div&gt;        &lt;/div&gt;    );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="展示历史记录"><a href="#展示历史记录" class="headerlink" title="展示历史记录"></a><strong>展示历史记录</strong></h5><ul><li><p>使用<code>map</code>方法，把历史记录映射为代表按钮的React元素</p><blockquote><p>Game组件，<code>render</code>方法中调用<code>history</code> 的 <code>map方法</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">// map方法返回moves（按钮数组），其中参数(step,move-&gt; 当前元素，编号)render() {    const history = this.state.history;    const current = history[history.length - 1];    const winner = calculateWinner(current.squares);    const moves = history.map((step, move) =&gt; {        const desc = move ?              'Go to move #' + move :        'Go to game start';        return (            &lt;li&gt;                &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt;            &lt;/li&gt;        );    });    let status;    if (winner) {        status = 'Winner: ' + winner;    } else {        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    }    return (        &lt;div className="game"&gt;            &lt;div className="game-board"&gt;                &lt;Board                    squares={current.squares}                    onClick={(i) =&gt; this.handleClick(i)}                    /&gt;            &lt;/div&gt;            &lt;div className="game-info"&gt;                &lt;div&gt;{status}&lt;/div&gt;                &lt;ol&gt;{moves}&lt;/ol&gt;            &lt;/div&gt;        &lt;/div&gt;    );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用map时，值得注意的<code>key</code></p><blockquote><p>列表需要一个 key 属性，区分不同的列表项</p><ul><li><p><code>key</code> 是 React 中一个特殊的保留属性（还有一个是 <code>ref</code>，拥有更高级的特性）。当 React 元素被创建出来的时候，React 会提取出 <code>key</code> 属性，然后把 key 直接存储在返回的元素上。虽然 <code>key</code> 看起来好像是 <code>props</code> 中的一个，但是你不能通过 <code>this.props.key</code> 来获取 <code>key</code>。React 会通过 <code>key</code> 来自动判断哪些组件需要更新。组件是不能访问到它的 <code>key</code> 的。</p></li><li><p><strong>强烈推荐，每次只要你构建动态列表的时候，都要指定一个合适的 key</strong></p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">//历史步骤不需要重新排序、新增、删除，所以使用步骤的索引作为 key 是安全的const moves = history.map((step, move) =&gt; {    const desc = move ?          'Go to move #' + move :    'Go to game start';    return (        &lt;li key={move}&gt;            &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt;        &lt;/li&gt;    );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置 <code>jumpTo</code> 方法</p><blockquote><ol><li>Game 的构造函数 <code>constructor</code> 中向初始 state 中添加 <code>stepNumber: 0</code><ul><li>表示当前查看哪一步历史记录，默认初始0</li></ul></li><li>当状态 <code>stepNumber</code> 是偶数时，我们还要把 <code>xIsNext</code> 设为 true：</li></ol></blockquote></li></ul><pre class="line-numbers language-none"><code class="language-none">jumpTo(step) {    this.setState({        stepNumber: step,        xIsNext: (step % 2) === 0,    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>handleClick</code> 方法</p><blockquote><ol><li><p>读取 <code>this.state.history</code> 换成了读取 <code>this.state.history.slice(0, this.state.stepNumber + 1)</code></p><blockquote><p>保证回溯时，更新未来的数据</p></blockquote></li><li><p><code>this.setState</code> 并传入参数 <code>stepNumber: history.length</code>，以更新 <code>stepNumber</code>。</p></li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">handleClick(i) {    const history = this.state.history.slice(0, this.state.stepNumber + 1);    const current = history[history.length - 1];    const squares = current.squares.slice();    if (calculateWinner(squares) || squares[i]) {        return;    }    squares[i] = this.state.xIsNext ? 'X' : 'O';    this.setState({        history: history.concat([{            squares: squares        }]),        stepNumber: history.length,        xIsNext: !this.state.xIsNext,    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后修改render方法</p></li></ul><pre class="line-numbers language-none"><code class="language-none">render() {    const history = this.state.history;    const current = history[this.state.stepNumber];    const winner = calculateWinner(current.squares);    // 其他部分没有改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目拓展"><a href="#项目拓展" class="headerlink" title="项目拓展"></a>项目拓展</h2><ol><li><p>在游戏记录列表中显示每一步棋的坐标（列号，行号）</p><blockquote><ul><li><p>这里玩的思路就是对history数组调用map函数，每次改变的时候循环遍历渲染一遍列表按钮。</p></li><li><p>将9个位置的坐标，用数组的形式存储起来（比较像二维数组）</p></li><li><p>在game组件中新增一个clickNum数组存储每一步的按钮值，也就是利用这个按钮值对应每一个坐标数组的索引</p></li><li><p>最后将数组转换为坐标形式展示出来</p></li></ul></blockquote></li><li><p>历史记录中加粗显示当前选择的项目</p><blockquote><p>这个只需要一个判断：</p><ul><li>在渲染坐标后，当渲染到当前按钮时，就添加一个css类样式就行</li></ul></blockquote></li><li><p>使用两个循环来渲染格子，而不是代码写死</p><blockquote><p>两层for循环：</p><ul><li>外层行</li><li>内层列</li><li>每次将内层渲染的三个squares数组push到预定义的outerDiv数组中</li><li>注意，因为是遍历动态添加的列表，所以添加的button都要加key值</li></ul></blockquote></li><li><p>添加一个可以升序或者降序的按钮</p><blockquote><p>简单的设定一个state变量desc，构造一个点击事件就行了</p><ul><li>只是倒序列表需要加属性<code>reversed</code></li></ul></blockquote></li><li><p>当有人获胜时，高亮显示3点一线</p><blockquote><ul><li>在state中设定了两个属性winner，winNum分别存放获胜者是谁，获胜者的棋子位置</li></ul><p>在square组件中设定，获取对应winNum（存储着获胜者的棋子位置），对对应位置的按钮添加css类样式</p></blockquote></li><li><p>当无人获胜，显示平局信息</p><blockquote><p>声明一个变量，由calculateWinner函数返回的winResult做判断，如果winResult非null则输出获胜者，如果null并且步数小于8输出下一步的棋手，如果等于9输出平局</p></blockquote></li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/%E5%88%9D%E5%A7%8B.png" class="" title="初始"> <img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/X%E8%83%9C%E5%88%A9.png" class="" title="X胜利"> <img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/%E5%80%92%E5%BA%8F.png" class="" title="倒序"> <img data-src="/2020/10/19/react-guan-fang-wen-dang-ru-men-xue-xi/%E5%B9%B3%E5%B1%80.png" class="" title="平局"> <p><strong>完整代码：</strong><a href="https://github.com/minyue-hcm/my_work/tree/master/tic_tac_toe">github链接</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象属性配置</title>
      <link href="2020/10/14/dui-xiang-shu-xing-pei-zhi/"/>
      <url>2020/10/14/dui-xiang-shu-xing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><ul><li>我们知道js对象中可以存储属性和方法，对于存储的属性不只是”键值对”，对象属性实际上还有更加灵活强大的东西</li><li>下面我们来看一下对象属性到底还有声明nb功能呢？</li></ul><a id="more"></a><h2 id="属性的分类"><a href="#属性的分类" class="headerlink" title="属性的分类"></a>属性的分类</h2><ul><li>对象属性有两种类别</li></ul><ol><li><strong>数据属性</strong>：键值对形式</li><li><strong>访问器属性</strong>：用于获取和设置值的函数</li></ol><h2 id="属性标志和属性描述符"><a href="#属性标志和属性描述符" class="headerlink" title="属性标志和属性描述符"></a>属性标志和属性描述符</h2><ul><li><p>对象属性，除了**<code>value</code>** 外，还有三个特殊的特性（attributes）</p><blockquote><ul><li><strong><code>writable</code></strong> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的。</li><li><strong><code>enumerable</code></strong> — 如果为 <code>true</code>，则会被在循环中列出，否则不会被列出。</li><li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此特性可以被删除，这些属性也可以被修改，否则不可以。</li></ul></blockquote></li><li><p>我们使用“常用的方式”创建的属性都是<code>true</code></p></li></ul><h4 id="如何获取这些标识-特性？"><a href="#如何获取这些标识-特性？" class="headerlink" title="如何获取这些标识/特性？"></a>如何获取这些标识/特性？</h4><ul><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">Object.getOwnPropertyDescriptor</a> 方法允许查询有关属性的 <strong>完整</strong> 信息。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);</span><span class="token comment">//obj : 需要获取信息的对象</span><span class="token comment">//propertyName: 属性的名称</span><span class="token comment">//返回值: 所谓的“属性描述符对象“ 包含值和所有标志</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 属性描述符：{  "value": "John",  "writable": true,  "enumerable": true,  "configurable": true}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何修改这些标志呢？"><a href="#如何修改这些标志呢？" class="headerlink" title="如何修改这些标志呢？"></a>如何修改这些标志呢？</h4><ul><li>可以使用 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Object.defineProperty(obj, propertyName, descriptor)</span><span class="token comment">// obj, propertyName: 对象及其属性</span><span class="token comment">// descriptor: 应用的属性描述符"对象"</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  value<span class="token operator">:</span> <span class="token string">"John"</span><span class="token comment">//没有对应属性就新建一个对应属性</span>  <span class="token comment">//其他属性不写默认 false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*{  "value": "John",  "writable": false,  "enumerable": false,  "configurable": false} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>补充：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a></li></ul><h4 id="属性描述符的功能"><a href="#属性描述符的功能" class="headerlink" title="属性描述符的功能"></a>属性描述符的功能</h4><h5 id="1-只读writable"><a href="#1-只读writable" class="headerlink" title="1.只读writable"></a>1.只读writable</h5><ul><li>将<code>writable</code> 谁行标志设置为<code>false</code> ，就将对应属性设置为只读属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"minyue"</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//minyue</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hcm"</span><span class="token punctuation">;</span><span class="token comment">//在严格模式下就会出错，非严格模式忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于一个新属性，我们需要明确列出那些<code>true</code>,未列出的默认<code>false</code></li><li>对于一个常规定义的属性，默认都是<code>true</code>,改什么就变什么</li></ul><h5 id="2-不可枚举enumerable"><a href="#2-不可枚举enumerable" class="headerlink" title="2.不可枚举enumerable"></a>2.不可枚举enumerable</h5><ul><li><p>对象的枚举，我们通过<code>for  in</code>语句，是否能枚举对应的<strong>键</strong></p><blockquote><p>通常情况下，对象内置的<code>toString</code> 是不可枚举的，当我们在对象中，创建的属性或者方法，也不想被枚举出就可以设置<code>enumerable:false</code></p></blockquote></li><li><p>同样不可枚举的属性也会被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"> object.keys(obj) </a> (返回键的数组）</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"minyue"</span><span class="token punctuation">,</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name</span><span class="token function">alert</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-不可配置"><a href="#3-不可配置" class="headerlink" title="3.不可配置"></a>3.不可配置</h5><ul><li>不可配置<code>configurable:false</code> 有时会预设在内建对象和属性中</li><li>不可配置的属性思想：防止更改属性标志或删除属性标志</li><li>特殊点：不可配置的可写属性是可以修改属性的值的！！！</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例如：Math.PI 只读，不可枚举，不可配置</span><span class="token keyword">let</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token string">'PI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*{  "value": 3.141592653589793,  "writable": false,  "enumerable": false,  "configurable": false}*/</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="批量获取-修改属性标志符"><a href="#批量获取-修改属性标志符" class="headerlink" title="批量获取/修改属性标志符"></a>批量获取/修改属性标志符</h4><ul><li><h5 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h5></li><li><h5 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h5></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  surname<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">"Smith"</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//克隆对象:首选方法，不只是值，还有属性描述符等</span><span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展：学到这里，我们知道，属性描述符都是单一属性级别上的工作，要想限制访问整个对象，<a href="https://zh.javascript.info/property-descriptors#she-ding-yi-ge-quan-ju-de-mi-feng-dui-xiang">参考</a></p><h2 id="属性的getter和setter"><a href="#属性的getter和setter" class="headerlink" title="属性的getter和setter"></a>属性的getter和setter</h2><h4 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h4><ul><li>看完<strong>数据属性</strong>，下面我们来看一下<strong>访问器属性</strong></li><li>访问器属性：本质上是用于获取和设置值的函数</li></ul><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  surname<span class="token operator">:</span> <span class="token string">"Smith"</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 当读取 obj.propName 时，getter 起作用</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 当执行 obj.propName = value 操作时，setter 起作用</span>      <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"Alice Cooper"</span><span class="token punctuation">;</span><span class="token comment">// 调用setter</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>fullname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice Cooper</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cooper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问器描述符"><a href="#访问器描述符" class="headerlink" title="访问器描述符"></a>访问器描述符</h4><ul><li><strong><code>get</code></strong> —— 一个没有参数的函数，在读取属性时工作，</li><li><strong><code>set</code></strong> —— 带有一个参数的函数，当属性被设置时调用，</li><li><strong><code>enumerable</code></strong> —— 与数据属性的相同，</li><li><strong><code>configurable</code></strong> —— 与数据属性的相同。</li></ul><p>使用 <code>defineProperty</code> 创建一个 <code>fullName</code> 访问器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  surname<span class="token operator">:</span> <span class="token string">"Smith"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'fullName'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John Smith</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name, surname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="巧妙的getter和setter"><a href="#巧妙的getter和setter" class="headerlink" title="巧妙的getter和setter"></a>巧妙的getter和setter</h4><ul><li>Getter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例如：当我们需要输入用户名不能太短时</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Name is too short, need at least 4 characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Pete"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pete</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// Name 太短了……</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问器属性本身就是两个函数，没有值，存值一般会有一个内部数据属性存值！！（例如这里的<code>_name</code>)</li></ul><h4 id="访问器属性实例"><a href="#访问器属性实例" class="headerlink" title="访问器属性实例"></a>访问器属性实例</h4><ul><li>访问器的一大用途是，它们允许随时通过使用 getter 和 setter 替换“正常的”数据属性，来控制和调整这些属性的行为。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 对于年龄这样的变化数据，我们希望存储birthday而不是age</span><span class="token comment">// 这里我们就可以使用访问器属性，动态获取修改对象的age属性</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>  <span class="token comment">// 年龄是根据当前日期和生日计算得出的</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> todayYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> todayYear <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birthday<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> john<span class="token punctuation">.</span>birthday <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mon Nov 29 1999 00:00:00 GMT+0800 (中国标准时间)</span><span class="token function">alert</span><span class="token punctuation">(</span> john<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise回调</title>
      <link href="2020/10/13/promise-hui-diao/"/>
      <url>2020/10/13/promise-hui-diao/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise回调"><a href="#Promise回调" class="headerlink" title="Promise回调"></a>Promise回调</h1><h2 id="引入promise"><a href="#引入promise" class="headerlink" title="引入promise"></a>引入promise</h2><ul><li>为什么js要加入回调这一概念？  让我们来看下面的示例</li><li>异步编程</li></ul><a id="more"></a><p>下面一个异步行为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用loadScript(src)给脚本加载给定的src</span><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'/my/script.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//但是我们会发现：</span><span class="token comment">// loadScript 下面的代码</span><span class="token comment">// 不会等到脚本加载完成才执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看出，我们需要一个回调信息，告诉我们浏览器何时完成了加载，之后我们才能使用新加载的函数和属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//于是我们将函数加入回调函数参数</span><span class="token comment">//callback函数就实现了，当脚本文件加载完毕立即执行回调函数内容</span><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Script load error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'/my/script.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理 error</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 脚本加载成功</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>于此，我们又发现了新的问题，如果有多个嵌套的引入函数时，我们就要把代码写的像“厄运金字塔”一样，很容易失控！</li></ul><img data-src="/2020/10/13/promise-hui-diao/%E5%8E%84%E8%BF%90%E9%87%91%E5%AD%97%E5%A1%94.png" class="" title="厄运金字塔"><ul><li>进一步，我们想通过多个函数分开写法，减少嵌套,但这种方式代码支离破碎，读起来跳来跳去，多个函数命名也是问题，于是我们探索更好的方式，最好的方法之一就是 “promise”</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'1.js'</span><span class="token punctuation">,</span> step1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'2.js'</span><span class="token punctuation">,</span> step2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'3.js'</span><span class="token punctuation">,</span> step3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// ...加载完所有脚本后继续 (*)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li><p>这里我们做一个类比</p><blockquote><p>“生产者代码”做一些事，并且需要一些时间，如：通过网络加载数据的代码，像一位歌手</p><p>“消费者代码”想在”生产者代码”完成工作第一时间得到其工作成果，像粉丝</p></blockquote></li><li><p>promise就是将两者连接在一起的特殊JS对象</p><blockquote><p>前者：传递给 <code>new Promise</code>的函数<strong>executor</strong>，对象创建时自动执行</p><p>后者：将接收结果或 error。可以通过使用 <code>.then</code>、<code>.catch</code> 和 <code>.finally</code> 方法为消费函数进行注册。</p></blockquote></li></ul><h3 id="构造器语法"><a href="#构造器语法" class="headerlink" title="构造器语法"></a>构造器语法</h3>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resovle<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// executor (生产者代码，“歌手”)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>传递给 <code>new Promise</code>的函数是<strong>executor</strong>，对象创建时自动执行—就是歌手</p><blockquote><p>resolve 和 reject 是Javascript自身提供的的回调</p><ul><li><code>resolve(value)</code> — 如果任务成功完成并带有结果 <code>value</code>。</li><li><code>reject(error)</code> — 如果出现了 error，<code>error</code> 即为 error 对象。</li></ul></blockquote></li><li><p>由 <code>new Promise</code> 构造器返回的 <code>promise</code> 对象具有以下内部属性：</p><blockquote><ul><li><code>state</code> — 最初是 <code>"pending"</code>，然后在 <code>resolve</code> 被调用时变为 <code>"fulfilled"</code>，或者在 <code>reject</code> 被调用时变为 <code>"rejected"</code>。</li><li><code>result</code> — 最初是 <code>undefined</code>，然后在 <code>resolve(value)</code> 被调用时变为 <code>value</code>，或者在 <code>reject(error)</code> 被调用时变为 <code>error</code>。</li></ul></blockquote></li></ul><img data-src="/2020/10/13/promise-hui-diao/promise%E5%B1%9E%E6%80%A7.png" class="" title="promise属性"><ul><li><p>看两个实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (1) 成功完成</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当 promise 被构造完成时，自动执行此函数</span>  <span class="token comment">// 1 秒后发出工作已经被完成的信号，并带有结果 "done"</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><img data-src="/2020/10/13/promise-hui-diao/sucess%E6%A1%88%E4%BE%8B.png" class="" title="sucess案例">  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (2) error案例</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1 秒后发出工作已经被完成的信号，并带有 error</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/10/13/promise-hui-diao/error%E6%A1%88%E4%BE%8B.png" class="" title="error案例"><ul><li><p>注意：executor 只能调用一个<code>resolve</code> 或一个 <code>reject</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 宗旨:一个被 executor 完成的工作只能有一个结果或一个 error。</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"…"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 被忽略</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"…"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 被忽略</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="消费者：then，catch，finally"><a href="#消费者：then，catch，finally" class="headerlink" title="消费者：then，catch，finally"></a>消费者：then，catch，finally</h3><ul><li><code>state</code> <strong>和</strong> <code>result</code> <strong>都是内部的</strong>,不能直接访问他们，但我们可以对他们使用<code>.then</code>/<code>.catch</code>/<code>.finally</code> 方法</li></ul><h5 id="then"><a href="#then" class="headerlink" title="then"></a><strong>then</strong></h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token comment">//handle a successful result</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token comment">//handle an error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一个参数是一个函数，在<code>promise resovled</code> 后运行并接受结果</li><li>第二个参数也是一个函数，在<code>promise rejected</code>后运行并接受error</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resovle<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//resolve运行，1s后执行第一个函数</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//done!</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//Error:Whoops!</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//reject情况, 执行上面第二个函数</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'whoops!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果只关心完成成功的结果！</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"done~"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1s后显示  done~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="catch"><a href="#catch" class="headerlink" title="catch"></a><strong>catch</strong></h5><ul><li>如果我们只对error感兴趣</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用null作为第一个参数</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// .catch(f) 和 .then(null, f) 一样</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>.catch(f)</code> 调用是 <code>.then(null, f)</code> 的完全的模拟，它只是一个简写形式</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a><strong>finally</strong></h5><ul><li>像常规的 <code>try {...} catch {...}</code> 中的 <code>finally</code> 子句一样，promise 中也有 <code>finally</code>。</li><li><code>.finally(f)</code> 调用与 <code>.then(f, f)</code> 类似，在某种意义上，<code>f</code> 总是在 promise 被 settled 时运行：即 promise 被 resolve 或 reject。</li><li><code>finally</code> 是执行清理（cleanup）的很好的处理程序（handler），例如无论结果如何，都停止使用不再需要的加载指示符（indicator）。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">/* 做一些需要时间的事儿，然后调用 resolve/reject */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 在 promise 被 settled 时运行，无论成功与否</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> stop loading indicator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> show result<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> show error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>finally</code> 处理程序（handler）没有参数。在 <code>finally</code> 中，我们不知道 promise 是否成功。</li><li><code>finally</code> 处理程序将结果和 error 传递给下一个处理程序。</li><li><code>.finally(f)</code> 是比 <code>.then(f, f)</code> 更为方便的语法</li></ol><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h5><ul><li><p>在 settled 的 promise 上，**<code>then</code> <strong>会立即运行</strong></p></li><li><p>promise 为 pending 状态，<code>.then/catch/finally</code> 处理程序（handler）将等待它。否则，如果 promise 已经是 settled 状态，它们就会立即执行，这也是Promise的优点</p></li></ul><h5 id="示例：loadScript"><a href="#示例：loadScript" class="headerlink" title="示例：loadScript"></a>示例：loadScript</h5><ul><li>前面我们提到，用于加载脚本的 <code>loadScript</code> 函数。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Script load error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面用promise重写:</li></ul><p>新函数 <code>loadScript</code> 将不需要回调。取而代之的是，它将创建并返回一个在加载完成时解析（resolve）的 promise 对象。外部代码可以使用 <code>.then</code> 向其添加处理程序（订阅函数）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>        script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Script load error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 用法</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">loadscript</span><span class="token punctuation">(</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>script<span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is loaded</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Another handler...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>Promise</th><th>Callbacks</th></tr></thead><tbody><tr><td>Promises 允许我们按照自然顺序进行编码。首先，我们运行 <code>loadScript</code> 和 <code>.then</code> 来处理结果。</td><td>在调用 <code>loadScript(script, callback)</code> 时，在我们处理的地方（disposal）必须有一个 <code>callback</code> 函数。换句话说，在调用 <code>loadScript</code> <strong>之前</strong>，我们必须知道如何处理结果。</td></tr><tr><td>我们可以根据需要，在 promise 上多次调用 <code>.then</code></td><td>只能有一个回调。</td></tr></tbody></table><ul><li>promise 为我们提供了更好的代码流和灵活性。</li></ul><h2 id="Promise链"><a href="#Promise链" class="headerlink" title="Promise链"></a>Promise链</h2><ul><li>异步任务一个接着一个，怎样写出更好的代码呢？</li></ul><p><strong>简单看一下Promise链：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (**)</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (***)</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将 result 通过 <code>.then</code> 处理程序（handler）链进行传递。</li></ul><img data-src="/2020/10/13/promise-hui-diao/Promise%E9%93%BE.png" class="" title="Promise链"><ul><li><code>promise.then</code> 的调用会返回了一个 promise，所以我们可以在其之上调用下一个 <code>.then</code>。</li><li>当处理程序（handler）返回一个值时，它将成为该 promise 的 result，所以将使用它调用下一个 <code>.then</code>。</li></ul><p><strong>错误点</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里所做的只是一个 promise 的几个处理程序（handler）。它们不会相互传递 result；相反，它们之间彼此独立运行处理任务</li></ul><img data-src="/2020/10/13/promise-hui-diao/%E9%94%99%E8%AF%AF%E7%A4%BA%E8%8C%83.png" class="" title="错误示范"><h3 id="返回promise"><a href="#返回promise" class="headerlink" title="返回promise"></a>返回promise</h3><ul><li><p><code>.then(handler)</code> 中所使用的处理程序（handler）可以创建并返回一个 promise</p></li><li><p>其他的处理程序（handler）将等待它 settled 后再获得其结果（result）</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// (*)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (**)</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>与前面的示例相同：1 → 2 → 4，但是现在在每次 <code>alert</code> 调用之间会有 1 秒钟的延迟。</li><li>返回 promise 使我们能够构建异步行为链</li></ul><h3 id="示例：loadScript-1"><a href="#示例：loadScript-1" class="headerlink" title="示例：loadScript"></a>示例：loadScript</h3><ul><li>与前面的loadScript函数结合</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">"/article/promise-chaining/one.js"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">"/article/promise-chaining/two.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">"/article/promise-chaining/three.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 脚本加载完成，我们可以在这儿使用脚本中声明的函数</span>    <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>每个 <code>loadScript</code> 调用都返回一个 promise，并且在它 resolve 时下一个 <code>.then</code> 开始运行。然后，它启动下一个脚本的加载。所以，脚本是一个接一个地加载的。</p></li><li><p>我们可以向每个 <code>loadScript</code> 直接添加 <code>.then</code>，但是那样是向右增长的，内层可以访问外层的变量有风险！！</p></li></ul><blockquote><p>Thenables</p><ul><li>确切的说，处理程序返回的不完全是一个promise，而是一个被称为“thenable”对象，（一个具有<code>.then</code> 方法的任意对象，我们当做promise对象看待</li><li>设计源于：因为实现了<code>.then</code>方法，第三方库可以实现自己的“promise”兼容对象，他们可以具有扩展的方法集，也和原生的promise兼容</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&gt;</span><span class="token comment">// 实例</span><span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">Thenable</span> <span class="token punctuation">{</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function() { native code }</span>   <span class="token comment">// 1 秒后使用 this.num*2 进行 resolve</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thenable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000ms 后显示 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>(*)</code> 行中由 <code>.then</code> 处理程序（handler）返回的对象：如果它具有名为 <code>then</code> 的可调用方法，那么它将调用该方法并提供原生的函数 <code>resolve</code> 和 <code>reject</code> 作为参数（类似于 executor）</li><li><code>resolve(2)</code> 在 1 秒后被调用，result 会被进一步沿着链向下传递。</li><li>这个特性允许我们将自定义的对象与 promise 链集成在一起，而不必继承自 <code>Promise</code>。</li></ul></blockquote><h3 id="更复杂的示例：fetch"><a href="#更复杂的示例：fetch" class="headerlink" title="更复杂的示例：fetch"></a>更复杂的示例：fetch</h3><ul><li>前端编程中，promise通常用于网络请求</li></ul><ol><li><p>使用 <a href="https://zh.javascript.info/fetch">fetch</a> 方法从远程服务器加载用户信息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li><p>向<code>url</code> 发出网络请求，并返回一个promise。</p></li><li><p>当远程服务器返回 header（是在 <strong>全部响应加载完成前</strong>）时，该 promise 使用一个 <code>response</code> 对象来进行 resolve。</p></li><li><p>为了读取完整的响应，我们应该调用 <code>response.text()</code> 方法：当全部文字（full text）内容从远程服务器下载完成后，它会返回一个 promise，该 promise 以刚刚下载完成的这个文本作为 result 进行 resolve。</p></li></ol></blockquote></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/promise-chaining/user.json'</span><span class="token punctuation">)</span>  <span class="token comment">// 当远程服务器响应时，下面的 .then 开始执行</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 当 user.json 加载完成时，response.text() 会返回一个新的 promise</span>    <span class="token comment">// 该 promise 以加载的 user.json 为 result 进行 resolve</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...这是远程文件的内容</span>    <span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"name": "iliakan", "isAdmin": true}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    &gt;4. 从 `fetch` 返回的 `response` 对象还包括 `response.json()` 方法，该方法读取远程数据并将其解析为 JSON</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 同上，但是使用 response.json() 将远程内容解析为 JSON</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/promise-chaining/user.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// iliakan, got user name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>多发一个到 GitHub 的请求，加载用户个人资料并显示头像：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 发送一个对 user.json 的请求</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/promise-chaining/user.json'</span><span class="token punctuation">)</span>  <span class="token comment">// 将其加载为 JSON</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 发送一个到 GitHub 的请求</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 将响应加载为 JSON</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 显示头像图片（githubUser.avatar_url）3 秒（也可以加上动画效果）</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">githubUser</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> githubUser<span class="token punctuation">.</span>avatar_url<span class="token punctuation">;</span>    img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"promise-avatar-example"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> img<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>链没有扩展性，我们需要返回一个在头像显示结束时进行 resolve 的 promise。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/article/promise-chaining/user.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">githubUser</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (*)</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> githubUser<span class="token punctuation">.</span>avatar_url<span class="token punctuation">;</span>    img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"promise-avatar-example"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      img<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>githubUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (**)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3 秒后触发</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">githubUser</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Finished showing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>githubUser<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第 <code>(*)</code> 行的 <code>.then</code> 处理程序（handler）现在返回一个 <code>new Promise</code>，只有在 <code>setTimeout</code> 中的 <code>resolve(githubUser)</code> <code>(**)</code> 被调用后才会变为 settled。</li><li>异步行为应该始终返回一个 promise。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 整理后的代码</span><span class="token keyword">function</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">loadGithubUser</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showAvatar</span><span class="token punctuation">(</span><span class="token parameter">githubUser</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> githubUser<span class="token punctuation">.</span>avatar_url<span class="token punctuation">;</span>    img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"promise-avatar-example"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      img<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>githubUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用它们：</span><span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token string">'/article/promise-chaining/user.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">loadGithubUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>showAvatar<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">githubUser</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Finished showing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>githubUser<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ul><li>如果<code>.then</code> 处理程序返回一个promise，那么链的其他部分都会等待，知道他状态变为settled。</li><li>当他settled，其result（或error），将被进一步传递。</li></ul><img data-src="/2020/10/13/promise-hui-diao/promise%E9%93%BE%E5%9B%BE.png" class="" title="promise链图"><p><strong>思考</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//这两个代码片段是否相等？换句话说，对于任何处理程序（handler），它们在任何情况下的行为都相同吗？</span><span class="token comment">//(1)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(2)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不相同！！</li><li><code>.then</code> 将 result/error 传递给下一个 <code>.then/.catch</code>。所以在第一个例子中，在下面有一个 <code>catch</code>，而在第二个例子中并没有 <code>catch</code>，所以 error 未被处理。</li></ul><h2 id="使用-promise-进行错误处理"><a href="#使用-promise-进行错误处理" class="headerlink" title="使用 promise 进行错误处理"></a>使用 promise 进行错误处理</h2><ul><li>Promise 链在错误（error）处理中十分强大。当一个 promise 被 reject 时，控制权将移交至最近的 rejection 处理程序（handler）</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例如：代码中url是错的</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://no-such-server.blabla'</span><span class="token punctuation">)</span> <span class="token comment">// reject</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: failed to fetch（这里的文字可能有所不同）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>尝试可以看到，<code>.catch</code> 不必是立即的。它可能在一个或多个 <code>.then</code> 之后出现。</p></li><li><p>捕获所有 error 的最简单的方法是，将 <code>.catch</code> 附加到链的末尾：（当链中，哪一结promise被reject，就会被捕捉）</p></li></ul><h3 id="隐式-try…catch"><a href="#隐式-try…catch" class="headerlink" title="隐式 try…catch"></a>隐式 try…catch</h3><ul><li>Promise 的执行者（executor）和 promise 的处理程序（handler）周围有一个“隐式的 <code>try..catch</code>”</li><li>如果发生异常，异常就会被捕获，并被视为 reject 进行处理。</li></ul><ol><li>下面两段代码工作上相同</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Whoops!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Whoops!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在 executor 周围的“隐式 <code>try..catch</code>”自动捕获了 error，并将其变为 rejected promise</p></blockquote><ol start="2"><li>同样在 handler </li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reject 这个 promise</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Whoops!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们在 <code>.then</code> 处理程序（handler）中 <code>throw</code>，这意味着 promise 被 rejected，因此控制权移交至最近的 error 处理程序（handler）</p></blockquote><ol start="3"><li>编程错误也是原因</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">blabla</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有这个函数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: blabla is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再次抛出"><a href="#再次抛出" class="headerlink" title="再次抛出"></a>再次抛出</h3><ul><li>在常规的 <code>try..catch</code> 中，我们可以分析错误（error），如果我们无法处理它，可以将其再次抛出。对于 promise 来说，这也是可以的。</li><li>如果我们在 <code>.catch</code> 中 <code>throw</code>，那么控制权就会被移交到下一个最近的 error 处理程序（handler）。如果我们处理该 error 并正常完成，那么它将继续到最近的成功的 <code>.then</code> 处理程序（handler）。</li></ul><ol><li>执行流：catch -&gt; then</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"The error is handled, continue normally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Next successful handler runs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里 <code>.catch</code> 块正常完成。所以下一个成功的 <code>.then</code> 处理程序（handler）就会被调用。</p></blockquote><ol start="2"><li>执行流：catch -&gt; catch</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (*)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">URIError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理它</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Can't handle such error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> error<span class="token punctuation">;</span> <span class="token comment">// 再次抛出此 error 或另外一个 error，执行将跳转至下一个 catch</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* 不在这里运行 */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// (**)</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The unknown error has occurred: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不会返回任何内容 =&gt; 执行正常进行</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行从第一个 <code>.catch</code> <code>(*)</code> 沿着链跳转至下一个 <code>(**)</code>。</p></blockquote><h3 id="未处理的-rejection"><a href="#未处理的-rejection" class="headerlink" title="未处理的 rejection"></a>未处理的 rejection</h3><ul><li>当一个 error 没有被处理会发生什么？例如，我们忘了在链的尾端附加 <code>.catch</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">noSuchFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里出现 error（没有这个函数）</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 一个或多个成功的 promise 处理程序（handler）</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尾端没有 .catch！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当发生一个常规的错误（error）并且未被 <code>try..catch</code> 捕获时会发生什么？脚本死了，并在控制台（console）中留下了一个信息。对于在 promise 中未被处理的 rejection，也会发生类似的事儿。</p></blockquote><blockquote><p>JavaScript 引擎会跟踪此类 rejection，在这种情况下会生成一个全局的 error。如果你运行上面这个代码，你可以在控制台（console）中看到。</p></blockquote><ul><li>在浏览器中，我们可以使用 <code>unhandledrejection</code> 事件来捕获这类 error：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'unhandledrejection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这个事件对象有两个特殊的属性：</span>  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Promise] - 生成该全局 error 的 promise</span>  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Whoops! - 未处理的 error 对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Whoops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有用来处理 error 的 catch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果出现了一个 error，并且在这儿没有 <code>.catch</code>，那么 <code>unhandledrejection</code> 处理程序（handler）就会被触发，并获取具有 error 相关信息的 <code>event</code> 对象，所以我们就能做一些后续处理了</p></blockquote><ul><li>通常此类 error 是无法恢复的，所以我们最好的解决方案是将问题告知用户，并且可以将事件报告给服务器。</li><li>在 Node.js 等非浏览器环境中，有其他用于跟踪未处理的 error 的方法。</li></ul><h3 id="Fetch错误实例"><a href="#Fetch错误实例" class="headerlink" title="Fetch错误实例"></a>Fetch错误实例</h3><ul><li>当请求无法发出时，<a href="https://developer.mozilla.org/zh/docs/Web/API/WindowOrWorkerGlobalScope/fetch">fetch</a> reject 会返回 promise</li><li>服务器返回一个错误 500 的非 JSON（non-JSON）页面该怎么办？</li><li>如果没有这个用户，GitHub 返回错误 404 的页面又该怎么办呢？</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'no-such-user.json'</span><span class="token punctuation">)</span> <span class="token comment">// (*)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// (**)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Unexpected token &lt; in JSON at position 0</span>  <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>代码试图以 JSON 格式加载响应数据，但无论如何都会因为语法错误而失败。</li><li>什么失败了，在哪里失败的。</li><li>因此我们多添加一步：我们应该检查具有 HTTP 状态的 <code>response.status</code> 属性，如果不是 200 就抛出错误</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span> <span class="token comment">// (1)</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'HttpError'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (2)</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token string">'no-such-user.json'</span><span class="token punctuation">)</span> <span class="token comment">// (3)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HttpError: 404 for .../no-such-user.json</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们为 HTTP 错误创建一个自定义类用于区分 HTTP 错误和其他类型错误。此外，新的类有一个 constructor，它接受 <code>response</code> 对象，并将其保存到 error 中。因此，错误处理（error-handling）代码就能够获得响应数据了。</li><li>然后我们将请求（requesting）和错误处理代码包装进一个函数，它能够 fetch <code>url</code> <strong>并</strong> 将所有状态码不是 200 视为错误。这很方便，因为我们通常需要这样的逻辑。</li><li>现在 <code>alert</code> 显示更多有用的描述信息。</li></ol><ul><li>拥有我们自己的错误处理类的好处是我们可以使用 <code>instanceof</code> 很容易地在错误处理代码中检查错误。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例子：从 GitHub 加载给定名称的用户。如果没有这个用户，它将告知用户填写正确的名称</span><span class="token keyword">function</span> <span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Enter a name?"</span><span class="token punctuation">,</span> <span class="token string">"iliakan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Full name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">HttpError</span> <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"No such user, please reenter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// (*)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>这里的 <code>.catch</code> 会捕获所有错误，但是它仅仅“知道如何处理” <code>HttpError 404</code>。在那种特殊情况下，它意味着没有这样的用户，而 <code>.catch</code> 仅仅在这种情况下重试。</li><li>对于其他错误，仅仅是在 <code>(*)</code> 行再次抛出。</li></ul></blockquote><h3 id="加载指示-finally"><a href="#加载指示-finally" class="headerlink" title="加载指示.finally"></a>加载指示<code>.finally</code></h3><ul><li>如果我们有加载指示（load-indication），<code>.finally</code> 是一个很好的处理程序（handler），在 fetch 完成时停止它：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Enter a name?"</span><span class="token punctuation">,</span> <span class="token string">"iliakan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span> <span class="token comment">// (1) 开始指示（indication）</span>  <span class="token keyword">return</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// (2) 停止指示（indication）</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Full name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">HttpError</span> <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"No such user, please reenter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">demoGithubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>此处的 <code>(1)</code> 行，我们通过调暗文档来指示加载</li><li>由于promise没有settled，先进入<code>.then</code> 返回<code>user</code></li><li>最后执行<code>.finally</code> 停止指示</li></ul></blockquote><ul><li>有一个浏览器技巧，<code>(*)</code> 是从 <code>finally</code> 返回零延时（zero-timeout）的 promise。这是因为一些浏览器（比如 Chrome）需要“一点时间”外的 promise 处理程序来绘制文档的更改。因此它确保在进入链下一步之前，指示在视觉上是停止的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js异步 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数进阶</title>
      <link href="2020/10/13/han-shu-jin-jie/"/>
      <url>2020/10/13/han-shu-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="递归和推栈"><a href="#递归和推栈" class="headerlink" title="递归和推栈"></a>递归和推栈</h1><ul><li><p>首先我们看一下函数底层工作原理：</p><blockquote><p>执行上下文：是一个内部数据结构，包含有关函数执行时的详细细节（控制流所在位置，当前变量，this的值，以及一些内部的细节</p></blockquote><p>当函数嵌套调用时：</p><blockquote><ol><li>当前函数被暂停</li><li>相关的执行上下文被 <code>执行上下文堆栈</code> 的特殊数据结构保存</li><li>执行嵌套调用</li><li>调用结束都，再从堆栈中恢复执行上下文，并从停止的位置恢复外部函数</li></ol></blockquote></li></ul><a id="more"></a><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li><p>简要讲一下递归，递归就是上面的函数嵌套调用模式，不断的将当前的上下文压入堆栈的顶端，执行嵌套后的操作；当运行到出口<code>return</code> 时，在从堆栈的顶部一个个的恢复执行的过程</p></li><li><p>所有的递归算法，都可以用循环算法实现，两者的区别</p><blockquote><p>循环算法：一般情况下更加节省内存，更快；但代码结构不如递归直观</p><p>递归算法：算法很直观，易于维护；但占内存大</p></blockquote></li></ul><p>更好的理解递归：我们引入链表</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li><p>为什么要引入链表？链表这一数据类型在js中不常使用，一般都会使用数数组来，存储数据，但是，当我们使用<code>arr.unshift(obj)</code> 操作必须对所有元素重新编号以便为新的元素 <code>obj</code> 腾出空间，而且如果数组很大，会很耗时。</p><blockquote><p>如果我们确实需要快速插入/删除，则可以选择另一种叫做 [链表]的数据结构</p></blockquote></li><li><p>链表元素：是一个使用递归定义的对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  next<span class="token operator">:</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    next<span class="token operator">:</span> <span class="token punctuation">{</span>      value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      next<span class="token operator">:</span> <span class="token punctuation">{</span>        value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        next<span class="token operator">:</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/10/13/han-shu-jin-jie/%E9%93%BE%E8%A1%A8.png" class="" title="链表"><blockquote><p>通过建立了这么一个链式结构：我们对插入删除元素更加的方便</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&gt;</span><span class="token comment">//比如：头插数据，删除中间节点</span><span class="token operator">&gt;</span><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>list<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>list<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>list<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>list <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">"new item"</span><span class="token punctuation">,</span> next<span class="token operator">:</span> list <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 将新值添加到链表头部</span><span class="token operator">&gt;</span>list<span class="token punctuation">.</span>next <span class="token operator">=</span> list<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//删除value=1的节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链表的缺点：</p><ul><li>不能和数组一样通过下表快速查找引用</li></ul><p>升级的链表：</p><ul><li>双向链表：添加一个<code>prev</code>属性指向前一个节点，尾部加一个<code>tail</code> 变量指向尾部节点（尾部节点变化时，实时更新）</li></ul></blockquote></li><li><p>实例比较:  </p><ol><li>斐波那契数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//递归算法</span><span class="token keyword">function</span> <span class="token function">fib</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> n<span class="token operator">:</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//循环算法（自下而上动态递归）</span><span class="token keyword">function</span> <span class="token function">fib</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> c<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//两种算法直观看起来，递归逻辑关系非常的简单，但性能方面有一定的差距</span><span class="token comment">//递归算法，算n较大时，非常的慢，而且很占内存！！  比如fib(77);非常慢  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>反向输出链表</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  next<span class="token operator">:</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    next<span class="token operator">:</span> <span class="token punctuation">{</span>      value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      next<span class="token operator">:</span> <span class="token punctuation">{</span>        value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        next<span class="token operator">:</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//递归：使用先遍历，后输出，天然使用上下堆栈的恢复特点</span><span class="token keyword">function</span> <span class="token function">printReverseList</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printReverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">alert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printReverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环操作：实际上也是新建了一个上下堆栈，存储对应的输出，然后，倒叙循环输出</span><span class="token keyword">function</span> <span class="token function">printReverseList</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> list<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printReverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Rest参数-Spread语法"><a href="#Rest参数-Spread语法" class="headerlink" title="Rest参数/Spread语法"></a>Rest参数/Spread语法</h1>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础知识</title>
      <link href="2020/10/11/javascript-ji-chu-zhi-shi/"/>
      <url>2020/10/11/javascript-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li><h5 id="代码特点"><a href="#代码特点" class="headerlink" title="代码特点"></a>代码特点</h5></li><li><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5></li><li><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5></li><li><h5 id="交互手段（alert，prompt，confirm）"><a href="#交互手段（alert，prompt，confirm）" class="headerlink" title="交互手段（alert，prompt，confirm）"></a>交互手段（alert，prompt，confirm）</h5></li><li><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5></li><li><h5 id="基础数学运算符"><a href="#基础数学运算符" class="headerlink" title="基础数学运算符"></a>基础数学运算符</h5></li><li><h5 id="值的比较"><a href="#值的比较" class="headerlink" title="值的比较"></a>值的比较</h5></li><li><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5></li><li><h5 id="条件分支（if-和-‘-’"><a href="#条件分支（if-和-‘-’" class="headerlink" title="条件分支（if 和 ‘?’)"></a>条件分支（if 和 ‘?’)</h5></li><li><h5 id="循环（while-和-for）"><a href="#循环（while-和-for）" class="headerlink" title="循环（while 和 for）"></a>循环（while 和 for）</h5></li><li><h5 id="“switch”语句"><a href="#“switch”语句" class="headerlink" title="“switch”语句"></a>“switch”语句</h5></li><li><h5 id="函数，函数表达式"><a href="#函数，函数表达式" class="headerlink" title="函数，函数表达式"></a>函数，函数表达式</h5></li><li><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5></li></ol></blockquote><a id="more"></a><h1 id="1-代码特点"><a href="#1-代码特点" class="headerlink" title="1.代码特点"></a>1.代码特点</h1><h2 id="“script”标签"><a href="#“script”标签" class="headerlink" title="“script”标签"></a>“script”标签</h2><ul><li><code>&lt;script&gt;</code>标签可以将js程序，插入html文档任何位置</li></ul><h3 id="js程序三种引用方法"><a href="#js程序三种引用方法" class="headerlink" title="js程序三种引用方法"></a>js程序三种引用方法</h3><ol><li><p>行内样式（使用很少）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"点我试试"</span> onclick<span class="token operator">=</span><span class="token string">"alert('Hello World')"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>&lt;script&gt;</code>标签内嵌式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>&lt;script&gt;</code>标签引入外部文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"my.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意：一个<code>&lt;script&gt;</code>标签只能作为两种方式中的一种使用</li></ul></li></ol><h3 id="现代的标记（makeup）"><a href="#现代的标记（makeup）" class="headerlink" title="现代的标记（makeup）"></a>现代的标记（makeup）</h3><ul><li><p>现在的<code>&lt;script&gt;</code>标签很少再使用特性（attribute），但可以在一些老的代码中找到他们</p><p><code>type</code> 特性 <code>&lt;script type="text/javascript"&gt;</code>,现在用于Javascript模块</p><p><code>language</code> 特性 <code>&lt;script language=...&gt;</code>,现在已经默认js语言，无意义啦</p></li></ul><h2 id="现代模式”use-strict”"><a href="#现代模式”use-strict”" class="headerlink" title="现代模式”use strict”"></a>现代模式”use strict”</h2><ul><li><p>JavaScript 除了提供正常模式(sloppy)外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p><blockquote><p>严格模式对正常的 JavaScript 语义做了一些更改： </p><p>1.严格模式通过<strong>抛出错误</strong>来消除了一些原有<strong>静默错误</strong></p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，<strong>增加运行速度</strong>。</p><p>4.<strong>禁用了</strong>在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p></blockquote></li><li><p>使用方法：推荐加在脚本前</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//更像是一个字符串，放在脚本文件的顶部，整个脚本文件就将以”现代模式“工作</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">//严格模式激活！！一旦激活无法回溯</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>严格模式下基本特点</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 对于未声明的变量不允许使用</span><span class="token string">'use strict'</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">//not defined!</span><span class="token comment">//严格模式不允许删除变量</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">delete</span> num1<span class="token punctuation">;</span><span class="token comment">//unqualified！</span><span class="token comment">//全局作用域中函数(或构造函数)中的this是 undefined</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    coonsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//严格模式下，定时器 this 还是指向window</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//严格模式下，函数参数不允许有同名的形参</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4   相当于a=1, a=2 最终a=2</span><span class="token comment">//非函数代码块，不允许定义函数,比如if，for中（函数中套函数可以）</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//!!语法错误</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>现代js支持<code>class</code> <code>modules</code>—高级语言结构，会自启动严格模式，无需再加</p></li></ul><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h1><ul><li>我们可以使用<code>var</code> <code>let</code> <code>const</code>来声明变量存储数据</li><li>变量命名：<code>$</code> <code>_</code>字母，数字，  驼峰命名法</li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul><li>现代变量声明方式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ul><li>老旧变量声明方式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul><li>常量声明，类似let</li></ul><ol><li><p>大写形式常量：硬编码值的别名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//比如:web16进制格式的颜色常量声明</span><span class="token keyword">const</span> <span class="token constant">COLOR_RED</span> <span class="token operator">=</span> <span class="token string">"#F00"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COLOR_BLUE</span> <span class="token operator">=</span> <span class="token string">"#00F"</span><span class="token punctuation">;</span><span class="token comment">//...当我们需要一个颜色时</span><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token constant">COLOR_BLUE</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// #00F</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>小写形式常量：一般不变的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> pageDownloadTime <span class="token operator">=</span> <span class="token comment">/*网页所需加载时间*/</span>；<span class="token comment">//页面加载前是未知的，加载之后就是固定的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="var和let区别"><a href="#var和let区别" class="headerlink" title="var和let区别"></a>var和let区别</h2><ol><li><p>var没有块级作用域</p><blockquote><ul><li>即：不是函数作用域就是全局作用域</li></ul></blockquote></li><li><p>var允许重新声明</p><blockquote><ul><li><p>let在同一作用域下，同时声明同一个变量两次会报错</p></li><li><p>var 允许重复声明（第二个声明初始化无效，作用域下确认了前面的声明</p></li></ul></blockquote></li><li><p>var声明的变量，有变量提升</p><blockquote><ul><li>let声明的变量没有变量提升，变量声明必须在变量赋值前</li><li>var声明可以在赋值的后面（声明有提升，赋值没有）</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//看一个有意思的案例</span><span class="token keyword">function</span> <span class="token function">sayHi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    phrase <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token comment">//这部分代码理论上是不可能执行的</span>    <span class="token comment">//但在进入这个函数作用域时，首先就处理了var语句！！！</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> phrase<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">alert</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h1><ul><li>js中有8种基本数据类型（7种原始类型，1种引用类型）—动态类型</li></ul><h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><ul><li><p>整数和浮点数</p></li><li><p>常规数字和特殊数值（Infinity, -Infinity, 和NaN)</p></li></ul><h2 id="BigInt类型"><a href="#BigInt类型" class="headerlink" title="BigInt类型"></a>BigInt类型</h2><ul><li>number无法表示大于<code>2e53-1</code>或小于<code>-（2e53-1）</code>的整数</li><li>当我们需要加密或者微妙精度的时间戳时，BigInt类型表示任意长度</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//尾部一个n表示是一个BigInt类型</span><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">1234567890123456789012345678901234567890n</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ul><li><p>字符串必须括在引号里，一共有三种引号</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">'single quotes are ok too'</span><span class="token punctuation">;</span><span class="token keyword">let</span> phrase <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">can embed another </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>功能扩展引号：允许通过将变量和表达式包装在<code>${}</code> 中</p></blockquote></li></ul><h2 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h2><ul><li><code>true</code> <code>false</code>两个值</li></ul><h2 id="“null”值"><a href="#“null”值" class="headerlink" title="“null”值"></a>“null”值</h2><ul><li><p>特殊的null不属于上述任何一种类型</p></li><li><p>它构成一个独立的类型。只包含<code>null</code> 值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//表示age是未知的</span><span class="token comment">//和其他语言不同，js的null不是一个对不存在的object的引用”或者 “null 指针”</span><span class="token comment">//Js中的 null 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="“undefined”值"><a href="#“undefined”值" class="headerlink" title="“undefined”值"></a>“undefined”值</h2><ul><li><p>也是一个独立的类型，表示 <code>未被赋值</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> age<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出“undefined”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p>注：通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值</p></blockquote><h2 id="object类型和symbol类型"><a href="#object类型和symbol类型" class="headerlink" title="object类型和symbol类型"></a>object类型和symbol类型</h2><ul><li><p><code>object</code> 则用于储存数据集合和更复杂的实体</p></li><li><p><code>symbol</code> 类型用于创建对象的唯一标识符</p></li></ul><h2 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h2><ul><li>支持两种语法形式 (有无括号都一样)<ol><li>作为运算符：<code>typeof x</code></li><li>函数形式：<code>typeof(x)</code></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// "undefined"</span><span class="token keyword">typeof</span> <span class="token number">0</span> <span class="token comment">// "number"</span><span class="token keyword">typeof</span> <span class="token number">10n</span> <span class="token comment">// "bigint"</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment">// "boolean"</span><span class="token keyword">typeof</span> <span class="token string">"foo"</span> <span class="token comment">// "string"</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token comment">// "symbol"</span><span class="token keyword">typeof</span> Math <span class="token comment">// "object"</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// "object"语法上的一种错误</span><span class="token keyword">typeof</span> alert    <span class="token comment">// "function"虽然没有function数据类型，但这样很方便！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-三种交互方式"><a href="#4-三种交互方式" class="headerlink" title="4.三种交互方式"></a>4.三种交互方式</h1><ul><li>这里讲三种模态的，他们中止脚本的执行，不允许用户和其他页面交互，直到窗口被解除</li></ul><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><ul><li><p>弹出带信息的<strong>模态框</strong>，（“modal” 意味着用户不能与页面的其他部分）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h2><ul><li><p>弹出一个带有文本消息的模态窗口，有input框和确定/取消按钮</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//title: 显示文本提示信息</span><span class="token comment">//default: 指定input框的默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>访问者输入一些内容，确定就会返回一个字符串类型的值；取消获得null返回值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'How old are you?'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// You are 100 years old!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>没有输入内容点击确定，会返回空字符串</p><blockquote><p>IE会提供默认值 undefined </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//推荐</span><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加一个空字符串！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li></ul><h2 id="conform"><a href="#conform" class="headerlink" title="conform"></a>conform</h2><ul><li><p>conform函数，会显示一个带有question以及确认取消按钮的模态框</p></li><li><p>点击确认返回<code>true</code> ，点击取消返回<code>false</code> </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> isBoss <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Are you the boss?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> isBoss <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果“确定”按钮被按下，则显示 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链</title>
      <link href="2020/09/26/yuan-xing-lei/"/>
      <url>2020/09/26/yuan-xing-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="1-原型"><a href="#1-原型" class="headerlink" title="1.原型"></a>1.原型</h3><ul><li>首先说一下什么是原型？</li></ul><blockquote><p>这一概念来自：实例对象中的<code>__proto__</code>属性</p><ul><li>这一属性就是对象的原型（值可以是对象或null）</li><li>指向构造函数的原型对象<code>prototype</code></li><li>并且有且只有一个</li></ul></blockquote><img data-src="/2020/09/26/yuan-xing-lei/img4.png" class="" title="img4"><ul><li>访问器（accessor）属性是一个例外，因为分配（assignment）操作是由 setter 函数处理的。因此，写入此类属性实际上与调用函数相同。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// admin.fullName 能够正常运行：</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Min"</span><span class="token punctuation">,</span>  surname<span class="token operator">:</span> <span class="token string">"Yue"</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token punctuation">{</span>  __proto__<span class="token operator">:</span> user<span class="token punctuation">,</span>  isAdmin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Min Yue</span><span class="token comment">// setter triggers!</span>admin<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"He Chengmin"</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>值得思考，这里<code>this</code> 指向问题（当然指向admin）永远是函数名 <code>.</code> 前面的</li></ul><ul><li><code>for...in</code>会迭代继承的属性</li><li><code>Object.keys</code>,<code>Object.values</code> 都会忽略继承属性</li></ul><a id="more"></a><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>//两只小鼠共用了一个胃？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> hamster <span class="token operator">=</span> <span class="token punctuation">{</span>  stomach<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stomach<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> speedy <span class="token operator">=</span> <span class="token punctuation">{</span>  __proto__<span class="token operator">:</span> hamster<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> lazy <span class="token operator">=</span> <span class="token punctuation">{</span>  __proto__<span class="token operator">:</span> hamster<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 这只仓鼠找到了食物</span>speedy<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> speedy<span class="token punctuation">.</span>stomach <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apple</span><span class="token comment">// 这只仓鼠也找到了食物，为什么？请修复它。</span><span class="token function">alert</span><span class="token punctuation">(</span> lazy<span class="token punctuation">.</span>stomach <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apple</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决方案</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (1):简单的赋值 this.stomach=? 而不是this.stomach.push(food);</span><span class="token comment">// this.stomach.push() 需要找到 stomach 属性，然后对其调用 push。它在 this（=speedy）中查找 stomach，但并没有找到。然后它顺着原型链，在 hamster 中找到 stomach。</span><span class="token comment">// this.stomach= 不会执行对 stomach 的查找。该值会被直接写入 this 对象。</span><span class="token comment">// (2):确保每个小鼠都有自己的胃</span><span class="token keyword">let</span> speedy <span class="token operator">=</span> <span class="token punctuation">{</span>  __proto__<span class="token operator">:</span> hamster<span class="token punctuation">,</span>  stomach<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> lazy <span class="token operator">=</span> <span class="token punctuation">{</span>  __proto__<span class="token operator">:</span> hamster<span class="token punctuation">,</span>  stomach<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-F-prototype"><a href="#2-F-prototype" class="headerlink" title="2.F.prototype"></a>2.F.prototype</h3><ul><li><p>构造函数原型对象</p></li><li><p>如果 <code>F.prototype</code> 是一个对象，那么 <code>new</code> 操作符会使用它为新对象设置 <code>[[Prototype]]</code>。</p><blockquote><p>注意：<code>F.prototype</code> <strong>仅用在</strong> <code>new F</code> <strong>时</strong>调用，它为新对象的 <code>[[Prototype]]</code> 赋值。（原型对象改变（F.prototype = <another object="">）后，不影响前面对象的原型，影响新对象的原型）</another></p></blockquote></li><li><p>当然每个函数都有对应的 <code>"prototype"</code> 属性</p><blockquote><p>默认的 <code>"prototype"</code> 是一个只有属性 <code>constructor</code> 的对象，属性 <code>constructor</code> 指向函数自身。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/* default prototypeRabbit.prototype = { constructor: Rabbit };*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><img data-src="/2020/09/26/yuan-xing-lei/F.prototype.png" class="" title="F.prototype"><blockquote><p>我们也可以使用 <code>constructor</code> 属性来创建一个新对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> rabbit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"White Rabbit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> rabbit2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rabbit<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token string">"Black Rabbit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当我们有一个对象，但不知道它使用了哪个构造器（例如它来自第三方库），并且我们需要创建另一个类似的对象时，用这种方法就很方便。</li><li>为了确保正确的 <code>"constructor"</code>，我们可以选择添加/删除属性到默认 <code>"prototype"</code>，而不是将其整个覆盖</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 不要将 Rabbit.prototype 整个覆盖</span><span class="token comment">// 可以向其中添加内容</span><span class="token class-name">Rabbit</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>jumps <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">// 默认的 Rabbit.prototype.constructor 被保留了下来</span><span class="token class-name">Rabbit</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  jumps<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  constructor<span class="token operator">:</span> Rabbit<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 这样的 constructor 也是正确的，因为我们手动添加了它</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="3-原生的原型"><a href="#3-原生的原型" class="headerlink" title="3.原生的原型"></a>3.原生的原型</h3><ul><li><p><code>"prototype"</code> 属性在 JavaScript 自身的核心部分中被广泛地应用。所有的内置构造函数都用到了它。</p></li><li><p>像 <code>Array</code>、<code>Date</code>、<code>Function</code> 及其他，都在 prototype 上挂载了方法。</p><blockquote><p>例如：当我们创建一个数组 <code>[1, 2, 3]</code>，在内部会默认使用 <code>new Array()</code> 构造器。因此 <code>Array.prototype</code> 变成了这个数组的 prototype，并为这个数组提供数组的操作方法。这样内存的存储效率是很高的。</p></blockquote></li></ul><img data-src="/2020/09/26/yuan-xing-lei/F.prototype.png" class="" title="F.prototype"><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>字符串、数字和布尔值上。</li><li>它们并不是对象。但是如果我们试图访问它们的属性，那么临时包装器对象将会通过内建的构造器 <code>String</code>、<code>Number</code> 和 <code>Boolean</code> 被创建。它们提供给我们操作字符串、数字和布尔值的方法然后消失。</li><li>这些对象的方法也驻留在它们的 prototype 中，可以通过 <code>String.prototype</code>、<code>Number.prototype</code> 和 <code>Boolean.prototype</code> 进行获取。</li></ul><p><strong>！！！！</strong>对于<strong>值</strong> <code>null</code> <strong>和</strong> <code>undefined</code> <strong>没有对象包装器</strong></p><h4 id="更改原生原型"><a href="#更改原生原型" class="headerlink" title="更改原生原型"></a>更改原生原型</h4><ul><li><p>原生的原型是可以被修改的。</p><p>例如，我们向 <code>String.prototype</code> 中添加一个方法，这个方法将对所有的字符串都是可用的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token string">"BOOM!"</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BOOM!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通常是一个很不好的想法。</p></li></ul><p><strong>在现代编程中，只有一种情况下允许修改原生原型。那就是 polyfilling。</strong></p><ul><li>Polyfilling 是一个术语，表示某个方法在 JavaScript 规范中已存在，但是特定的 JavaScript 引擎尚不支持该方法，那么我们可以通过手动实现它，并用以填充内建原型。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果这儿没有这个方法</span>  <span class="token comment">// 那就在 prototype 中添加它</span>  <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">repeat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 重复传入的字符串 n 次</span>    <span class="token comment">// 实际上，实现代码比这个要复杂一些（完整的方法可以在规范中找到）</span>    <span class="token comment">// 但即使是不够完美的 polyfill 也常常被认为是足够好的</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">"La"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LaLaLa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从原型中借用"><a href="#从原型中借用" class="headerlink" title="从原型中借用"></a>从原型中借用</h4><ul><li>我们从一个对象获取一个方法，并将其复制到另一个对象。一些原生原型的方法通常会被借用。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例如：如果我们要创建类数组对象，则可能需要向其中复制一些 Array 方法。</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"world!"</span><span class="token punctuation">,</span>  length<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>join <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello,world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4.原型链"></a>4.原型链</h3><ul><li>可以看出对象有原型，构造函数有原型对象！</li><li>对象的原型指向，上级构造函数的原型对象</li><li>向上查找，直到顶级<code>Object.prototype.__proto__</code>指向null</li></ul><img data-src="/2020/09/26/yuan-xing-lei/F.prototype.png" class="" title="F.prototype"><ul><li>案例分析</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token operator">:</span> Star<span class="token punctuation">,</span> <span class="token comment">//手动设置指回原来的构造函数</span>    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i can sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">movie</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i can show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> xly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"minyue"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xly<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"women"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xly<span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xly<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[Object, Object]</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2020/09/26/yuan-xing-lei/%E5%AF%B9%E8%B1%A1.png" class="" title="对象"><ul><li><p>可以看到对象xly的结构如上图所示！</p></li><li><p>toString()是Object.prototype中的函数</p><blockquote><p>而且只有这里的toString()函数可以处理复杂数据类型Object，与普通array的toString()函数功能不同</p><ul><li><p>这里的功能是返回xly元素的数据类型，[Object, Object]表示对象</p><p>[Object, Array]表示数组</p></li></ul></blockquote></li></ul><h4 id="查找机制"><a href="#查找机制" class="headerlink" title="查找机制"></a>查找机制</h4><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有__proto__属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。如果还没有就查找原型对象的原型（Object的原型对象）。依此类推一直找到 Object 为止（null）。__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_操作</title>
      <link href="2020/07/23/git-cao-zuo/"/>
      <url>2020/07/23/git-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="git和github"><a href="#git和github" class="headerlink" title="git和github"></a>git和github</h1><h2 id="（一）Git基础"><a href="#（一）Git基础" class="headerlink" title="（一）Git基础"></a>（一）Git基础</h2><h3 id="Git基本工作流程"><a href="#Git基本工作流程" class="headerlink" title="Git基本工作流程"></a>Git基本工作流程</h3><blockquote><img data-src="/2020/07/23/git-cao-zuo/git_%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" class="" title="git操作流程"><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如my_work文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol></blockquote><a id="more"></a><ul><li>关键在于<strong>几个核心存储区的交互命令</strong></li></ul><table><thead><tr><th>工作目录</th><th>暂存区</th><th>git 仓库</th><th>远程仓库</th></tr></thead><tbody><tr><td>被Git管理的项目</td><td>临时存放被修改的文件</td><td>目录用于存放提交记录</td><td>远程代码仓库</td></tr><tr><td><code>git init</code></td><td><code>git add</code></td><td><code>git commit</code></td><td><code>git push</code></td></tr></tbody></table><h3 id="Git使用前的配置命令"><a href="#Git使用前的配置命令" class="headerlink" title="Git使用前的配置命令"></a>Git使用前的配置命令</h3><p>在使用前告诉git你是谁：</p><ol><li><blockquote><p>第一次使用git，配置用户信息</p></blockquote><ol><li>配置用户名：<code>git config --global user.name "your name"</code>;</li><li>配置用户邮箱：<code>git config --global user.email "youremail@github.com"</code>;</li></ol></li><li><blockquote><p>查询配置信息</p></blockquote><ol><li>列出当前配置：<code>git config --list</code>;</li><li>列出repository配置：<code>git config --local --list</code>;</li><li>列出全局配置：<code>git config --global --list</code>;</li><li>列出系统配置：<code>git config --system --list</code>;</li></ol></li></ol><h3 id="工作区上的操作命令"><a href="#工作区上的操作命令" class="headerlink" title="工作区上的操作命令"></a>工作区上的操作命令</h3><h4 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h4><ol><li><p><code>git init</code> 初始化git仓库</p><blockquote><blockquote><p>新建仓库</p></blockquote><ol><li><p>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>git init</code>；</p><ul><li>会生成一个.git隐藏文件</li></ul></li><li><p>从远程git仓库复制项目：<code>git clone ssh地址 </code> </p><p>eg：<code>git clone git@github.com:xiaoming403/my_work.git</code> </p></li><li><p>关联远程仓库：</p><p><code>git remote add origin SSH</code>   #本地文件远程关联github仓库</p></li></ol></blockquote></li><li><p><code>git status</code> 查看文件状态</p><blockquote><blockquote><p>查新信息</p></blockquote><ol><li>查询当前工作区所有文件的状态：<code>git status</code>;</li><li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff </code>;</li></ol></blockquote></li><li><p><code>git add 文件/文件列表</code> 提交到暂存区</p><blockquote><blockquote><p>提交</p></blockquote><ol><li>提交工作区所有文件到暂存区：<code>git add .</code></li><li>提交工作区中指定文件到暂存区：<code>git add   ...</code>;</li><li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li></ol></blockquote></li><li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p><blockquote><blockquote><p>提交文件到版本库</p></blockquote><ol><li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m "commit_info"</code>;</li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m "commit_info"</code>;</li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li><li>上传：首次要加<code>-u</code> -&gt;  <code>git push -u origin master </code></li></ol></blockquote></li><li><p><code>git log</code> 查看提交记录</p><blockquote><blockquote><p>查看信息</p></blockquote><ol><li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li><li>指定文件在暂存区和本地仓库的不同：<code>git diff  --cached</code>;</li><li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li></ol></blockquote></li></ol><ul><li><p><strong>提示：</strong>每天上班第一件事：git pull 拉取线上最新版本；</p><p>​            下班前要做的事：git push 本地代码上传线上仓库</p></li></ul><p><strong>版本回溯</strong></p><ul><li>git reset –hard c72ac3a6e1</li></ul><h2 id="（二）Git分支"><a href="#（二）Git分支" class="headerlink" title="（二）Git分支"></a>（二）Git分支</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>生成副本，避免影响开发主线</p><h4 id="分支细分"><a href="#分支细分" class="headerlink" title="分支细分"></a>分支细分</h4><ol><li>主分支（master）：第一次向git仓库提交更新记录时自动产生的一个分支。</li><li>开发分支（develop）：作为开发的分支，基于master分支创建。</li><li>功能分支（feature）：作为开发具体功能的分支基于开发分支创建。</li></ol><h4 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h4><ul><li><code>git branch</code>    查看分支</li><li><code>git branch 分支名称</code>   创建分支</li><li><code>git checkout 分支名称</code>   切换分支<ul><li>对于新分支，使用<code>git checkout -b 分支名</code>  新建一分支并切换到该分支</li></ul></li><li><code> git merge 被合并的分支名</code>   合并分支</li><li><code>git branch -d 分支名称</code> 删除分支（分支合并后（退出该分支）才允许被删除）（-D 大写强制删除）<ul><li><code>git push origin :branch-name</code> : 远程仓库同步删除掉的分支</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitbub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体图标使用</title>
      <link href="2020/07/20/zi-ti-tu-biao-shi-yong/"/>
      <url>2020/07/20/zi-ti-tu-biao-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><h4 id="1，为什么要使用字体图标？"><a href="#1，为什么要使用字体图标？" class="headerlink" title="1，为什么要使用字体图标？"></a>1，为什么要使用字体图标？</h4><ul><li>字体图标是文本属性，可以更改文本样式达到更改效果</li><li>字体图标兼容性好，与传统图片图标相比更加轻量级</li><li>多用在小图标中！！</li></ul><a id="more"></a><h4 id="2，如何使用字体图标呢？"><a href="#2，如何使用字体图标呢？" class="headerlink" title="2，如何使用字体图标呢？"></a>2，如何使用字体图标呢？</h4><ul><li>首先我们需要下载字体图标</li></ul><ol><li>在icomeen，是一个外网可能会有点慢！    <a href="http://icomoon.io/">http://icomoon.io</a></li><li>在阿里的iconfont <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a> </li></ol><ul><li>这里我们以阿里为例：</li></ul><ol><li><p>选好你喜欢的图标，下载文字代码</p></li><li><p>可以看到压缩包里面有一个demo文件（使用说明书）</p><img data-src="/2020/07/20/zi-ti-tu-biao-shi-yong/pic.png" class="" title="show1"></li><li><p>一般都可以使用Font class方法，调用.css文件就行（但这里需要标签调用）</p></li></ol><h4 id="3，特殊使用-伪元素选择器中"><a href="#3，特殊使用-伪元素选择器中" class="headerlink" title="3，特殊使用-伪元素选择器中"></a>3，特殊使用-伪元素选择器中</h4><ul><li>由于这里不能新建标签，所以我们使用UNICODE(16进制字符实体/转义字符)</li></ul><p>第一步：拷贝项目下面生成的@font-face(到style中）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@font-face {  font-family: 'iconfont';  src: url('iconfont.eot');  src: url('iconfont.eot?#iefix') format('embedded-opentype'),      url('iconfont.woff2') format('woff2'),      url('iconfont.woff') format('woff'),      url('iconfont.ttf') format('truetype'),      url('iconfont.svg#iconfont') format('svg');}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：将定义使用iconfont样式中的设定拷贝到伪元素中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">div::after {            font-family: "iconfont" !important;            font-size: 16px;            font-style: normal;            -webkit-font-smoothing: antialiased;            -moz-osx-font-smoothing: grayscale;            content: "\e64f";        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里css的content接受16进制的 Unicode编码，但<strong>不能</strong>写作实体字符**&amp;#xe64f**；（实体字符只用在html页面中！！： &amp;# 是开头用以标明这是字符实体，x表示这是十六进制）</li></ul><img data-src="/2020/07/20/zi-ti-tu-biao-shi-yong/show.png" class="" title="show2">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github常用操作</title>
      <link href="2020/07/04/hexo-github-chang-yong-cao-zuo/"/>
      <url>2020/07/04/hexo-github-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="如何部署到网站"><a href="#如何部署到网站" class="headerlink" title="如何部署到网站"></a>如何部署到网站</h1><h2 id="三步走："><a href="#三步走：" class="headerlink" title="三步走："></a>三步走：</h2><h3 id="1-1-hexo-clean"><a href="#1-1-hexo-clean" class="headerlink" title="1,1 hexo clean"></a>1,1 hexo clean</h3><p>清理缓存文件(db.json)和已生成的静态文件(public)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[^特别是当换主题时！！！]:</p><h3 id="1-2-hexo-generate（hexo-g）"><a href="#1-2-hexo-generate（hexo-g）" class="headerlink" title="1,2 hexo generate（hexo g）"></a>1,2 hexo generate（hexo g）</h3><p>生成静态文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>文件生成后立即部署网站</td></tr><tr><td>-w</td><td>监事文件变动</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="1-3-hexo-deploy-hexo-d"><a href="#1-3-hexo-deploy-hexo-d" class="headerlink" title="1,3 hexo deploy (hexo d)"></a>1,3 hexo deploy (hexo d)</h3><p>部署网站</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-g</td><td>部署之前，先生成静态文件</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="1-4gulp压缩代码"><a href="#1-4gulp压缩代码" class="headerlink" title="1.4gulp压缩代码"></a>1.4gulp压缩代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gulp build//相当于hexo cl<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>其中也可以加入 hexo server （hexo s）启动本地服务器访问<a href="http://localhost:4000/.%E6%9D%A5%E6%B5%8B%E8%AF%95%E9%9D%99%E6%80%81%E7%95%8C%E9%9D%A2%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%88%E9%A2%84%E6%9C%9F">http://localhost:4000/.来测试静态界面是否符合预期</a></p><pre><code> &lt;http://xiaoming403.github.io&gt;</code></pre><h1 id="文章书写规范"><a href="#文章书写规范" class="headerlink" title="文章书写规范"></a>文章书写规范</h1><h3 id="1，文章front-matter"><a href="#1，文章front-matter" class="headerlink" title="1，文章front-matter"></a>1，文章front-matter</h3><ul><li>建议至少填写title和date值</li></ul><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2020-07-07 09:25:00author: xiaoming403img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><ul><li>注：如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li></ul><p>[^以上front-matter内容：学习参考 <a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a>]: </p><h3 id="2-图片添加方式"><a href="#2-图片添加方式" class="headerlink" title="2,图片添加方式"></a>2,图片添加方式</h3><ul><li>需要在目录新建一个与.md相同名称的文件夹存放img</li><li>调用格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">{% asset_img 图片名称和后缀 图片脚注 %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>范例：<img data-src="/2020/07/04/hexo-github-chang-yong-cao-zuo/pic%E7%A4%BA%E4%BE%8B.png" class="" title="pic示例"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
